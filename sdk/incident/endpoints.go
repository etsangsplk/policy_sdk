// Code generated by goa v3.0.6, DO NOT EDIT.
//
// Incident endpoints
//
// Command:
// $ goa gen github.com/rightscale/governance/front_service/design

package incident

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "Incident" service endpoints.
type Endpoints struct {
	Show             goa.Endpoint
	Index            goa.Endpoint
	Resolve          goa.Endpoint
	IndexEscalations goa.Endpoint
	IndexResolutions goa.Endpoint
}

// NewEndpoints wraps the methods of the "Incident" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		Show:             NewShowEndpoint(s, a.JWTAuth),
		Index:            NewIndexEndpoint(s, a.JWTAuth),
		Resolve:          NewResolveEndpoint(s, a.JWTAuth),
		IndexEscalations: NewIndexEscalationsEndpoint(s, a.JWTAuth),
		IndexResolutions: NewIndexResolutionsEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "Incident" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Show = m(e.Show)
	e.Index = m(e.Index)
	e.Resolve = m(e.Resolve)
	e.IndexEscalations = m(e.IndexEscalations)
	e.IndexResolutions = m(e.IndexResolutions)
}

// NewShowEndpoint returns an endpoint function that calls the method "show" of
// service "Incident".
func NewShowEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ShowPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "GlobalSession",
			Scopes:         []string{"governance:policy_template:compile", "governance:policy_template:upload", "governance:policy_template:update", "governance:policy_template:delete", "governance:policy_template:show", "governance:policy_template:index", "governance:policy_template:retrieve_data", "governance:published_template:create", "governance:published_template:update", "governance:published_template:hide", "governance:published_template:unhide", "governance:published_template:delete", "governance:published_template:show", "governance:published_template:index", "governance:applied_policy:create", "governance:applied_policy:delete", "governance:applied_policy:show", "governance:applied_policy:show_log", "governance:applied_policy:index", "governance:applied_policy:evaluate", "governance:policy_aggregate:create", "governance:policy_aggregate:update", "governance:policy_aggregate:delete", "governance:policy_aggregate:show", "governance:policy_aggregate:index", "governance:incident:resolve", "governance:incident:show", "governance:incident:index", "governance:archived_incident:show", "governance:archived_incident:index", "governance:incident_aggregate:show", "governance:incident_aggregate:index", "governance:approval_request:show", "governance:approval_request:index", "governance:approval_request:approve", "governance:approval_request:deny"},
			RequiredScopes: []string{"governance:incident:show"},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		res, view, err := s.Show(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedIncident(res, view)
		return vres, nil
	}
}

// NewIndexEndpoint returns an endpoint function that calls the method "index"
// of service "Incident".
func NewIndexEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*IndexPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "GlobalSession",
			Scopes:         []string{"governance:policy_template:compile", "governance:policy_template:upload", "governance:policy_template:update", "governance:policy_template:delete", "governance:policy_template:show", "governance:policy_template:index", "governance:policy_template:retrieve_data", "governance:published_template:create", "governance:published_template:update", "governance:published_template:hide", "governance:published_template:unhide", "governance:published_template:delete", "governance:published_template:show", "governance:published_template:index", "governance:applied_policy:create", "governance:applied_policy:delete", "governance:applied_policy:show", "governance:applied_policy:show_log", "governance:applied_policy:index", "governance:applied_policy:evaluate", "governance:policy_aggregate:create", "governance:policy_aggregate:update", "governance:policy_aggregate:delete", "governance:policy_aggregate:show", "governance:policy_aggregate:index", "governance:incident:resolve", "governance:incident:show", "governance:incident:index", "governance:archived_incident:show", "governance:archived_incident:index", "governance:incident_aggregate:show", "governance:incident_aggregate:index", "governance:approval_request:show", "governance:approval_request:index", "governance:approval_request:approve", "governance:approval_request:deny"},
			RequiredScopes: []string{"governance:incident:index"},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		res, view, err := s.Index(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedIncidentList(res, view)
		return vres, nil
	}
}

// NewResolveEndpoint returns an endpoint function that calls the method
// "resolve" of service "Incident".
func NewResolveEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ResolvePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "GlobalSession",
			Scopes:         []string{"governance:policy_template:compile", "governance:policy_template:upload", "governance:policy_template:update", "governance:policy_template:delete", "governance:policy_template:show", "governance:policy_template:index", "governance:policy_template:retrieve_data", "governance:published_template:create", "governance:published_template:update", "governance:published_template:hide", "governance:published_template:unhide", "governance:published_template:delete", "governance:published_template:show", "governance:published_template:index", "governance:applied_policy:create", "governance:applied_policy:delete", "governance:applied_policy:show", "governance:applied_policy:show_log", "governance:applied_policy:index", "governance:applied_policy:evaluate", "governance:policy_aggregate:create", "governance:policy_aggregate:update", "governance:policy_aggregate:delete", "governance:policy_aggregate:show", "governance:policy_aggregate:index", "governance:incident:resolve", "governance:incident:show", "governance:incident:index", "governance:archived_incident:show", "governance:archived_incident:index", "governance:incident_aggregate:show", "governance:incident_aggregate:index", "governance:approval_request:show", "governance:approval_request:index", "governance:approval_request:approve", "governance:approval_request:deny"},
			RequiredScopes: []string{"governance:incident:resolve"},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.Resolve(ctx, p)
	}
}

// NewIndexEscalationsEndpoint returns an endpoint function that calls the
// method "index_escalations" of service "Incident".
func NewIndexEscalationsEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*IndexEscalationsPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "GlobalSession",
			Scopes:         []string{"governance:policy_template:compile", "governance:policy_template:upload", "governance:policy_template:update", "governance:policy_template:delete", "governance:policy_template:show", "governance:policy_template:index", "governance:policy_template:retrieve_data", "governance:published_template:create", "governance:published_template:update", "governance:published_template:hide", "governance:published_template:unhide", "governance:published_template:delete", "governance:published_template:show", "governance:published_template:index", "governance:applied_policy:create", "governance:applied_policy:delete", "governance:applied_policy:show", "governance:applied_policy:show_log", "governance:applied_policy:index", "governance:applied_policy:evaluate", "governance:policy_aggregate:create", "governance:policy_aggregate:update", "governance:policy_aggregate:delete", "governance:policy_aggregate:show", "governance:policy_aggregate:index", "governance:incident:resolve", "governance:incident:show", "governance:incident:index", "governance:archived_incident:show", "governance:archived_incident:index", "governance:incident_aggregate:show", "governance:incident_aggregate:index", "governance:approval_request:show", "governance:approval_request:index", "governance:approval_request:approve", "governance:approval_request:deny"},
			RequiredScopes: []string{"governance:incident:index"},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		res, err := s.IndexEscalations(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedEscalations(res, "default")
		return vres, nil
	}
}

// NewIndexResolutionsEndpoint returns an endpoint function that calls the
// method "index_resolutions" of service "Incident".
func NewIndexResolutionsEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*IndexResolutionsPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "GlobalSession",
			Scopes:         []string{"governance:policy_template:compile", "governance:policy_template:upload", "governance:policy_template:update", "governance:policy_template:delete", "governance:policy_template:show", "governance:policy_template:index", "governance:policy_template:retrieve_data", "governance:published_template:create", "governance:published_template:update", "governance:published_template:hide", "governance:published_template:unhide", "governance:published_template:delete", "governance:published_template:show", "governance:published_template:index", "governance:applied_policy:create", "governance:applied_policy:delete", "governance:applied_policy:show", "governance:applied_policy:show_log", "governance:applied_policy:index", "governance:applied_policy:evaluate", "governance:policy_aggregate:create", "governance:policy_aggregate:update", "governance:policy_aggregate:delete", "governance:policy_aggregate:show", "governance:policy_aggregate:index", "governance:incident:resolve", "governance:incident:show", "governance:incident:index", "governance:archived_incident:show", "governance:archived_incident:index", "governance:incident_aggregate:show", "governance:incident_aggregate:index", "governance:approval_request:show", "governance:approval_request:index", "governance:approval_request:approve", "governance:approval_request:deny"},
			RequiredScopes: []string{"governance:incident:index"},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		res, err := s.IndexResolutions(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedResolutions(res, "default")
		return vres, nil
	}
}
