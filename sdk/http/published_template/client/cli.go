// Code generated by goa v3.0.6, DO NOT EDIT.
//
// PublishedTemplate HTTP client CLI support package
//
// Command:
// $ goa gen github.com/rightscale/governance/front_service/design

package client

import (
	"encoding/json"
	"fmt"
	"strconv"

	publishedtemplate "github.com/rightscale/governance/front_service/gen/published_template"
	goa "goa.design/goa/v3/pkg"
)

// BuildCreatePayload builds the payload for the PublishedTemplate create
// endpoint from CLI flags.
func BuildCreatePayload(publishedTemplateCreateBody string, publishedTemplateCreateOrgID string, publishedTemplateCreateAPIVersion string, publishedTemplateCreateToken string) (*publishedtemplate.CreatePayload, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(publishedTemplateCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"credentials\": {\n         \"Consequatur voluptatibus non perspiciatis sit.\": \"Nulla inventore eum illo laborum distinctio.\",\n         \"Error repellat sapiente minus nam eum.\": \"Voluptatem incidunt enim.\"\n      },\n      \"description\": \"Delete unattached volumes after 24 hours in US-East.\",\n      \"dry_run\": false,\n      \"frequency\": \"daily\",\n      \"name\": \"us_east_unattached_volumes\",\n      \"options\": [\n         {\n            \"name\": \"cloud_vendor\",\n            \"value\": \"AWS\"\n         },\n         {\n            \"name\": \"email_list\",\n            \"value\": [\n               \"person1@domain.com\",\n               \"person2@domain.com\"\n            ]\n         }\n      ],\n      \"skip_approvals\": false,\n      \"template_href\": \"/api/governance/projects/60073/policy_templates/5b06ead5e0dacc007058c784\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.template_href", body.TemplateHref, "^/api/governance/projects/[0-9]+/policy_templates/[0-9a-f]+$"))
		if err != nil {
			return nil, err
		}
	}
	var orgID uint
	{
		var v uint64
		v, err = strconv.ParseUint(publishedTemplateCreateOrgID, 10, 64)
		orgID = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for orgID, must be UINT")
		}
	}
	var apiVersion string
	{
		apiVersion = publishedTemplateCreateAPIVersion
	}
	var token *string
	{
		if publishedTemplateCreateToken != "" {
			token = &publishedTemplateCreateToken
		}
	}
	v := &publishedtemplate.CreatePayload{
		TemplateHref: body.TemplateHref,
	}
	v.OrgID = orgID
	v.APIVersion = apiVersion
	v.Token = token
	return v, nil
}

// BuildUpdatePayload builds the payload for the PublishedTemplate update
// endpoint from CLI flags.
func BuildUpdatePayload(publishedTemplateUpdateBody string, publishedTemplateUpdateOrgID string, publishedTemplateUpdateTemplateID string, publishedTemplateUpdateAPIVersion string, publishedTemplateUpdateToken string) (*publishedtemplate.UpdatePayload, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(publishedTemplateUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"excluded_project_ids\": [\n         60073\n      ],\n      \"project_ids\": [\n         60072\n      ]\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.template_href", body.TemplateHref, "^/api/governance/projects/[0-9]+/policy_templates/[0-9a-f]+$"))
		if err != nil {
			return nil, err
		}
	}
	var orgID uint
	{
		var v uint64
		v, err = strconv.ParseUint(publishedTemplateUpdateOrgID, 10, 64)
		orgID = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for orgID, must be UINT")
		}
	}
	var templateID string
	{
		templateID = publishedTemplateUpdateTemplateID
	}
	var apiVersion string
	{
		apiVersion = publishedTemplateUpdateAPIVersion
	}
	var token *string
	{
		if publishedTemplateUpdateToken != "" {
			token = &publishedTemplateUpdateToken
		}
	}
	v := &publishedtemplate.UpdatePayload{
		TemplateHref: body.TemplateHref,
	}
	v.OrgID = orgID
	v.TemplateID = templateID
	v.APIVersion = apiVersion
	v.Token = token
	return v, nil
}

// BuildHidePayload builds the payload for the PublishedTemplate hide endpoint
// from CLI flags.
func BuildHidePayload(publishedTemplateHideOrgID string, publishedTemplateHideTemplateID string, publishedTemplateHideAPIVersion string, publishedTemplateHideToken string) (*publishedtemplate.HidePayload, error) {
	var err error
	var orgID uint
	{
		var v uint64
		v, err = strconv.ParseUint(publishedTemplateHideOrgID, 10, 64)
		orgID = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for orgID, must be UINT")
		}
	}
	var templateID string
	{
		templateID = publishedTemplateHideTemplateID
	}
	var apiVersion string
	{
		apiVersion = publishedTemplateHideAPIVersion
	}
	var token *string
	{
		if publishedTemplateHideToken != "" {
			token = &publishedTemplateHideToken
		}
	}
	payload := &publishedtemplate.HidePayload{
		OrgID:      orgID,
		TemplateID: templateID,
		APIVersion: apiVersion,
		Token:      token,
	}
	return payload, nil
}

// BuildUnhidePayload builds the payload for the PublishedTemplate unhide
// endpoint from CLI flags.
func BuildUnhidePayload(publishedTemplateUnhideOrgID string, publishedTemplateUnhideTemplateID string, publishedTemplateUnhideAPIVersion string, publishedTemplateUnhideToken string) (*publishedtemplate.UnhidePayload, error) {
	var err error
	var orgID uint
	{
		var v uint64
		v, err = strconv.ParseUint(publishedTemplateUnhideOrgID, 10, 64)
		orgID = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for orgID, must be UINT")
		}
	}
	var templateID string
	{
		templateID = publishedTemplateUnhideTemplateID
	}
	var apiVersion string
	{
		apiVersion = publishedTemplateUnhideAPIVersion
	}
	var token *string
	{
		if publishedTemplateUnhideToken != "" {
			token = &publishedTemplateUnhideToken
		}
	}
	payload := &publishedtemplate.UnhidePayload{
		OrgID:      orgID,
		TemplateID: templateID,
		APIVersion: apiVersion,
		Token:      token,
	}
	return payload, nil
}

// BuildDeletePayload builds the payload for the PublishedTemplate delete
// endpoint from CLI flags.
func BuildDeletePayload(publishedTemplateDeleteOrgID string, publishedTemplateDeleteTemplateID string, publishedTemplateDeleteAPIVersion string, publishedTemplateDeleteToken string) (*publishedtemplate.DeletePayload, error) {
	var err error
	var orgID uint
	{
		var v uint64
		v, err = strconv.ParseUint(publishedTemplateDeleteOrgID, 10, 64)
		orgID = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for orgID, must be UINT")
		}
	}
	var templateID string
	{
		templateID = publishedTemplateDeleteTemplateID
	}
	var apiVersion string
	{
		apiVersion = publishedTemplateDeleteAPIVersion
	}
	var token *string
	{
		if publishedTemplateDeleteToken != "" {
			token = &publishedTemplateDeleteToken
		}
	}
	payload := &publishedtemplate.DeletePayload{
		OrgID:      orgID,
		TemplateID: templateID,
		APIVersion: apiVersion,
		Token:      token,
	}
	return payload, nil
}

// BuildShowPayload builds the payload for the PublishedTemplate show endpoint
// from CLI flags.
func BuildShowPayload(publishedTemplateShowOrgID string, publishedTemplateShowTemplateID string, publishedTemplateShowView string, publishedTemplateShowAPIVersion string, publishedTemplateShowToken string) (*publishedtemplate.ShowPayload, error) {
	var err error
	var orgID uint
	{
		var v uint64
		v, err = strconv.ParseUint(publishedTemplateShowOrgID, 10, 64)
		orgID = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for orgID, must be UINT")
		}
	}
	var templateID string
	{
		templateID = publishedTemplateShowTemplateID
	}
	var view *string
	{
		if publishedTemplateShowView != "" {
			view = &publishedTemplateShowView
		}
	}
	var apiVersion string
	{
		apiVersion = publishedTemplateShowAPIVersion
	}
	var token *string
	{
		if publishedTemplateShowToken != "" {
			token = &publishedTemplateShowToken
		}
	}
	payload := &publishedtemplate.ShowPayload{
		OrgID:      orgID,
		TemplateID: templateID,
		View:       view,
		APIVersion: apiVersion,
		Token:      token,
	}
	return payload, nil
}

// BuildIndexPayload builds the payload for the PublishedTemplate index
// endpoint from CLI flags.
func BuildIndexPayload(publishedTemplateIndexOrgID string, publishedTemplateIndexView string, publishedTemplateIndexShowHidden string, publishedTemplateIndexAPIVersion string, publishedTemplateIndexEtag string, publishedTemplateIndexToken string) (*publishedtemplate.IndexPayload, error) {
	var err error
	var orgID uint
	{
		var v uint64
		v, err = strconv.ParseUint(publishedTemplateIndexOrgID, 10, 64)
		orgID = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for orgID, must be UINT")
		}
	}
	var view *string
	{
		if publishedTemplateIndexView != "" {
			view = &publishedTemplateIndexView
		}
	}
	var showHidden *bool
	{
		if publishedTemplateIndexShowHidden != "" {
			var val bool
			val, err = strconv.ParseBool(publishedTemplateIndexShowHidden)
			showHidden = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for showHidden, must be BOOL")
			}
		}
	}
	var apiVersion string
	{
		apiVersion = publishedTemplateIndexAPIVersion
	}
	var etag *string
	{
		if publishedTemplateIndexEtag != "" {
			etag = &publishedTemplateIndexEtag
		}
	}
	var token *string
	{
		if publishedTemplateIndexToken != "" {
			token = &publishedTemplateIndexToken
		}
	}
	payload := &publishedtemplate.IndexPayload{
		OrgID:      orgID,
		View:       view,
		ShowHidden: showHidden,
		APIVersion: apiVersion,
		Etag:       etag,
		Token:      token,
	}
	return payload, nil
}
