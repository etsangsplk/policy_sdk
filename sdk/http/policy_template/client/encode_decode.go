// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// PolicyTemplate HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/rightscale/governance/front_service/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	policytemplate "github.com/rightscale/policy_sdk/sdk/policy_template"
	policytemplateviews "github.com/rightscale/policy_sdk/sdk/policy_template/views"
	goa "goa.design/goa"
	goahttp "goa.design/goa/http"
)

// BuildCompileRequest instantiates a HTTP request object with method and path
// set to call the "PolicyTemplate" service "compile" endpoint
func (c *Client) BuildCompileRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID uint
	)
	{
		p, ok := v.(*policytemplate.CompilePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("PolicyTemplate", "compile", "*policytemplate.CompilePayload", v)
		}
		projectID = p.ProjectID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CompilePolicyTemplatePath(projectID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("PolicyTemplate", "compile", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCompileRequest returns an encoder for requests sent to the
// PolicyTemplate compile server.
func EncodeCompileRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*policytemplate.CompilePayload)
		if !ok {
			return goahttp.ErrInvalidType("PolicyTemplate", "compile", "*policytemplate.CompilePayload", v)
		}
		req.Header.Set("Api-Version", p.APIVersion)
		if p.Token != nil {
			if !strings.Contains(*p.Token, " ") {
				req.Header.Set("Authorization", "Bearer "+*p.Token)
			} else {
				req.Header.Set("Authorization", *p.Token)
			}
		}
		body := NewCompileRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("PolicyTemplate", "compile", err)
		}
		return nil
	}
}

// DecodeCompileResponse returns a decoder for responses returned by the
// PolicyTemplate compile endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeCompileResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- "invalid_template" (type *policytemplate.CompilationErrors): http.StatusUnprocessableEntity
//	- error: internal error
func DecodeCompileResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body CompileUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "compile", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "compile", err)
			}
			return nil, NewCompileUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body CompileForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "compile", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "compile", err)
			}
			return nil, NewCompileForbidden(&body)
		case http.StatusBadRequest:
			var (
				body CompileBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "compile", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "compile", err)
			}
			return nil, NewCompileBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body CompileBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "compile", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "compile", err)
			}
			return nil, NewCompileBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body CompileInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "compile", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "compile", err)
			}
			return nil, NewCompileInternalError(&body)
		case http.StatusUnprocessableEntity:
			var (
				body CompileInvalidTemplateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "compile", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "compile", err)
			}
			return nil, NewCompileInvalidTemplate(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("PolicyTemplate", "compile", resp.StatusCode, string(body))
		}
	}
}

// BuildUploadRequest instantiates a HTTP request object with method and path
// set to call the "PolicyTemplate" service "upload" endpoint
func (c *Client) BuildUploadRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID uint
	)
	{
		p, ok := v.(*policytemplate.UploadPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("PolicyTemplate", "upload", "*policytemplate.UploadPayload", v)
		}
		projectID = p.ProjectID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UploadPolicyTemplatePath(projectID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("PolicyTemplate", "upload", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUploadRequest returns an encoder for requests sent to the
// PolicyTemplate upload server.
func EncodeUploadRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*policytemplate.UploadPayload)
		if !ok {
			return goahttp.ErrInvalidType("PolicyTemplate", "upload", "*policytemplate.UploadPayload", v)
		}
		req.Header.Set("Api-Version", p.APIVersion)
		if p.Token != nil {
			if !strings.Contains(*p.Token, " ") {
				req.Header.Set("Authorization", "Bearer "+*p.Token)
			} else {
				req.Header.Set("Authorization", *p.Token)
			}
		}
		body := NewUploadRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("PolicyTemplate", "upload", err)
		}
		return nil
	}
}

// DecodeUploadResponse returns a decoder for responses returned by the
// PolicyTemplate upload endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeUploadResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- "invalid_template" (type *policytemplate.CompilationErrors): http.StatusUnprocessableEntity
//	- "conflict" (type *policytemplate.ConflictError): http.StatusConflict
//	- error: internal error
func DecodeUploadResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UploadResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "upload", err)
			}
			p := NewUploadPolicyTemplateOK(&body)
			view := resp.Header.Get("goa-view")
			vres := &policytemplateviews.PolicyTemplate{p, view}
			if err = vres.Validate(); err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "upload", err)
			}
			res := policytemplate.NewPolicyTemplate(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body UploadUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "upload", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "upload", err)
			}
			return nil, NewUploadUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body UploadForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "upload", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "upload", err)
			}
			return nil, NewUploadForbidden(&body)
		case http.StatusBadRequest:
			var (
				body UploadBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "upload", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "upload", err)
			}
			return nil, NewUploadBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body UploadBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "upload", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "upload", err)
			}
			return nil, NewUploadBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body UploadInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "upload", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "upload", err)
			}
			return nil, NewUploadInternalError(&body)
		case http.StatusUnprocessableEntity:
			var (
				body UploadInvalidTemplateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "upload", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "upload", err)
			}
			return nil, NewUploadInvalidTemplate(&body)
		case http.StatusConflict:
			var (
				body UploadConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "upload", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "upload", err)
			}
			var (
				location string
			)
			locationRaw := resp.Header.Get("Location")
			if locationRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("Location", "header"))
			}
			location = locationRaw
			return nil, NewUploadConflict(&body, location)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("PolicyTemplate", "upload", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateRequest instantiates a HTTP request object with method and path
// set to call the "PolicyTemplate" service "update" endpoint
func (c *Client) BuildUpdateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID  uint
		templateID string
	)
	{
		p, ok := v.(*policytemplate.UpdatePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("PolicyTemplate", "update", "*policytemplate.UpdatePayload", v)
		}
		projectID = p.ProjectID
		templateID = p.TemplateID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdatePolicyTemplatePath(projectID, templateID)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("PolicyTemplate", "update", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateRequest returns an encoder for requests sent to the
// PolicyTemplate update server.
func EncodeUpdateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*policytemplate.UpdatePayload)
		if !ok {
			return goahttp.ErrInvalidType("PolicyTemplate", "update", "*policytemplate.UpdatePayload", v)
		}
		req.Header.Set("Api-Version", p.APIVersion)
		if p.Token != nil {
			if !strings.Contains(*p.Token, " ") {
				req.Header.Set("Authorization", "Bearer "+*p.Token)
			} else {
				req.Header.Set("Authorization", *p.Token)
			}
		}
		body := NewUpdateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("PolicyTemplate", "update", err)
		}
		return nil
	}
}

// DecodeUpdateResponse returns a decoder for responses returned by the
// PolicyTemplate update endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeUpdateResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- "invalid_template" (type *policytemplate.CompilationErrors): http.StatusUnprocessableEntity
//	- error: internal error
func DecodeUpdateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "update", err)
			}
			p := NewUpdatePolicyTemplateOK(&body)
			view := resp.Header.Get("goa-view")
			vres := &policytemplateviews.PolicyTemplate{p, view}
			if err = vres.Validate(); err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "update", err)
			}
			res := policytemplate.NewPolicyTemplate(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body UpdateNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "update", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "update", err)
			}
			return nil, NewUpdateNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body UpdateUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "update", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "update", err)
			}
			return nil, NewUpdateUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body UpdateForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "update", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "update", err)
			}
			return nil, NewUpdateForbidden(&body)
		case http.StatusBadRequest:
			var (
				body UpdateBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "update", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "update", err)
			}
			return nil, NewUpdateBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body UpdateBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "update", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "update", err)
			}
			return nil, NewUpdateBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body UpdateInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "update", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "update", err)
			}
			return nil, NewUpdateInternalError(&body)
		case http.StatusUnprocessableEntity:
			var (
				body UpdateInvalidTemplateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "update", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "update", err)
			}
			return nil, NewUpdateInvalidTemplate(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("PolicyTemplate", "update", resp.StatusCode, string(body))
		}
	}
}

// BuildRetrieveDataRequest instantiates a HTTP request object with method and
// path set to call the "PolicyTemplate" service "retrieve_data" endpoint
func (c *Client) BuildRetrieveDataRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID  uint
		templateID string
	)
	{
		p, ok := v.(*policytemplate.RetrieveDataPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("PolicyTemplate", "retrieve_data", "*policytemplate.RetrieveDataPayload", v)
		}
		projectID = p.ProjectID
		templateID = p.TemplateID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RetrieveDataPolicyTemplatePath(projectID, templateID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("PolicyTemplate", "retrieve_data", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRetrieveDataRequest returns an encoder for requests sent to the
// PolicyTemplate retrieve_data server.
func EncodeRetrieveDataRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*policytemplate.RetrieveDataPayload)
		if !ok {
			return goahttp.ErrInvalidType("PolicyTemplate", "retrieve_data", "*policytemplate.RetrieveDataPayload", v)
		}
		req.Header.Set("Api-Version", p.APIVersion)
		if p.Token != nil {
			if !strings.Contains(*p.Token, " ") {
				req.Header.Set("Authorization", "Bearer "+*p.Token)
			} else {
				req.Header.Set("Authorization", *p.Token)
			}
		}
		body := NewRetrieveDataRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("PolicyTemplate", "retrieve_data", err)
		}
		return nil
	}
}

// DecodeRetrieveDataResponse returns a decoder for responses returned by the
// PolicyTemplate retrieve_data endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeRetrieveDataResponse may return the following errors:
//	- "unprocessable_entity" (type *goa.ServiceError): http.StatusUnprocessableEntity
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeRetrieveDataResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body RetrieveDataResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "retrieve_data", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := e.Validate(); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "retrieve_data", err)
			}
			res := NewRetrieveDataDataOK(body)
			return res, nil
		case http.StatusUnprocessableEntity:
			var (
				body RetrieveDataUnprocessableEntityResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "retrieve_data", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "retrieve_data", err)
			}
			return nil, NewRetrieveDataUnprocessableEntity(&body)
		case http.StatusUnauthorized:
			var (
				body RetrieveDataUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "retrieve_data", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "retrieve_data", err)
			}
			return nil, NewRetrieveDataUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body RetrieveDataForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "retrieve_data", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "retrieve_data", err)
			}
			return nil, NewRetrieveDataForbidden(&body)
		case http.StatusBadRequest:
			var (
				body RetrieveDataBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "retrieve_data", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "retrieve_data", err)
			}
			return nil, NewRetrieveDataBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body RetrieveDataBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "retrieve_data", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "retrieve_data", err)
			}
			return nil, NewRetrieveDataBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body RetrieveDataInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "retrieve_data", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "retrieve_data", err)
			}
			return nil, NewRetrieveDataInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("PolicyTemplate", "retrieve_data", resp.StatusCode, string(body))
		}
	}
}

// BuildShowRequest instantiates a HTTP request object with method and path set
// to call the "PolicyTemplate" service "show" endpoint
func (c *Client) BuildShowRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID  uint
		templateID string
	)
	{
		p, ok := v.(*policytemplate.ShowPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("PolicyTemplate", "show", "*policytemplate.ShowPayload", v)
		}
		projectID = p.ProjectID
		templateID = p.TemplateID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ShowPolicyTemplatePath(projectID, templateID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("PolicyTemplate", "show", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeShowRequest returns an encoder for requests sent to the PolicyTemplate
// show server.
func EncodeShowRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*policytemplate.ShowPayload)
		if !ok {
			return goahttp.ErrInvalidType("PolicyTemplate", "show", "*policytemplate.ShowPayload", v)
		}
		req.Header.Set("Api-Version", p.APIVersion)
		if p.Token != nil {
			if !strings.Contains(*p.Token, " ") {
				req.Header.Set("Authorization", "Bearer "+*p.Token)
			} else {
				req.Header.Set("Authorization", *p.Token)
			}
		}
		values := req.URL.Query()
		if p.View != nil {
			values.Add("view", *p.View)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeShowResponse returns a decoder for responses returned by the
// PolicyTemplate show endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeShowResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeShowResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ShowResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "show", err)
			}
			p := NewShowPolicyTemplateOK(&body)
			view := resp.Header.Get("goa-view")
			vres := &policytemplateviews.PolicyTemplate{p, view}
			if err = vres.Validate(); err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "show", err)
			}
			res := policytemplate.NewPolicyTemplate(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body ShowNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "show", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "show", err)
			}
			return nil, NewShowNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body ShowUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "show", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "show", err)
			}
			return nil, NewShowUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ShowForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "show", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "show", err)
			}
			return nil, NewShowForbidden(&body)
		case http.StatusBadRequest:
			var (
				body ShowBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "show", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "show", err)
			}
			return nil, NewShowBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body ShowBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "show", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "show", err)
			}
			return nil, NewShowBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body ShowInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "show", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "show", err)
			}
			return nil, NewShowInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("PolicyTemplate", "show", resp.StatusCode, string(body))
		}
	}
}

// BuildIndexRequest instantiates a HTTP request object with method and path
// set to call the "PolicyTemplate" service "index" endpoint
func (c *Client) BuildIndexRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID uint
	)
	{
		p, ok := v.(*policytemplate.IndexPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("PolicyTemplate", "index", "*policytemplate.IndexPayload", v)
		}
		projectID = p.ProjectID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: IndexPolicyTemplatePath(projectID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("PolicyTemplate", "index", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeIndexRequest returns an encoder for requests sent to the
// PolicyTemplate index server.
func EncodeIndexRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*policytemplate.IndexPayload)
		if !ok {
			return goahttp.ErrInvalidType("PolicyTemplate", "index", "*policytemplate.IndexPayload", v)
		}
		req.Header.Set("Api-Version", p.APIVersion)
		if p.Etag != nil {
			req.Header.Set("If-None-Match", *p.Etag)
		}
		if p.Token != nil {
			if !strings.Contains(*p.Token, " ") {
				req.Header.Set("Authorization", "Bearer "+*p.Token)
			} else {
				req.Header.Set("Authorization", *p.Token)
			}
		}
		values := req.URL.Query()
		if p.View != nil {
			values.Add("view", *p.View)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeIndexResponse returns a decoder for responses returned by the
// PolicyTemplate index endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeIndexResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeIndexResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNotModified:
			var (
				etag *string
				err  error
			)
			etagRaw := resp.Header.Get("ETag")
			if etagRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("ETag", "header"))
			}
			etag = &etagRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "index", err)
			}
			p := NewIndexPolicyTemplateListNotModified(etag)
			view := resp.Header.Get("goa-view")
			vres := &policytemplateviews.PolicyTemplateList{p, view}
			res := policytemplate.NewPolicyTemplateList(vres)
			tmp := "true"
			res.NotModified = &tmp
			return res, nil
		case http.StatusOK:
			var (
				body IndexOKResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "index", err)
			}
			var (
				etag *string
			)
			etagRaw := resp.Header.Get("ETag")
			if etagRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("ETag", "header"))
			}
			etag = &etagRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "index", err)
			}
			p := NewIndexPolicyTemplateListOK(&body, etag)
			view := resp.Header.Get("goa-view")
			vres := &policytemplateviews.PolicyTemplateList{p, view}
			if err = vres.Validate(); err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "index", err)
			}
			res := policytemplate.NewPolicyTemplateList(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body IndexUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "index", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "index", err)
			}
			return nil, NewIndexUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body IndexForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "index", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "index", err)
			}
			return nil, NewIndexForbidden(&body)
		case http.StatusBadRequest:
			var (
				body IndexBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "index", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "index", err)
			}
			return nil, NewIndexBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body IndexBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "index", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "index", err)
			}
			return nil, NewIndexBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body IndexInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "index", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "index", err)
			}
			return nil, NewIndexInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("PolicyTemplate", "index", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteRequest instantiates a HTTP request object with method and path
// set to call the "PolicyTemplate" service "delete" endpoint
func (c *Client) BuildDeleteRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID  uint
		templateID string
	)
	{
		p, ok := v.(*policytemplate.DeletePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("PolicyTemplate", "delete", "*policytemplate.DeletePayload", v)
		}
		projectID = p.ProjectID
		templateID = p.TemplateID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeletePolicyTemplatePath(projectID, templateID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("PolicyTemplate", "delete", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteRequest returns an encoder for requests sent to the
// PolicyTemplate delete server.
func EncodeDeleteRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*policytemplate.DeletePayload)
		if !ok {
			return goahttp.ErrInvalidType("PolicyTemplate", "delete", "*policytemplate.DeletePayload", v)
		}
		req.Header.Set("Api-Version", p.APIVersion)
		if p.Token != nil {
			if !strings.Contains(*p.Token, " ") {
				req.Header.Set("Authorization", "Bearer "+*p.Token)
			} else {
				req.Header.Set("Authorization", *p.Token)
			}
		}
		return nil
	}
}

// DecodeDeleteResponse returns a decoder for responses returned by the
// PolicyTemplate delete endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeDeleteResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeDeleteResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusNotFound:
			var (
				body DeleteNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "delete", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "delete", err)
			}
			return nil, NewDeleteNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body DeleteUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "delete", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "delete", err)
			}
			return nil, NewDeleteUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body DeleteForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "delete", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "delete", err)
			}
			return nil, NewDeleteForbidden(&body)
		case http.StatusBadRequest:
			var (
				body DeleteBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "delete", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "delete", err)
			}
			return nil, NewDeleteBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body DeleteBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "delete", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "delete", err)
			}
			return nil, NewDeleteBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body DeleteInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("PolicyTemplate", "delete", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("PolicyTemplate", "delete", err)
			}
			return nil, NewDeleteInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("PolicyTemplate", "delete", resp.StatusCode, string(body))
		}
	}
}

// unmarshalUserResponseBodyToUserView builds a value of type
// *policytemplateviews.UserView from a value of type *UserResponseBody.
func unmarshalUserResponseBodyToUserView(v *UserResponseBody) *policytemplateviews.UserView {
	if v == nil {
		return nil
	}
	res := &policytemplateviews.UserView{
		ID:    v.ID,
		Email: v.Email,
		Name:  v.Name,
	}

	return res
}

// unmarshalRegexpResponseBodyToRegexpView builds a value of type
// *policytemplateviews.RegexpView from a value of type *RegexpResponseBody.
func unmarshalRegexpResponseBodyToRegexpView(v *RegexpResponseBody) *policytemplateviews.RegexpView {
	if v == nil {
		return nil
	}
	res := &policytemplateviews.RegexpView{
		Pattern: v.Pattern,
		Options: v.Options,
	}

	return res
}
