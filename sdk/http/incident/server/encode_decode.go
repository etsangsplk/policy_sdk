// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// Incident HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/rightscale/governance/front_service/design

package server

import (
	"context"
	"net/http"
	"strconv"
	"strings"

	incidentviews "github.com/rightscale/policy_sdk/sdk/incident/views"
	goa "goa.design/goa"
	goahttp "goa.design/goa/http"
)

// EncodeShowResponse returns an encoder for responses returned by the Incident
// show endpoint.
func EncodeShowResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*incidentviews.Incident)
		w.Header().Set("goa-view", res.View)
		if res.Projected.NotModified != nil && *res.Projected.NotModified == "true" {
			w.Header().Set("ETag", *res.Projected.Etag)
			w.WriteHeader(http.StatusNotModified)
			return nil
		}
		enc := encoder(ctx, w)
		var body interface{}
		switch res.View {
		case "default", "":
			body = NewShowOKResponseBody(res.Projected)
		case "extended":
			body = NewShowOKResponseBodyExtended(res.Projected)
		case "source":
			body = NewShowOKResponseBodySource(res.Projected)
		}
		w.Header().Set("ETag", *res.Projected.Etag)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeShowRequest returns a decoder for requests sent to the Incident show
// endpoint.
func DecodeShowRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			projectID  uint
			incidentID string
			view       *string
			apiVersion string
			etag       *string
			token      *string
			err        error

			params = mux.Vars(r)
		)
		{
			projectIDRaw := params["project_id"]
			v, err2 := strconv.ParseUint(projectIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("projectID", projectIDRaw, "unsigned integer"))
			}
			projectID = uint(v)
		}
		incidentID = params["incident_id"]
		viewRaw := r.URL.Query().Get("view")
		if viewRaw != "" {
			view = &viewRaw
		}
		if view != nil {
			if !(*view == "default" || *view == "extended" || *view == "source") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("view", *view, []interface{}{"default", "extended", "source"}))
			}
		}
		apiVersion = r.Header.Get("Api-Version")
		if apiVersion == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Api-Version", "header"))
		}
		if !(apiVersion == "1.0") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("apiVersion", apiVersion, []interface{}{"1.0"}))
		}
		etagRaw := r.Header.Get("If-None-Match")
		if etagRaw != "" {
			etag = &etagRaw
		}
		tokenRaw := r.Header.Get("Authorization")
		if tokenRaw != "" {
			token = &tokenRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewShowPayload(projectID, incidentID, view, apiVersion, etag, token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}

		return payload, nil
	}
}

// EncodeShowError returns an encoder for errors returned by the show Incident
// endpoint.
func EncodeShowError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			body := NewShowNotFoundResponseBody(res)
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			body := NewShowUnauthorizedResponseBody(res)
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "forbidden":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			body := NewShowForbiddenResponseBody(res)
			w.Header().Set("goa-error", "forbidden")
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "bad_request":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			body := NewShowBadRequestResponseBody(res)
			w.Header().Set("goa-error", "bad_request")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "bad_gateway":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			body := NewShowBadGatewayResponseBody(res)
			w.Header().Set("goa-error", "bad_gateway")
			w.WriteHeader(http.StatusBadGateway)
			return enc.Encode(body)
		case "internal_error":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			body := NewShowInternalErrorResponseBody(res)
			w.Header().Set("goa-error", "internal_error")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeIndexResponse returns an encoder for responses returned by the
// Incident index endpoint.
func EncodeIndexResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*incidentviews.IncidentList)
		w.Header().Set("goa-view", res.View)
		if res.Projected.NotModified != nil && *res.Projected.NotModified == "true" {
			w.Header().Set("ETag", *res.Projected.Etag)
			w.WriteHeader(http.StatusNotModified)
			return nil
		}
		enc := encoder(ctx, w)
		var body interface{}
		switch res.View {
		case "default", "":
			body = NewIndexOKResponseBody(res.Projected)
		case "extended":
			body = NewIndexOKResponseBodyExtended(res.Projected)
		}
		w.Header().Set("ETag", *res.Projected.Etag)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeIndexRequest returns a decoder for requests sent to the Incident index
// endpoint.
func DecodeIndexRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			projectID       uint
			view            *string
			state           []string
			appliedPolicyID *string
			apiVersion      string
			etag            *string
			token           *string
			err             error

			params = mux.Vars(r)
		)
		{
			projectIDRaw := params["project_id"]
			v, err2 := strconv.ParseUint(projectIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("projectID", projectIDRaw, "unsigned integer"))
			}
			projectID = uint(v)
		}
		viewRaw := r.URL.Query().Get("view")
		if viewRaw != "" {
			view = &viewRaw
		}
		if view != nil {
			if !(*view == "default" || *view == "extended") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("view", *view, []interface{}{"default", "extended"}))
			}
		}
		state = r.URL.Query()["state"]
		for _, e := range state {
			if !(e == "triggered" || e == "resolved" || e == "terminated") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("state[*]", e, []interface{}{"triggered", "resolved", "terminated"}))
			}
		}
		appliedPolicyIDRaw := r.URL.Query().Get("applied_policy_id")
		if appliedPolicyIDRaw != "" {
			appliedPolicyID = &appliedPolicyIDRaw
		}
		apiVersion = r.Header.Get("Api-Version")
		if apiVersion == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Api-Version", "header"))
		}
		if !(apiVersion == "1.0") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("apiVersion", apiVersion, []interface{}{"1.0"}))
		}
		etagRaw := r.Header.Get("If-None-Match")
		if etagRaw != "" {
			etag = &etagRaw
		}
		tokenRaw := r.Header.Get("Authorization")
		if tokenRaw != "" {
			token = &tokenRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewIndexPayload(projectID, view, state, appliedPolicyID, apiVersion, etag, token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}

		return payload, nil
	}
}

// EncodeIndexError returns an encoder for errors returned by the index
// Incident endpoint.
func EncodeIndexError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			body := NewIndexUnauthorizedResponseBody(res)
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "forbidden":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			body := NewIndexForbiddenResponseBody(res)
			w.Header().Set("goa-error", "forbidden")
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "bad_request":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			body := NewIndexBadRequestResponseBody(res)
			w.Header().Set("goa-error", "bad_request")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "bad_gateway":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			body := NewIndexBadGatewayResponseBody(res)
			w.Header().Set("goa-error", "bad_gateway")
			w.WriteHeader(http.StatusBadGateway)
			return enc.Encode(body)
		case "internal_error":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			body := NewIndexInternalErrorResponseBody(res)
			w.Header().Set("goa-error", "internal_error")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeResolveResponse returns an encoder for responses returned by the
// Incident resolve endpoint.
func EncodeResolveResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeResolveRequest returns a decoder for requests sent to the Incident
// resolve endpoint.
func DecodeResolveRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			projectID  uint
			incidentID string
			apiVersion string
			etag       *string
			token      *string
			err        error

			params = mux.Vars(r)
		)
		{
			projectIDRaw := params["project_id"]
			v, err2 := strconv.ParseUint(projectIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("projectID", projectIDRaw, "unsigned integer"))
			}
			projectID = uint(v)
		}
		incidentID = params["incident_id"]
		apiVersion = r.Header.Get("Api-Version")
		if apiVersion == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Api-Version", "header"))
		}
		if !(apiVersion == "1.0") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("apiVersion", apiVersion, []interface{}{"1.0"}))
		}
		etagRaw := r.Header.Get("If-Match")
		if etagRaw != "" {
			etag = &etagRaw
		}
		tokenRaw := r.Header.Get("Authorization")
		if tokenRaw != "" {
			token = &tokenRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewResolvePayload(projectID, incidentID, apiVersion, etag, token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}

		return payload, nil
	}
}

// EncodeResolveError returns an encoder for errors returned by the resolve
// Incident endpoint.
func EncodeResolveError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			body := NewResolveNotFoundResponseBody(res)
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "precondition_failed":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			body := NewResolvePreconditionFailedResponseBody(res)
			w.Header().Set("goa-error", "precondition_failed")
			w.WriteHeader(http.StatusPreconditionFailed)
			return enc.Encode(body)
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			body := NewResolveUnauthorizedResponseBody(res)
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "forbidden":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			body := NewResolveForbiddenResponseBody(res)
			w.Header().Set("goa-error", "forbidden")
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "bad_request":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			body := NewResolveBadRequestResponseBody(res)
			w.Header().Set("goa-error", "bad_request")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "bad_gateway":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			body := NewResolveBadGatewayResponseBody(res)
			w.Header().Set("goa-error", "bad_gateway")
			w.WriteHeader(http.StatusBadGateway)
			return enc.Encode(body)
		case "internal_error":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			body := NewResolveInternalErrorResponseBody(res)
			w.Header().Set("goa-error", "internal_error")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeIndexEscalationsResponse returns an encoder for responses returned by
// the Incident index_escalations endpoint.
func EncodeIndexEscalationsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*incidentviews.Escalations)
		enc := encoder(ctx, w)
		body := NewIndexEscalationsResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeIndexEscalationsRequest returns a decoder for requests sent to the
// Incident index_escalations endpoint.
func DecodeIndexEscalationsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			projectID  uint
			incidentID string
			apiVersion string
			token      *string
			err        error

			params = mux.Vars(r)
		)
		{
			projectIDRaw := params["project_id"]
			v, err2 := strconv.ParseUint(projectIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("projectID", projectIDRaw, "unsigned integer"))
			}
			projectID = uint(v)
		}
		incidentID = params["incident_id"]
		apiVersion = r.Header.Get("Api-Version")
		if apiVersion == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Api-Version", "header"))
		}
		if !(apiVersion == "1.0") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("apiVersion", apiVersion, []interface{}{"1.0"}))
		}
		tokenRaw := r.Header.Get("Authorization")
		if tokenRaw != "" {
			token = &tokenRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewIndexEscalationsPayload(projectID, incidentID, apiVersion, token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}

		return payload, nil
	}
}

// EncodeIndexEscalationsError returns an encoder for errors returned by the
// index_escalations Incident endpoint.
func EncodeIndexEscalationsError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			body := NewIndexEscalationsNotFoundResponseBody(res)
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			body := NewIndexEscalationsUnauthorizedResponseBody(res)
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "forbidden":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			body := NewIndexEscalationsForbiddenResponseBody(res)
			w.Header().Set("goa-error", "forbidden")
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "bad_request":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			body := NewIndexEscalationsBadRequestResponseBody(res)
			w.Header().Set("goa-error", "bad_request")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "bad_gateway":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			body := NewIndexEscalationsBadGatewayResponseBody(res)
			w.Header().Set("goa-error", "bad_gateway")
			w.WriteHeader(http.StatusBadGateway)
			return enc.Encode(body)
		case "internal_error":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			body := NewIndexEscalationsInternalErrorResponseBody(res)
			w.Header().Set("goa-error", "internal_error")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeIndexResolutionsResponse returns an encoder for responses returned by
// the Incident index_resolutions endpoint.
func EncodeIndexResolutionsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*incidentviews.Resolutions)
		enc := encoder(ctx, w)
		body := NewIndexResolutionsResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeIndexResolutionsRequest returns a decoder for requests sent to the
// Incident index_resolutions endpoint.
func DecodeIndexResolutionsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			projectID  uint
			incidentID string
			apiVersion string
			token      *string
			err        error

			params = mux.Vars(r)
		)
		{
			projectIDRaw := params["project_id"]
			v, err2 := strconv.ParseUint(projectIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("projectID", projectIDRaw, "unsigned integer"))
			}
			projectID = uint(v)
		}
		incidentID = params["incident_id"]
		apiVersion = r.Header.Get("Api-Version")
		if apiVersion == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Api-Version", "header"))
		}
		if !(apiVersion == "1.0") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("apiVersion", apiVersion, []interface{}{"1.0"}))
		}
		tokenRaw := r.Header.Get("Authorization")
		if tokenRaw != "" {
			token = &tokenRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewIndexResolutionsPayload(projectID, incidentID, apiVersion, token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}

		return payload, nil
	}
}

// EncodeIndexResolutionsError returns an encoder for errors returned by the
// index_resolutions Incident endpoint.
func EncodeIndexResolutionsError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			body := NewIndexResolutionsNotFoundResponseBody(res)
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "unprocessable_entity":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			body := NewIndexResolutionsUnprocessableEntityResponseBody(res)
			w.Header().Set("goa-error", "unprocessable_entity")
			w.WriteHeader(http.StatusUnprocessableEntity)
			return enc.Encode(body)
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			body := NewIndexResolutionsUnauthorizedResponseBody(res)
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "forbidden":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			body := NewIndexResolutionsForbiddenResponseBody(res)
			w.Header().Set("goa-error", "forbidden")
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "bad_request":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			body := NewIndexResolutionsBadRequestResponseBody(res)
			w.Header().Set("goa-error", "bad_request")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "bad_gateway":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			body := NewIndexResolutionsBadGatewayResponseBody(res)
			w.Header().Set("goa-error", "bad_gateway")
			w.WriteHeader(http.StatusBadGateway)
			return enc.Encode(body)
		case "internal_error":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			body := NewIndexResolutionsInternalErrorResponseBody(res)
			w.Header().Set("goa-error", "internal_error")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalProjectViewToProjectResponseBody builds a value of type
// *ProjectResponseBody from a value of type *incidentviews.ProjectView.
func marshalProjectViewToProjectResponseBody(v *incidentviews.ProjectView) *ProjectResponseBody {
	if v == nil {
		return nil
	}
	res := &ProjectResponseBody{
		ID:      *v.ID,
		Name:    *v.Name,
		OrgID:   *v.OrgID,
		OrgName: *v.OrgName,
	}

	return res
}

// marshalAppliedPolicyViewToAppliedPolicyResponseBodyLink builds a value of
// type *AppliedPolicyResponseBodyLink from a value of type
// *incidentviews.AppliedPolicyView.
func marshalAppliedPolicyViewToAppliedPolicyResponseBodyLink(v *incidentviews.AppliedPolicyView) *AppliedPolicyResponseBodyLink {
	if v == nil {
		return nil
	}
	res := &AppliedPolicyResponseBodyLink{
		ID:        *v.ID,
		Name:      *v.Name,
		Href:      *v.Href,
		CreatedAt: v.CreatedAt,
		Frequency: v.Frequency,
		Kind:      *v.Kind,
	}
	if v.PolicyTemplate != nil {
		res.PolicyTemplate = marshalPolicyTemplateViewToPolicyTemplateResponseBodyLink(v.PolicyTemplate)
	}
	if v.PublishedTemplate != nil {
		res.PublishedTemplate = marshalPublishedTemplateViewToPublishedTemplateResponseBodyLink(v.PublishedTemplate)
	}
	if v.CreatedBy != nil {
		res.CreatedBy = marshalUserViewToUserResponseBody(v.CreatedBy)
	}

	return res
}

// marshalPolicyTemplateViewToPolicyTemplateResponseBodyLink builds a value of
// type *PolicyTemplateResponseBodyLink from a value of type
// *incidentviews.PolicyTemplateView.
func marshalPolicyTemplateViewToPolicyTemplateResponseBodyLink(v *incidentviews.PolicyTemplateView) *PolicyTemplateResponseBodyLink {
	if v == nil {
		return nil
	}
	res := &PolicyTemplateResponseBodyLink{
		ID:          *v.ID,
		Name:        *v.Name,
		Href:        *v.Href,
		Fingerprint: *v.Fingerprint,
		UpdatedAt:   v.UpdatedAt,
		Kind:        *v.Kind,
	}
	if v.UpdatedBy != nil {
		res.UpdatedBy = marshalUserViewToUserResponseBody(v.UpdatedBy)
	}

	return res
}

// marshalUserViewToUserResponseBody builds a value of type *UserResponseBody
// from a value of type *incidentviews.UserView.
func marshalUserViewToUserResponseBody(v *incidentviews.UserView) *UserResponseBody {
	if v == nil {
		return nil
	}
	res := &UserResponseBody{
		ID:    *v.ID,
		Email: *v.Email,
		Name:  *v.Name,
	}

	return res
}

// marshalPublishedTemplateViewToPublishedTemplateResponseBodyLink builds a
// value of type *PublishedTemplateResponseBodyLink from a value of type
// *incidentviews.PublishedTemplateView.
func marshalPublishedTemplateViewToPublishedTemplateResponseBodyLink(v *incidentviews.PublishedTemplateView) *PublishedTemplateResponseBodyLink {
	if v == nil {
		return nil
	}
	res := &PublishedTemplateResponseBodyLink{
		ID:          *v.ID,
		Name:        *v.Name,
		Href:        *v.Href,
		Fingerprint: *v.Fingerprint,
		UpdatedAt:   v.UpdatedAt,
		BuiltIn:     v.BuiltIn,
		Kind:        *v.Kind,
	}
	if v.UpdatedBy != nil {
		res.UpdatedBy = marshalUserViewToUserResponseBody(v.UpdatedBy)
	}

	return res
}

// marshalAppliedPolicyViewToAppliedPolicyResponseBodySource builds a value of
// type *AppliedPolicyResponseBodySource from a value of type
// *incidentviews.AppliedPolicyView.
func marshalAppliedPolicyViewToAppliedPolicyResponseBodySource(v *incidentviews.AppliedPolicyView) *AppliedPolicyResponseBodySource {
	if v == nil {
		return nil
	}
	res := &AppliedPolicyResponseBodySource{
		ID:   *v.ID,
		Name: *v.Name,
		Href: *v.Href,
		Kind: *v.Kind,
	}
	if v.Project != nil {
		res.Project = marshalProjectViewToProjectResponseBody(v.Project)
	}
	if v.PolicyTemplate != nil {
		res.PolicyTemplate = marshalPolicyTemplateViewToPolicyTemplateResponseBodySource(v.PolicyTemplate)
	}
	if v.PublishedTemplate != nil {
		res.PublishedTemplate = marshalPublishedTemplateViewToPublishedTemplateResponseBodySource(v.PublishedTemplate)
	}

	return res
}

// marshalPolicyTemplateViewToPolicyTemplateResponseBodySource builds a value
// of type *PolicyTemplateResponseBodySource from a value of type
// *incidentviews.PolicyTemplateView.
func marshalPolicyTemplateViewToPolicyTemplateResponseBodySource(v *incidentviews.PolicyTemplateView) *PolicyTemplateResponseBodySource {
	if v == nil {
		return nil
	}
	res := &PolicyTemplateResponseBodySource{
		ID:          *v.ID,
		Name:        *v.Name,
		Href:        *v.Href,
		Filename:    v.Filename,
		Source:      v.Source,
		Fingerprint: *v.Fingerprint,
		Kind:        *v.Kind,
	}

	return res
}

// marshalPublishedTemplateViewToPublishedTemplateResponseBodySource builds a
// value of type *PublishedTemplateResponseBodySource from a value of type
// *incidentviews.PublishedTemplateView.
func marshalPublishedTemplateViewToPublishedTemplateResponseBodySource(v *incidentviews.PublishedTemplateView) *PublishedTemplateResponseBodySource {
	if v == nil {
		return nil
	}
	res := &PublishedTemplateResponseBodySource{
		ID:          *v.ID,
		Name:        *v.Name,
		Href:        *v.Href,
		Filename:    v.Filename,
		Source:      v.Source,
		Fingerprint: *v.Fingerprint,
		Kind:        *v.Kind,
	}

	return res
}

// marshalApprovalRequestViewToApprovalRequestResponseBodyExtended builds a
// value of type *ApprovalRequestResponseBodyExtended from a value of type
// *incidentviews.ApprovalRequestView.
func marshalApprovalRequestViewToApprovalRequestResponseBodyExtended(v *incidentviews.ApprovalRequestView) *ApprovalRequestResponseBodyExtended {
	if v == nil {
		return nil
	}
	res := &ApprovalRequestResponseBodyExtended{
		ID:            *v.ID,
		ProjectID:     *v.ProjectID,
		Href:          *v.Href,
		Label:         v.Label,
		Description:   v.Description,
		CreatedAt:     v.CreatedAt,
		UpdatedAt:     v.UpdatedAt,
		Status:        v.Status,
		ApprovedAt:    v.ApprovedAt,
		DenialComment: v.DenialComment,
		DeniedAt:      v.DeniedAt,
		Kind:          *v.Kind,
	}
	if v.Subject != nil {
		res.Subject = marshalApprovalSubject2ToApprovalSubject2(v.Subject)
	}
	if v.Parameters != nil {
		res.Parameters = make(map[string]*ParameterResponseBody, len(v.Parameters))
		for key, val := range v.Parameters {
			tk := key
			tv := &ParameterResponseBody{
				Name:                  *val.Name,
				Type:                  *val.Type,
				Label:                 *val.Label,
				Index:                 *val.Index,
				Category:              val.Category,
				Description:           val.Description,
				MinLength:             val.MinLength,
				MaxLength:             val.MaxLength,
				MinValue:              val.MinValue,
				MaxValue:              val.MaxValue,
				ConstraintDescription: val.ConstraintDescription,
			}
			if val.Default != nil {
				tv.Default = *val.Default
			}
			if val.NoEcho != nil {
				tv.NoEcho = *val.NoEcho
			}
			if val.NoEcho == nil {
				tv.NoEcho = false
			}
			if val.AllowedValues != nil {
				tv.AllowedValues = make([]interface{}, len(val.AllowedValues))
				for i, val := range val.AllowedValues {
					tv.AllowedValues[i] = val
				}
			}
			if val.AllowedPattern != nil {
				tv.AllowedPattern = marshalRegexpViewToRegexpResponseBody(val.AllowedPattern)
			}
			res.Parameters[tk] = tv
		}
	}
	if v.Options != nil {
		res.Options = make([]*ConfigurationOptionResponseBody, len(v.Options))
		for i, val := range v.Options {
			res.Options[i] = &ConfigurationOptionResponseBody{
				Name:  *val.Name,
				Label: *val.Label,
				Type:  *val.Type,
				Value: *val.Value,
			}
		}
	}
	if v.ApprovedBy != nil {
		res.ApprovedBy = marshalUserViewToUserResponseBody(v.ApprovedBy)
	}
	if v.DeniedBy != nil {
		res.DeniedBy = marshalUserViewToUserResponseBody(v.DeniedBy)
	}

	return res
}

// marshalApprovalSubject2ToApprovalSubject2 builds a value of type
// *ApprovalSubject2 from a value of type *incidentviews.ApprovalSubject2.
func marshalApprovalSubject2ToApprovalSubject2(v *incidentviews.ApprovalSubject2) *ApprovalSubject2 {
	res := &ApprovalSubject2{
		Kind: *v.Kind,
		Href: *v.Href,
	}

	return res
}

// marshalRegexpViewToRegexpResponseBody builds a value of type
// *RegexpResponseBody from a value of type *incidentviews.RegexpView.
func marshalRegexpViewToRegexpResponseBody(v *incidentviews.RegexpView) *RegexpResponseBody {
	if v == nil {
		return nil
	}
	res := &RegexpResponseBody{
		Pattern: *v.Pattern,
		Options: v.Options,
	}

	return res
}
