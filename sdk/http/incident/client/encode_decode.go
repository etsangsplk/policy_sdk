// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// Incident HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/rightscale/governance/front_service/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	incident "github.com/rightscale/right_pt/sdk/incident"
	incidentviews "github.com/rightscale/right_pt/sdk/incident/views"
	goa "goa.design/goa"
	goahttp "goa.design/goa/http"
)

// BuildShowRequest instantiates a HTTP request object with method and path set
// to call the "Incident" service "show" endpoint
func (c *Client) BuildShowRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID  uint
		incidentID string
	)
	{
		p, ok := v.(*incident.ShowPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("Incident", "show", "*incident.ShowPayload", v)
		}
		projectID = p.ProjectID
		incidentID = p.IncidentID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ShowIncidentPath(projectID, incidentID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Incident", "show", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeShowRequest returns an encoder for requests sent to the Incident show
// server.
func EncodeShowRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*incident.ShowPayload)
		if !ok {
			return goahttp.ErrInvalidType("Incident", "show", "*incident.ShowPayload", v)
		}
		req.Header.Set("Api-Version", p.APIVersion)
		if p.Etag != nil {
			req.Header.Set("If-None-Match", *p.Etag)
		}
		if p.Token != nil {
			if !strings.Contains(*p.Token, " ") {
				req.Header.Set("Authorization", "Bearer "+*p.Token)
			} else {
				req.Header.Set("Authorization", *p.Token)
			}
		}
		values := req.URL.Query()
		if p.View != nil {
			values.Add("view", *p.View)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeShowResponse returns a decoder for responses returned by the Incident
// show endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeShowResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeShowResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNotModified:
			var (
				etag *string
				err  error
			)
			etagRaw := resp.Header.Get("ETag")
			if etagRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("ETag", "header"))
			}
			etag = &etagRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("Incident", "show", err)
			}
			p := NewShowIncidentNotModified(etag)
			view := resp.Header.Get("goa-view")
			vres := &incidentviews.Incident{p, view}
			res := incident.NewIncident(vres)
			tmp := "true"
			res.NotModified = &tmp
			return res, nil
		case http.StatusOK:
			var (
				body ShowOKResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Incident", "show", err)
			}
			var (
				etag *string
			)
			etagRaw := resp.Header.Get("ETag")
			if etagRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("ETag", "header"))
			}
			etag = &etagRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("Incident", "show", err)
			}
			p := NewShowIncidentOK(&body, etag)
			view := resp.Header.Get("goa-view")
			vres := &incidentviews.Incident{p, view}
			if err = vres.Validate(); err != nil {
				return nil, goahttp.ErrValidationError("Incident", "show", err)
			}
			res := incident.NewIncident(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body ShowNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Incident", "show", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("Incident", "show", err)
			}
			return nil, NewShowNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body ShowUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Incident", "show", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("Incident", "show", err)
			}
			return nil, NewShowUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ShowForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Incident", "show", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("Incident", "show", err)
			}
			return nil, NewShowForbidden(&body)
		case http.StatusBadRequest:
			var (
				body ShowBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Incident", "show", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("Incident", "show", err)
			}
			return nil, NewShowBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body ShowBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Incident", "show", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("Incident", "show", err)
			}
			return nil, NewShowBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body ShowInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Incident", "show", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("Incident", "show", err)
			}
			return nil, NewShowInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Incident", "show", resp.StatusCode, string(body))
		}
	}
}

// BuildIndexRequest instantiates a HTTP request object with method and path
// set to call the "Incident" service "index" endpoint
func (c *Client) BuildIndexRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID uint
	)
	{
		p, ok := v.(*incident.IndexPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("Incident", "index", "*incident.IndexPayload", v)
		}
		projectID = p.ProjectID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: IndexIncidentPath(projectID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Incident", "index", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeIndexRequest returns an encoder for requests sent to the Incident
// index server.
func EncodeIndexRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*incident.IndexPayload)
		if !ok {
			return goahttp.ErrInvalidType("Incident", "index", "*incident.IndexPayload", v)
		}
		req.Header.Set("Api-Version", p.APIVersion)
		if p.Etag != nil {
			req.Header.Set("If-None-Match", *p.Etag)
		}
		if p.Token != nil {
			if !strings.Contains(*p.Token, " ") {
				req.Header.Set("Authorization", "Bearer "+*p.Token)
			} else {
				req.Header.Set("Authorization", *p.Token)
			}
		}
		values := req.URL.Query()
		if p.View != nil {
			values.Add("view", *p.View)
		}
		for _, value := range p.State {
			values.Add("state", value)
		}
		if p.AppliedPolicyID != nil {
			values.Add("applied_policy_id", *p.AppliedPolicyID)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeIndexResponse returns a decoder for responses returned by the Incident
// index endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeIndexResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeIndexResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNotModified:
			var (
				etag *string
				err  error
			)
			etagRaw := resp.Header.Get("ETag")
			if etagRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("ETag", "header"))
			}
			etag = &etagRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("Incident", "index", err)
			}
			p := NewIndexIncidentListNotModified(etag)
			view := resp.Header.Get("goa-view")
			vres := &incidentviews.IncidentList{p, view}
			res := incident.NewIncidentList(vres)
			tmp := "true"
			res.NotModified = &tmp
			return res, nil
		case http.StatusOK:
			var (
				body IndexOKResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Incident", "index", err)
			}
			var (
				etag *string
			)
			etagRaw := resp.Header.Get("ETag")
			if etagRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("ETag", "header"))
			}
			etag = &etagRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("Incident", "index", err)
			}
			p := NewIndexIncidentListOK(&body, etag)
			view := resp.Header.Get("goa-view")
			vres := &incidentviews.IncidentList{p, view}
			if err = vres.Validate(); err != nil {
				return nil, goahttp.ErrValidationError("Incident", "index", err)
			}
			res := incident.NewIncidentList(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body IndexUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Incident", "index", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("Incident", "index", err)
			}
			return nil, NewIndexUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body IndexForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Incident", "index", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("Incident", "index", err)
			}
			return nil, NewIndexForbidden(&body)
		case http.StatusBadRequest:
			var (
				body IndexBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Incident", "index", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("Incident", "index", err)
			}
			return nil, NewIndexBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body IndexBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Incident", "index", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("Incident", "index", err)
			}
			return nil, NewIndexBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body IndexInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Incident", "index", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("Incident", "index", err)
			}
			return nil, NewIndexInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Incident", "index", resp.StatusCode, string(body))
		}
	}
}

// BuildResolveRequest instantiates a HTTP request object with method and path
// set to call the "Incident" service "resolve" endpoint
func (c *Client) BuildResolveRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID  uint
		incidentID string
	)
	{
		p, ok := v.(*incident.ResolvePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("Incident", "resolve", "*incident.ResolvePayload", v)
		}
		projectID = p.ProjectID
		incidentID = p.IncidentID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ResolveIncidentPath(projectID, incidentID)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Incident", "resolve", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeResolveRequest returns an encoder for requests sent to the Incident
// resolve server.
func EncodeResolveRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*incident.ResolvePayload)
		if !ok {
			return goahttp.ErrInvalidType("Incident", "resolve", "*incident.ResolvePayload", v)
		}
		req.Header.Set("Api-Version", p.APIVersion)
		if p.Etag != nil {
			req.Header.Set("If-Match", *p.Etag)
		}
		if p.Token != nil {
			if !strings.Contains(*p.Token, " ") {
				req.Header.Set("Authorization", "Bearer "+*p.Token)
			} else {
				req.Header.Set("Authorization", *p.Token)
			}
		}
		return nil
	}
}

// DecodeResolveResponse returns a decoder for responses returned by the
// Incident resolve endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeResolveResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "precondition_failed" (type *goa.ServiceError): http.StatusPreconditionFailed
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeResolveResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusNotFound:
			var (
				body ResolveNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Incident", "resolve", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("Incident", "resolve", err)
			}
			return nil, NewResolveNotFound(&body)
		case http.StatusPreconditionFailed:
			var (
				body ResolvePreconditionFailedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Incident", "resolve", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("Incident", "resolve", err)
			}
			return nil, NewResolvePreconditionFailed(&body)
		case http.StatusUnauthorized:
			var (
				body ResolveUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Incident", "resolve", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("Incident", "resolve", err)
			}
			return nil, NewResolveUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ResolveForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Incident", "resolve", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("Incident", "resolve", err)
			}
			return nil, NewResolveForbidden(&body)
		case http.StatusBadRequest:
			var (
				body ResolveBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Incident", "resolve", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("Incident", "resolve", err)
			}
			return nil, NewResolveBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body ResolveBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Incident", "resolve", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("Incident", "resolve", err)
			}
			return nil, NewResolveBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body ResolveInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Incident", "resolve", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("Incident", "resolve", err)
			}
			return nil, NewResolveInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Incident", "resolve", resp.StatusCode, string(body))
		}
	}
}

// BuildIndexEscalationsRequest instantiates a HTTP request object with method
// and path set to call the "Incident" service "index_escalations" endpoint
func (c *Client) BuildIndexEscalationsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID  uint
		incidentID string
	)
	{
		p, ok := v.(*incident.IndexEscalationsPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("Incident", "index_escalations", "*incident.IndexEscalationsPayload", v)
		}
		projectID = p.ProjectID
		incidentID = p.IncidentID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: IndexEscalationsIncidentPath(projectID, incidentID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Incident", "index_escalations", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeIndexEscalationsRequest returns an encoder for requests sent to the
// Incident index_escalations server.
func EncodeIndexEscalationsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*incident.IndexEscalationsPayload)
		if !ok {
			return goahttp.ErrInvalidType("Incident", "index_escalations", "*incident.IndexEscalationsPayload", v)
		}
		req.Header.Set("Api-Version", p.APIVersion)
		if p.Token != nil {
			if !strings.Contains(*p.Token, " ") {
				req.Header.Set("Authorization", "Bearer "+*p.Token)
			} else {
				req.Header.Set("Authorization", *p.Token)
			}
		}
		return nil
	}
}

// DecodeIndexEscalationsResponse returns a decoder for responses returned by
// the Incident index_escalations endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeIndexEscalationsResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeIndexEscalationsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body IndexEscalationsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Incident", "index_escalations", err)
			}
			p := NewIndexEscalationsEscalationsOK(&body)
			view := "default"
			vres := &incidentviews.Escalations{p, view}
			if err = vres.Validate(); err != nil {
				return nil, goahttp.ErrValidationError("Incident", "index_escalations", err)
			}
			res := incident.NewEscalations(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body IndexEscalationsNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Incident", "index_escalations", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("Incident", "index_escalations", err)
			}
			return nil, NewIndexEscalationsNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body IndexEscalationsUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Incident", "index_escalations", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("Incident", "index_escalations", err)
			}
			return nil, NewIndexEscalationsUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body IndexEscalationsForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Incident", "index_escalations", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("Incident", "index_escalations", err)
			}
			return nil, NewIndexEscalationsForbidden(&body)
		case http.StatusBadRequest:
			var (
				body IndexEscalationsBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Incident", "index_escalations", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("Incident", "index_escalations", err)
			}
			return nil, NewIndexEscalationsBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body IndexEscalationsBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Incident", "index_escalations", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("Incident", "index_escalations", err)
			}
			return nil, NewIndexEscalationsBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body IndexEscalationsInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Incident", "index_escalations", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("Incident", "index_escalations", err)
			}
			return nil, NewIndexEscalationsInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Incident", "index_escalations", resp.StatusCode, string(body))
		}
	}
}

// BuildIndexResolutionsRequest instantiates a HTTP request object with method
// and path set to call the "Incident" service "index_resolutions" endpoint
func (c *Client) BuildIndexResolutionsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID  uint
		incidentID string
	)
	{
		p, ok := v.(*incident.IndexResolutionsPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("Incident", "index_resolutions", "*incident.IndexResolutionsPayload", v)
		}
		projectID = p.ProjectID
		incidentID = p.IncidentID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: IndexResolutionsIncidentPath(projectID, incidentID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Incident", "index_resolutions", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeIndexResolutionsRequest returns an encoder for requests sent to the
// Incident index_resolutions server.
func EncodeIndexResolutionsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*incident.IndexResolutionsPayload)
		if !ok {
			return goahttp.ErrInvalidType("Incident", "index_resolutions", "*incident.IndexResolutionsPayload", v)
		}
		req.Header.Set("Api-Version", p.APIVersion)
		if p.Token != nil {
			if !strings.Contains(*p.Token, " ") {
				req.Header.Set("Authorization", "Bearer "+*p.Token)
			} else {
				req.Header.Set("Authorization", *p.Token)
			}
		}
		return nil
	}
}

// DecodeIndexResolutionsResponse returns a decoder for responses returned by
// the Incident index_resolutions endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeIndexResolutionsResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "unprocessable_entity" (type *goa.ServiceError): http.StatusUnprocessableEntity
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeIndexResolutionsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body IndexResolutionsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Incident", "index_resolutions", err)
			}
			p := NewIndexResolutionsResolutionsOK(&body)
			view := "default"
			vres := &incidentviews.Resolutions{p, view}
			if err = vres.Validate(); err != nil {
				return nil, goahttp.ErrValidationError("Incident", "index_resolutions", err)
			}
			res := incident.NewResolutions(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body IndexResolutionsNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Incident", "index_resolutions", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("Incident", "index_resolutions", err)
			}
			return nil, NewIndexResolutionsNotFound(&body)
		case http.StatusUnprocessableEntity:
			var (
				body IndexResolutionsUnprocessableEntityResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Incident", "index_resolutions", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("Incident", "index_resolutions", err)
			}
			return nil, NewIndexResolutionsUnprocessableEntity(&body)
		case http.StatusUnauthorized:
			var (
				body IndexResolutionsUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Incident", "index_resolutions", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("Incident", "index_resolutions", err)
			}
			return nil, NewIndexResolutionsUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body IndexResolutionsForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Incident", "index_resolutions", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("Incident", "index_resolutions", err)
			}
			return nil, NewIndexResolutionsForbidden(&body)
		case http.StatusBadRequest:
			var (
				body IndexResolutionsBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Incident", "index_resolutions", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("Incident", "index_resolutions", err)
			}
			return nil, NewIndexResolutionsBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body IndexResolutionsBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Incident", "index_resolutions", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("Incident", "index_resolutions", err)
			}
			return nil, NewIndexResolutionsBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body IndexResolutionsInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Incident", "index_resolutions", err)
			}
			err = body.Validate()
			if err != nil {
				return nil, goahttp.ErrValidationError("Incident", "index_resolutions", err)
			}
			return nil, NewIndexResolutionsInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Incident", "index_resolutions", resp.StatusCode, string(body))
		}
	}
}

// unmarshalProjectResponseBodyToProjectView builds a value of type
// *incidentviews.ProjectView from a value of type *ProjectResponseBody.
func unmarshalProjectResponseBodyToProjectView(v *ProjectResponseBody) *incidentviews.ProjectView {
	if v == nil {
		return nil
	}
	res := &incidentviews.ProjectView{
		ID:      v.ID,
		Name:    v.Name,
		OrgID:   v.OrgID,
		OrgName: v.OrgName,
	}

	return res
}

// unmarshalAppliedPolicyResponseBodyToAppliedPolicyView builds a value of type
// *incidentviews.AppliedPolicyView from a value of type
// *AppliedPolicyResponseBody.
func unmarshalAppliedPolicyResponseBodyToAppliedPolicyView(v *AppliedPolicyResponseBody) *incidentviews.AppliedPolicyView {
	if v == nil {
		return nil
	}
	res := &incidentviews.AppliedPolicyView{
		ID:          v.ID,
		Name:        v.Name,
		Href:        v.Href,
		Description: v.Description,
		DocLink:     v.DocLink,
		CreatedAt:   v.CreatedAt,
		UpdatedAt:   v.UpdatedAt,
		Severity:    v.Severity,
		Category:    v.Category,
		Frequency:   v.Frequency,
		DryRun:      v.DryRun,
		Status:      v.Status,
		Error:       v.Error,
		ErroredAt:   v.ErroredAt,
		Kind:        v.Kind,
	}
	if v.Project != nil {
		res.Project = unmarshalProjectResponseBodyToProjectView(v.Project)
	}
	if v.PolicyTemplate != nil {
		res.PolicyTemplate = unmarshalPolicyTemplateResponseBodyToPolicyTemplateView(v.PolicyTemplate)
	}
	if v.PublishedTemplate != nil {
		res.PublishedTemplate = unmarshalPublishedTemplateResponseBodyToPublishedTemplateView(v.PublishedTemplate)
	}
	if v.Info != nil {
		res.Info = make(map[string]string, len(v.Info))
		for key, val := range v.Info {
			tk := key
			tv := val
			res.Info[tk] = tv
		}
	}
	if v.CreatedBy != nil {
		res.CreatedBy = unmarshalUserResponseBodyToUserView(v.CreatedBy)
	}
	if v.Options != nil {
		res.Options = make([]*incidentviews.ConfigurationOptionView, len(v.Options))
		for i, val := range v.Options {
			res.Options[i] = &incidentviews.ConfigurationOptionView{
				Name:  val.Name,
				Label: val.Label,
				Type:  val.Type,
				Value: val.Value,
			}
		}
	}

	return res
}

// unmarshalPolicyTemplateResponseBodyToPolicyTemplateView builds a value of
// type *incidentviews.PolicyTemplateView from a value of type
// *PolicyTemplateResponseBody.
func unmarshalPolicyTemplateResponseBodyToPolicyTemplateView(v *PolicyTemplateResponseBody) *incidentviews.PolicyTemplateView {
	if v == nil {
		return nil
	}
	res := &incidentviews.PolicyTemplateView{
		ID:               v.ID,
		Name:             v.Name,
		ProjectID:        v.ProjectID,
		RsPtVer:          v.RsPtVer,
		ShortDescription: v.ShortDescription,
		LongDescription:  v.LongDescription,
		DocLink:          v.DocLink,
		Href:             v.Href,
		Filename:         v.Filename,
		Source:           v.Source,
		Fingerprint:      v.Fingerprint,
		Category:         v.Category,
		CreatedAt:        v.CreatedAt,
		UpdatedAt:        v.UpdatedAt,
		Severity:         v.Severity,
		Kind:             v.Kind,
	}
	if v.Info != nil {
		res.Info = make(map[string]string, len(v.Info))
		for key, val := range v.Info {
			tk := key
			tv := val
			res.Info[tk] = tv
		}
	}
	if v.CreatedBy != nil {
		res.CreatedBy = unmarshalUserResponseBodyToUserView(v.CreatedBy)
	}
	if v.UpdatedBy != nil {
		res.UpdatedBy = unmarshalUserResponseBodyToUserView(v.UpdatedBy)
	}
	if v.Permissions != nil {
		res.Permissions = make(map[string]*incidentviews.PermissionView, len(v.Permissions))
		for key, val := range v.Permissions {
			tk := key
			tv := &incidentviews.PermissionView{
				Name:  val.Name,
				Label: val.Label,
			}
			tv.Resources = make([]string, len(val.Resources))
			for i, val := range val.Resources {
				tv.Resources[i] = val
			}
			tv.Actions = make([]string, len(val.Actions))
			for i, val := range val.Actions {
				tv.Actions[i] = val
			}
			res.Permissions[tk] = tv
		}
	}
	if v.RequiredRoles != nil {
		res.RequiredRoles = make([]string, len(v.RequiredRoles))
		for i, val := range v.RequiredRoles {
			res.RequiredRoles[i] = val
		}
	}
	if v.Parameters != nil {
		res.Parameters = make(map[string]*incidentviews.ParameterView, len(v.Parameters))
		for key, val := range v.Parameters {
			tk := key
			tv := &incidentviews.ParameterView{
				Name:                  val.Name,
				Type:                  val.Type,
				Label:                 val.Label,
				Index:                 val.Index,
				Category:              val.Category,
				Description:           val.Description,
				Default:               val.Default,
				NoEcho:                val.NoEcho,
				MinLength:             val.MinLength,
				MaxLength:             val.MaxLength,
				MinValue:              val.MinValue,
				MaxValue:              val.MaxValue,
				ConstraintDescription: val.ConstraintDescription,
			}
			if val.NoEcho == nil {
				var tmp bool = false
				tv.NoEcho = &tmp
			}
			if val.AllowedValues != nil {
				tv.AllowedValues = make([]interface{}, len(val.AllowedValues))
				for i, val := range val.AllowedValues {
					tv.AllowedValues[i] = val
				}
			}
			if val.AllowedPattern != nil {
				tv.AllowedPattern = unmarshalRegexpResponseBodyToRegexpView(val.AllowedPattern)
			}
			res.Parameters[tk] = tv
		}
	}

	return res
}

// unmarshalUserResponseBodyToUserView builds a value of type
// *incidentviews.UserView from a value of type *UserResponseBody.
func unmarshalUserResponseBodyToUserView(v *UserResponseBody) *incidentviews.UserView {
	if v == nil {
		return nil
	}
	res := &incidentviews.UserView{
		ID:    v.ID,
		Email: v.Email,
		Name:  v.Name,
	}

	return res
}

// unmarshalRegexpResponseBodyToRegexpView builds a value of type
// *incidentviews.RegexpView from a value of type *RegexpResponseBody.
func unmarshalRegexpResponseBodyToRegexpView(v *RegexpResponseBody) *incidentviews.RegexpView {
	if v == nil {
		return nil
	}
	res := &incidentviews.RegexpView{
		Pattern: v.Pattern,
		Options: v.Options,
	}

	return res
}

// unmarshalPublishedTemplateResponseBodyToPublishedTemplateView builds a value
// of type *incidentviews.PublishedTemplateView from a value of type
// *PublishedTemplateResponseBody.
func unmarshalPublishedTemplateResponseBodyToPublishedTemplateView(v *PublishedTemplateResponseBody) *incidentviews.PublishedTemplateView {
	if v == nil {
		return nil
	}
	res := &incidentviews.PublishedTemplateView{
		ID:                        v.ID,
		Name:                      v.Name,
		OrgID:                     v.OrgID,
		ProjectID:                 v.ProjectID,
		PolicyTemplateID:          v.PolicyTemplateID,
		PolicyTemplateURL:         v.PolicyTemplateURL,
		PolicyTemplateFingerprint: v.PolicyTemplateFingerprint,
		RsPtVer:                   v.RsPtVer,
		ShortDescription:          v.ShortDescription,
		LongDescription:           v.LongDescription,
		DocLink:                   v.DocLink,
		Href:                      v.Href,
		Filename:                  v.Filename,
		Source:                    v.Source,
		Fingerprint:               v.Fingerprint,
		Category:                  v.Category,
		CreatedAt:                 v.CreatedAt,
		UpdatedAt:                 v.UpdatedAt,
		Severity:                  v.Severity,
		BuiltIn:                   v.BuiltIn,
		Hidden:                    v.Hidden,
		HiddenAt:                  v.HiddenAt,
		Kind:                      v.Kind,
	}
	if v.Info != nil {
		res.Info = make(map[string]string, len(v.Info))
		for key, val := range v.Info {
			tk := key
			tv := val
			res.Info[tk] = tv
		}
	}
	if v.CreatedBy != nil {
		res.CreatedBy = unmarshalUserResponseBodyToUserView(v.CreatedBy)
	}
	if v.UpdatedBy != nil {
		res.UpdatedBy = unmarshalUserResponseBodyToUserView(v.UpdatedBy)
	}
	if v.Permissions != nil {
		res.Permissions = make(map[string]*incidentviews.PermissionView, len(v.Permissions))
		for key, val := range v.Permissions {
			tk := key
			tv := &incidentviews.PermissionView{
				Name:  val.Name,
				Label: val.Label,
			}
			tv.Resources = make([]string, len(val.Resources))
			for i, val := range val.Resources {
				tv.Resources[i] = val
			}
			tv.Actions = make([]string, len(val.Actions))
			for i, val := range val.Actions {
				tv.Actions[i] = val
			}
			res.Permissions[tk] = tv
		}
	}
	if v.RequiredRoles != nil {
		res.RequiredRoles = make([]string, len(v.RequiredRoles))
		for i, val := range v.RequiredRoles {
			res.RequiredRoles[i] = val
		}
	}
	if v.Parameters != nil {
		res.Parameters = make(map[string]*incidentviews.ParameterView, len(v.Parameters))
		for key, val := range v.Parameters {
			tk := key
			tv := &incidentviews.ParameterView{
				Name:                  val.Name,
				Type:                  val.Type,
				Label:                 val.Label,
				Index:                 val.Index,
				Category:              val.Category,
				Description:           val.Description,
				Default:               val.Default,
				NoEcho:                val.NoEcho,
				MinLength:             val.MinLength,
				MaxLength:             val.MaxLength,
				MinValue:              val.MinValue,
				MaxValue:              val.MaxValue,
				ConstraintDescription: val.ConstraintDescription,
			}
			if val.NoEcho == nil {
				var tmp bool = false
				tv.NoEcho = &tmp
			}
			if val.AllowedValues != nil {
				tv.AllowedValues = make([]interface{}, len(val.AllowedValues))
				for i, val := range val.AllowedValues {
					tv.AllowedValues[i] = val
				}
			}
			if val.AllowedPattern != nil {
				tv.AllowedPattern = unmarshalRegexpResponseBodyToRegexpView(val.AllowedPattern)
			}
			res.Parameters[tk] = tv
		}
	}
	if v.HiddenBy != nil {
		res.HiddenBy = unmarshalUserResponseBodyToUserView(v.HiddenBy)
	}

	return res
}

// unmarshalApprovalRequestResponseBodyToApprovalRequestView builds a value of
// type *incidentviews.ApprovalRequestView from a value of type
// *ApprovalRequestResponseBody.
func unmarshalApprovalRequestResponseBodyToApprovalRequestView(v *ApprovalRequestResponseBody) *incidentviews.ApprovalRequestView {
	if v == nil {
		return nil
	}
	res := &incidentviews.ApprovalRequestView{
		ID:            v.ID,
		ProjectID:     v.ProjectID,
		Href:          v.Href,
		Label:         v.Label,
		Description:   v.Description,
		CreatedAt:     v.CreatedAt,
		UpdatedAt:     v.UpdatedAt,
		Status:        v.Status,
		ApprovedAt:    v.ApprovedAt,
		DenialComment: v.DenialComment,
		DeniedAt:      v.DeniedAt,
		Kind:          v.Kind,
	}
	res.Subject = unmarshalApprovalSubject2ToApprovalSubject2(v.Subject)
	if v.Parameters != nil {
		res.Parameters = make(map[string]*incidentviews.ParameterView, len(v.Parameters))
		for key, val := range v.Parameters {
			tk := key
			tv := &incidentviews.ParameterView{
				Name:                  val.Name,
				Type:                  val.Type,
				Label:                 val.Label,
				Index:                 val.Index,
				Category:              val.Category,
				Description:           val.Description,
				Default:               val.Default,
				NoEcho:                val.NoEcho,
				MinLength:             val.MinLength,
				MaxLength:             val.MaxLength,
				MinValue:              val.MinValue,
				MaxValue:              val.MaxValue,
				ConstraintDescription: val.ConstraintDescription,
			}
			if val.NoEcho == nil {
				var tmp bool = false
				tv.NoEcho = &tmp
			}
			if val.AllowedValues != nil {
				tv.AllowedValues = make([]interface{}, len(val.AllowedValues))
				for i, val := range val.AllowedValues {
					tv.AllowedValues[i] = val
				}
			}
			if val.AllowedPattern != nil {
				tv.AllowedPattern = unmarshalRegexpResponseBodyToRegexpView(val.AllowedPattern)
			}
			res.Parameters[tk] = tv
		}
	}
	if v.Options != nil {
		res.Options = make([]*incidentviews.ConfigurationOptionView, len(v.Options))
		for i, val := range v.Options {
			res.Options[i] = &incidentviews.ConfigurationOptionView{
				Name:  val.Name,
				Label: val.Label,
				Type:  val.Type,
				Value: val.Value,
			}
		}
	}
	if v.ApprovedBy != nil {
		res.ApprovedBy = unmarshalUserResponseBodyToUserView(v.ApprovedBy)
	}
	if v.DeniedBy != nil {
		res.DeniedBy = unmarshalUserResponseBodyToUserView(v.DeniedBy)
	}

	return res
}

// unmarshalApprovalSubject2ToApprovalSubject2 builds a value of type
// *incidentviews.ApprovalSubject2 from a value of type *ApprovalSubject2.
func unmarshalApprovalSubject2ToApprovalSubject2(v *ApprovalSubject2) *incidentviews.ApprovalSubject2 {
	res := &incidentviews.ApprovalSubject2{
		Kind: v.Kind,
		Href: v.Href,
	}

	return res
}
