// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// Approval HTTP server types
//
// Command:
// $ goa gen github.com/rightscale/governance/front_service/design

package server

import (
	approval "github.com/rightscale/policy_sdk/sdk/approval"
	approvalviews "github.com/rightscale/policy_sdk/sdk/approval/views"
	goa "goa.design/goa"
)

// ApproveRequestBody is the type of the "Approval" service "approve" endpoint
// HTTP request body.
type ApproveRequestBody struct {
	// options lists the configuration options used to parameterize the approval.
	Options []*ConfigurationOptionCreateTypeRequestBody `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
}

// DenyRequestBody is the type of the "Approval" service "deny" endpoint HTTP
// request body.
type DenyRequestBody struct {
	// A comment that explains the reason for denial
	Comment *string `form:"comment,omitempty" json:"comment,omitempty" xml:"comment,omitempty"`
}

// ShowResponseBody is the type of the "Approval" service "show" endpoint HTTP
// response body.
type ShowResponseBody struct {
	// id identifies an approval request by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// project_id is the ID of the project where this approval request is created.
	ProjectID uint `form:"project_id" json:"project_id" xml:"project_id"`
	// href is the href of the approval request
	Href string `form:"href" json:"href" xml:"href"`
	// label is a short title for this approval request
	Label *string `form:"label,omitempty" json:"label,omitempty" xml:"label,omitempty"`
	// description describes the details for this approval request.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// subject is the subject of the approval.
	Subject *ApprovalSubject2 `form:"subject" json:"subject" xml:"subject"`
	// created_at is the approval request creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// updated_at is the last update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// status is the status of this approval request.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// kind is "gov#approval_request".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// ShowResponseBodyExtended is the type of the "Approval" service "show"
// endpoint HTTP response body.
type ShowResponseBodyExtended struct {
	// id identifies an approval request by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// project_id is the ID of the project where this approval request is created.
	ProjectID uint `form:"project_id" json:"project_id" xml:"project_id"`
	// href is the href of the approval request
	Href string `form:"href" json:"href" xml:"href"`
	// label is a short title for this approval request
	Label *string `form:"label,omitempty" json:"label,omitempty" xml:"label,omitempty"`
	// description describes the details for this approval request.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// subject is the subject of the approval.
	Subject *ApprovalSubject2 `form:"subject" json:"subject" xml:"subject"`
	// created_at is the approval request creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// updated_at is the last update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// status is the status of this approval request.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// parameters is a list of parameters required for approval request.
	Parameters map[string]*ParameterResponseBody `form:"parameters,omitempty" json:"parameters,omitempty" xml:"parameters,omitempty"`
	// options lists the configuration options used to parameterize the approval
	// request.
	Options []*ConfigurationOptionResponseBody `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
	// approved_by is the RightScale user that approved this approval request.
	ApprovedBy *UserResponseBody `form:"approved_by,omitempty" json:"approved_by,omitempty" xml:"approved_by,omitempty"`
	// approved_at is the approval timestamp in RFC3339 format.
	ApprovedAt *string `form:"approved_at,omitempty" json:"approved_at,omitempty" xml:"approved_at,omitempty"`
	// denial_comment is a comment that explains the reason for denial, if relevant.
	DenialComment *string `form:"denial_comment,omitempty" json:"denial_comment,omitempty" xml:"denial_comment,omitempty"`
	// approved_by is the RightScale user that approved this approval request.
	DeniedBy *UserResponseBody `form:"denied_by,omitempty" json:"denied_by,omitempty" xml:"denied_by,omitempty"`
	// denied_at is the denial timestamp in RFC3339 format.
	DeniedAt *string `form:"denied_at,omitempty" json:"denied_at,omitempty" xml:"denied_at,omitempty"`
	// kind is "gov#approval_request".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// IndexOKResponseBody is the type of the "Approval" service "index" endpoint
// HTTP response body.
type IndexOKResponseBody struct {
	// count is the number of approval requests in the list
	Count *uint `form:"count,omitempty" json:"count,omitempty" xml:"count,omitempty"`
	// items is the array of approval requests.
	Items ApprovalRequestResponseBodyCollection `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	// not_modified is a flag used internally that indicates how to encode the HTTP
	// response (i.e. 200 or 304).
	NotModified *string `form:"not_modified,omitempty" json:"not_modified,omitempty" xml:"not_modified,omitempty"`
	// kind is "gov#approval_request_list".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// IndexOKResponseBodyExtended is the type of the "Approval" service "index"
// endpoint HTTP response body.
type IndexOKResponseBodyExtended struct {
	// count is the number of approval requests in the list
	Count *uint `form:"count,omitempty" json:"count,omitempty" xml:"count,omitempty"`
	// items is the array of approval requests.
	Items ApprovalRequestResponseBodyExtendedCollection `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	// not_modified is a flag used internally that indicates how to encode the HTTP
	// response (i.e. 200 or 304).
	NotModified *string `form:"not_modified,omitempty" json:"not_modified,omitempty" xml:"not_modified,omitempty"`
	// kind is "gov#approval_request_list".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// ShowNotFoundResponseBody is the type of the "Approval" service "show"
// endpoint HTTP response body for the "not_found" error.
type ShowNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowUnauthorizedResponseBody is the type of the "Approval" service "show"
// endpoint HTTP response body for the "unauthorized" error.
type ShowUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowForbiddenResponseBody is the type of the "Approval" service "show"
// endpoint HTTP response body for the "forbidden" error.
type ShowForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowBadRequestResponseBody is the type of the "Approval" service "show"
// endpoint HTTP response body for the "bad_request" error.
type ShowBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowBadGatewayResponseBody is the type of the "Approval" service "show"
// endpoint HTTP response body for the "bad_gateway" error.
type ShowBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowInternalErrorResponseBody is the type of the "Approval" service "show"
// endpoint HTTP response body for the "internal_error" error.
type ShowInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexUnauthorizedResponseBody is the type of the "Approval" service "index"
// endpoint HTTP response body for the "unauthorized" error.
type IndexUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexForbiddenResponseBody is the type of the "Approval" service "index"
// endpoint HTTP response body for the "forbidden" error.
type IndexForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexBadRequestResponseBody is the type of the "Approval" service "index"
// endpoint HTTP response body for the "bad_request" error.
type IndexBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexBadGatewayResponseBody is the type of the "Approval" service "index"
// endpoint HTTP response body for the "bad_gateway" error.
type IndexBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IndexInternalErrorResponseBody is the type of the "Approval" service "index"
// endpoint HTTP response body for the "internal_error" error.
type IndexInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ApproveNotFoundResponseBody is the type of the "Approval" service "approve"
// endpoint HTTP response body for the "not_found" error.
type ApproveNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ApproveUnauthorizedResponseBody is the type of the "Approval" service
// "approve" endpoint HTTP response body for the "unauthorized" error.
type ApproveUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ApproveForbiddenResponseBody is the type of the "Approval" service "approve"
// endpoint HTTP response body for the "forbidden" error.
type ApproveForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ApproveBadRequestResponseBody is the type of the "Approval" service
// "approve" endpoint HTTP response body for the "bad_request" error.
type ApproveBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ApproveBadGatewayResponseBody is the type of the "Approval" service
// "approve" endpoint HTTP response body for the "bad_gateway" error.
type ApproveBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ApproveInternalErrorResponseBody is the type of the "Approval" service
// "approve" endpoint HTTP response body for the "internal_error" error.
type ApproveInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DenyNotFoundResponseBody is the type of the "Approval" service "deny"
// endpoint HTTP response body for the "not_found" error.
type DenyNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DenyUnauthorizedResponseBody is the type of the "Approval" service "deny"
// endpoint HTTP response body for the "unauthorized" error.
type DenyUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DenyForbiddenResponseBody is the type of the "Approval" service "deny"
// endpoint HTTP response body for the "forbidden" error.
type DenyForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DenyBadRequestResponseBody is the type of the "Approval" service "deny"
// endpoint HTTP response body for the "bad_request" error.
type DenyBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DenyBadGatewayResponseBody is the type of the "Approval" service "deny"
// endpoint HTTP response body for the "bad_gateway" error.
type DenyBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DenyInternalErrorResponseBody is the type of the "Approval" service "deny"
// endpoint HTTP response body for the "internal_error" error.
type DenyInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ApprovalSubject2 is used to define fields on response body types.
type ApprovalSubject2 struct {
	// kind is the kind of subject
	Kind string `form:"kind" json:"kind" xml:"kind"`
	// href is the href of the subject.
	Href string `form:"href" json:"href" xml:"href"`
}

// ParameterResponseBody is used to define fields on response body types.
type ParameterResponseBody struct {
	// Name of the parameter
	Name string `json:"name"`
	// Type of the parameter
	Type string `json:"type"`
	// Label to show in the UI
	Label string `json:"label"`
	// The index of this parameter in the list
	Index uint `json:"index"`
	// The category used to group parameters
	Category *string `json:"category"`
	// Description of the parameter
	Description *string `json:"description"`
	// The default value for the parameter
	Default interface{} `json:"default"`
	// no_echo determines whether the value of the parameter should be hidden in
	// UIs and API responses.
	NoEcho bool `json:"no_echo"`
	// List of values allowed for this parameter
	AllowedValues []interface{} `json:"allowed_values"`
	// The minimum length of a string parameter
	MinLength *uint `json:"min_length"`
	// The maximum length of a string parameter
	MaxLength *uint `json:"max_length"`
	// The minimum value of a number parmameter
	MinValue *float64 `json:"min_value"`
	// The maximum value of a number parameter
	MaxValue *float64 `json:"max_value"`
	// The regular expression pattern used to validate a string parameter
	AllowedPattern *RegexpResponseBody `json:"allowed_pattern"`
	// The description used for constraints
	ConstraintDescription *string `json:"constraint_description"`
}

// RegexpResponseBody is used to define fields on response body types.
type RegexpResponseBody struct {
	// Pattern is the regular expression pattern.
	Pattern string `json:"pattern"`
	// Options are the regular expression options. Options i (case insensitve) and
	// m (match over newlines) supported.
	Options *string `json:"options"`
}

// ConfigurationOptionResponseBody is used to define fields on response body
// types.
type ConfigurationOptionResponseBody struct {
	// name of option
	Name string `form:"name" json:"name" xml:"name"`
	// label of option
	Label string `form:"label" json:"label" xml:"label"`
	// type of option
	Type string `form:"type" json:"type" xml:"type"`
	// value of option
	Value interface{} `form:"value" json:"value" xml:"value"`
}

// UserResponseBody is used to define fields on response body types.
type UserResponseBody struct {
	// ID of user
	ID uint `form:"id" json:"id" xml:"id"`
	// email of user
	Email string `form:"email" json:"email" xml:"email"`
	// name of user, usually of the form 'First Last'
	Name string `form:"name" json:"name" xml:"name"`
}

// ApprovalRequestResponseBodyCollection is used to define fields on response
// body types.
type ApprovalRequestResponseBodyCollection []*ApprovalRequestResponseBody

// ApprovalRequestResponseBody is used to define fields on response body types.
type ApprovalRequestResponseBody struct {
	// id identifies an approval request by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// project_id is the ID of the project where this approval request is created.
	ProjectID uint `form:"project_id" json:"project_id" xml:"project_id"`
	// href is the href of the approval request
	Href string `form:"href" json:"href" xml:"href"`
	// label is a short title for this approval request
	Label *string `form:"label,omitempty" json:"label,omitempty" xml:"label,omitempty"`
	// description describes the details for this approval request.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// subject is the subject of the approval.
	Subject *ApprovalSubject2 `form:"subject" json:"subject" xml:"subject"`
	// created_at is the approval request creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// updated_at is the last update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// status is the status of this approval request.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// kind is "gov#approval_request".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// ApprovalRequestResponseBodyExtendedCollection is used to define fields on
// response body types.
type ApprovalRequestResponseBodyExtendedCollection []*ApprovalRequestResponseBodyExtended

// ApprovalRequestResponseBodyExtended is used to define fields on response
// body types.
type ApprovalRequestResponseBodyExtended struct {
	// id identifies an approval request by ID.
	ID string `form:"id" json:"id" xml:"id"`
	// project_id is the ID of the project where this approval request is created.
	ProjectID uint `form:"project_id" json:"project_id" xml:"project_id"`
	// href is the href of the approval request
	Href string `form:"href" json:"href" xml:"href"`
	// label is a short title for this approval request
	Label *string `form:"label,omitempty" json:"label,omitempty" xml:"label,omitempty"`
	// description describes the details for this approval request.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// subject is the subject of the approval.
	Subject *ApprovalSubject2 `form:"subject" json:"subject" xml:"subject"`
	// created_at is the approval request creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// updated_at is the last update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// status is the status of this approval request.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// parameters is a list of parameters required for approval request.
	Parameters map[string]*ParameterResponseBody `form:"parameters,omitempty" json:"parameters,omitempty" xml:"parameters,omitempty"`
	// options lists the configuration options used to parameterize the approval
	// request.
	Options []*ConfigurationOptionResponseBody `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
	// approved_by is the RightScale user that approved this approval request.
	ApprovedBy *UserResponseBody `form:"approved_by,omitempty" json:"approved_by,omitempty" xml:"approved_by,omitempty"`
	// approved_at is the approval timestamp in RFC3339 format.
	ApprovedAt *string `form:"approved_at,omitempty" json:"approved_at,omitempty" xml:"approved_at,omitempty"`
	// denial_comment is a comment that explains the reason for denial, if relevant.
	DenialComment *string `form:"denial_comment,omitempty" json:"denial_comment,omitempty" xml:"denial_comment,omitempty"`
	// approved_by is the RightScale user that approved this approval request.
	DeniedBy *UserResponseBody `form:"denied_by,omitempty" json:"denied_by,omitempty" xml:"denied_by,omitempty"`
	// denied_at is the denial timestamp in RFC3339 format.
	DeniedAt *string `form:"denied_at,omitempty" json:"denied_at,omitempty" xml:"denied_at,omitempty"`
	// kind is "gov#approval_request".
	Kind string `form:"kind" json:"kind" xml:"kind"`
}

// ConfigurationOptionCreateTypeRequestBody is used to define fields on request
// body types.
type ConfigurationOptionCreateTypeRequestBody struct {
	// name of option
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// value of option
	Value *interface{} `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
}

// NewShowResponseBody builds the HTTP response body from the result of the
// "show" endpoint of the "Approval" service.
func NewShowResponseBody(res *approvalviews.ApprovalRequestView) *ShowResponseBody {
	body := &ShowResponseBody{
		ID:          *res.ID,
		ProjectID:   *res.ProjectID,
		Href:        *res.Href,
		Label:       res.Label,
		Description: res.Description,
		CreatedAt:   res.CreatedAt,
		UpdatedAt:   res.UpdatedAt,
		Status:      res.Status,
		Kind:        *res.Kind,
	}
	if res.Subject != nil {
		body.Subject = marshalApprovalSubject2ToApprovalSubject2(res.Subject)
	}
	return body
}

// NewShowResponseBodyExtended builds the HTTP response body from the result of
// the "show" endpoint of the "Approval" service.
func NewShowResponseBodyExtended(res *approvalviews.ApprovalRequestView) *ShowResponseBodyExtended {
	body := &ShowResponseBodyExtended{
		ID:            *res.ID,
		ProjectID:     *res.ProjectID,
		Href:          *res.Href,
		Label:         res.Label,
		Description:   res.Description,
		CreatedAt:     res.CreatedAt,
		UpdatedAt:     res.UpdatedAt,
		Status:        res.Status,
		ApprovedAt:    res.ApprovedAt,
		DenialComment: res.DenialComment,
		DeniedAt:      res.DeniedAt,
		Kind:          *res.Kind,
	}
	if res.Subject != nil {
		body.Subject = marshalApprovalSubject2ToApprovalSubject2(res.Subject)
	}
	if res.Parameters != nil {
		body.Parameters = make(map[string]*ParameterResponseBody, len(res.Parameters))
		for key, val := range res.Parameters {
			tk := key
			tv := &ParameterResponseBody{
				Name:                  *val.Name,
				Type:                  *val.Type,
				Label:                 *val.Label,
				Index:                 *val.Index,
				Category:              val.Category,
				Description:           val.Description,
				MinLength:             val.MinLength,
				MaxLength:             val.MaxLength,
				MinValue:              val.MinValue,
				MaxValue:              val.MaxValue,
				ConstraintDescription: val.ConstraintDescription,
			}
			if val.Default != nil {
				tv.Default = *val.Default
			}
			if val.NoEcho != nil {
				tv.NoEcho = *val.NoEcho
			}
			if val.NoEcho == nil {
				tv.NoEcho = false
			}
			if val.AllowedValues != nil {
				tv.AllowedValues = make([]interface{}, len(val.AllowedValues))
				for i, val := range val.AllowedValues {
					tv.AllowedValues[i] = val
				}
			}
			if val.AllowedPattern != nil {
				tv.AllowedPattern = marshalRegexpViewToRegexpResponseBody(val.AllowedPattern)
			}
			body.Parameters[tk] = tv
		}
	}
	if res.Options != nil {
		body.Options = make([]*ConfigurationOptionResponseBody, len(res.Options))
		for i, val := range res.Options {
			body.Options[i] = &ConfigurationOptionResponseBody{
				Name:  *val.Name,
				Label: *val.Label,
				Type:  *val.Type,
				Value: *val.Value,
			}
		}
	}
	if res.ApprovedBy != nil {
		body.ApprovedBy = marshalUserViewToUserResponseBody(res.ApprovedBy)
	}
	if res.DeniedBy != nil {
		body.DeniedBy = marshalUserViewToUserResponseBody(res.DeniedBy)
	}
	return body
}

// NewIndexOKResponseBody builds the HTTP response body from the result of the
// "index" endpoint of the "Approval" service.
func NewIndexOKResponseBody(res *approvalviews.ApprovalRequestListView) *IndexOKResponseBody {
	body := &IndexOKResponseBody{
		Count:       res.Count,
		NotModified: res.NotModified,
		Kind:        *res.Kind,
	}
	if res.Items != nil {
		body.Items = make([]*ApprovalRequestResponseBody, len(res.Items))
		for i, val := range res.Items {
			body.Items[i] = &ApprovalRequestResponseBody{
				ID:          *val.ID,
				ProjectID:   *val.ProjectID,
				Href:        *val.Href,
				Label:       val.Label,
				Description: val.Description,
				CreatedAt:   val.CreatedAt,
				UpdatedAt:   val.UpdatedAt,
				Status:      val.Status,
				Kind:        *val.Kind,
			}
			if val.Subject != nil {
				body.Items[i].Subject = marshalApprovalSubject2ToApprovalSubject2(val.Subject)
			}
		}
	}
	return body
}

// NewIndexOKResponseBodyExtended builds the HTTP response body from the result
// of the "index" endpoint of the "Approval" service.
func NewIndexOKResponseBodyExtended(res *approvalviews.ApprovalRequestListView) *IndexOKResponseBodyExtended {
	body := &IndexOKResponseBodyExtended{
		Count:       res.Count,
		NotModified: res.NotModified,
		Kind:        *res.Kind,
	}
	if res.Items != nil {
		body.Items = make([]*ApprovalRequestResponseBodyExtended, len(res.Items))
		for i, val := range res.Items {
			body.Items[i] = &ApprovalRequestResponseBodyExtended{
				ID:            *val.ID,
				ProjectID:     *val.ProjectID,
				Href:          *val.Href,
				Label:         val.Label,
				Description:   val.Description,
				CreatedAt:     val.CreatedAt,
				UpdatedAt:     val.UpdatedAt,
				Status:        val.Status,
				ApprovedAt:    val.ApprovedAt,
				DenialComment: val.DenialComment,
				DeniedAt:      val.DeniedAt,
				Kind:          *val.Kind,
			}
			if val.Subject != nil {
				body.Items[i].Subject = marshalApprovalSubject2ToApprovalSubject2(val.Subject)
			}
			if val.Parameters != nil {
				body.Items[i].Parameters = make(map[string]*ParameterResponseBody, len(val.Parameters))
				for key, val := range val.Parameters {
					tk := key
					tv := &ParameterResponseBody{
						Name:                  *val.Name,
						Type:                  *val.Type,
						Label:                 *val.Label,
						Index:                 *val.Index,
						Category:              val.Category,
						Description:           val.Description,
						MinLength:             val.MinLength,
						MaxLength:             val.MaxLength,
						MinValue:              val.MinValue,
						MaxValue:              val.MaxValue,
						ConstraintDescription: val.ConstraintDescription,
					}
					if val.Default != nil {
						tv.Default = *val.Default
					}
					if val.NoEcho != nil {
						tv.NoEcho = *val.NoEcho
					}
					if val.NoEcho == nil {
						tv.NoEcho = false
					}
					if val.AllowedValues != nil {
						tv.AllowedValues = make([]interface{}, len(val.AllowedValues))
						for i, val := range val.AllowedValues {
							tv.AllowedValues[i] = val
						}
					}
					if val.AllowedPattern != nil {
						tv.AllowedPattern = marshalRegexpViewToRegexpResponseBody(val.AllowedPattern)
					}
					body.Items[i].Parameters[tk] = tv
				}
			}
			if val.Options != nil {
				body.Items[i].Options = make([]*ConfigurationOptionResponseBody, len(val.Options))
				for j, val := range val.Options {
					body.Items[i].Options[j] = &ConfigurationOptionResponseBody{
						Name:  *val.Name,
						Label: *val.Label,
						Type:  *val.Type,
						Value: *val.Value,
					}
				}
			}
			if val.ApprovedBy != nil {
				body.Items[i].ApprovedBy = marshalUserViewToUserResponseBody(val.ApprovedBy)
			}
			if val.DeniedBy != nil {
				body.Items[i].DeniedBy = marshalUserViewToUserResponseBody(val.DeniedBy)
			}
		}
	}
	return body
}

// NewShowNotFoundResponseBody builds the HTTP response body from the result of
// the "show" endpoint of the "Approval" service.
func NewShowNotFoundResponseBody(res *goa.ServiceError) *ShowNotFoundResponseBody {
	body := &ShowNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowUnauthorizedResponseBody builds the HTTP response body from the
// result of the "show" endpoint of the "Approval" service.
func NewShowUnauthorizedResponseBody(res *goa.ServiceError) *ShowUnauthorizedResponseBody {
	body := &ShowUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowForbiddenResponseBody builds the HTTP response body from the result
// of the "show" endpoint of the "Approval" service.
func NewShowForbiddenResponseBody(res *goa.ServiceError) *ShowForbiddenResponseBody {
	body := &ShowForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowBadRequestResponseBody builds the HTTP response body from the result
// of the "show" endpoint of the "Approval" service.
func NewShowBadRequestResponseBody(res *goa.ServiceError) *ShowBadRequestResponseBody {
	body := &ShowBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowBadGatewayResponseBody builds the HTTP response body from the result
// of the "show" endpoint of the "Approval" service.
func NewShowBadGatewayResponseBody(res *goa.ServiceError) *ShowBadGatewayResponseBody {
	body := &ShowBadGatewayResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowInternalErrorResponseBody builds the HTTP response body from the
// result of the "show" endpoint of the "Approval" service.
func NewShowInternalErrorResponseBody(res *goa.ServiceError) *ShowInternalErrorResponseBody {
	body := &ShowInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexUnauthorizedResponseBody builds the HTTP response body from the
// result of the "index" endpoint of the "Approval" service.
func NewIndexUnauthorizedResponseBody(res *goa.ServiceError) *IndexUnauthorizedResponseBody {
	body := &IndexUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexForbiddenResponseBody builds the HTTP response body from the result
// of the "index" endpoint of the "Approval" service.
func NewIndexForbiddenResponseBody(res *goa.ServiceError) *IndexForbiddenResponseBody {
	body := &IndexForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexBadRequestResponseBody builds the HTTP response body from the result
// of the "index" endpoint of the "Approval" service.
func NewIndexBadRequestResponseBody(res *goa.ServiceError) *IndexBadRequestResponseBody {
	body := &IndexBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexBadGatewayResponseBody builds the HTTP response body from the result
// of the "index" endpoint of the "Approval" service.
func NewIndexBadGatewayResponseBody(res *goa.ServiceError) *IndexBadGatewayResponseBody {
	body := &IndexBadGatewayResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIndexInternalErrorResponseBody builds the HTTP response body from the
// result of the "index" endpoint of the "Approval" service.
func NewIndexInternalErrorResponseBody(res *goa.ServiceError) *IndexInternalErrorResponseBody {
	body := &IndexInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewApproveNotFoundResponseBody builds the HTTP response body from the result
// of the "approve" endpoint of the "Approval" service.
func NewApproveNotFoundResponseBody(res *goa.ServiceError) *ApproveNotFoundResponseBody {
	body := &ApproveNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewApproveUnauthorizedResponseBody builds the HTTP response body from the
// result of the "approve" endpoint of the "Approval" service.
func NewApproveUnauthorizedResponseBody(res *goa.ServiceError) *ApproveUnauthorizedResponseBody {
	body := &ApproveUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewApproveForbiddenResponseBody builds the HTTP response body from the
// result of the "approve" endpoint of the "Approval" service.
func NewApproveForbiddenResponseBody(res *goa.ServiceError) *ApproveForbiddenResponseBody {
	body := &ApproveForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewApproveBadRequestResponseBody builds the HTTP response body from the
// result of the "approve" endpoint of the "Approval" service.
func NewApproveBadRequestResponseBody(res *goa.ServiceError) *ApproveBadRequestResponseBody {
	body := &ApproveBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewApproveBadGatewayResponseBody builds the HTTP response body from the
// result of the "approve" endpoint of the "Approval" service.
func NewApproveBadGatewayResponseBody(res *goa.ServiceError) *ApproveBadGatewayResponseBody {
	body := &ApproveBadGatewayResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewApproveInternalErrorResponseBody builds the HTTP response body from the
// result of the "approve" endpoint of the "Approval" service.
func NewApproveInternalErrorResponseBody(res *goa.ServiceError) *ApproveInternalErrorResponseBody {
	body := &ApproveInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDenyNotFoundResponseBody builds the HTTP response body from the result of
// the "deny" endpoint of the "Approval" service.
func NewDenyNotFoundResponseBody(res *goa.ServiceError) *DenyNotFoundResponseBody {
	body := &DenyNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDenyUnauthorizedResponseBody builds the HTTP response body from the
// result of the "deny" endpoint of the "Approval" service.
func NewDenyUnauthorizedResponseBody(res *goa.ServiceError) *DenyUnauthorizedResponseBody {
	body := &DenyUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDenyForbiddenResponseBody builds the HTTP response body from the result
// of the "deny" endpoint of the "Approval" service.
func NewDenyForbiddenResponseBody(res *goa.ServiceError) *DenyForbiddenResponseBody {
	body := &DenyForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDenyBadRequestResponseBody builds the HTTP response body from the result
// of the "deny" endpoint of the "Approval" service.
func NewDenyBadRequestResponseBody(res *goa.ServiceError) *DenyBadRequestResponseBody {
	body := &DenyBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDenyBadGatewayResponseBody builds the HTTP response body from the result
// of the "deny" endpoint of the "Approval" service.
func NewDenyBadGatewayResponseBody(res *goa.ServiceError) *DenyBadGatewayResponseBody {
	body := &DenyBadGatewayResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDenyInternalErrorResponseBody builds the HTTP response body from the
// result of the "deny" endpoint of the "Approval" service.
func NewDenyInternalErrorResponseBody(res *goa.ServiceError) *DenyInternalErrorResponseBody {
	body := &DenyInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowPayload builds a Approval service show endpoint payload.
func NewShowPayload(projectID uint, approvalRequestID string, view *string, apiVersion string, token *string) *approval.ShowPayload {
	return &approval.ShowPayload{
		ProjectID:         projectID,
		ApprovalRequestID: approvalRequestID,
		View:              view,
		APIVersion:        apiVersion,
		Token:             token,
	}
}

// NewIndexPayload builds a Approval service index endpoint payload.
func NewIndexPayload(projectID uint, view *string, id []string, subjectKind *string, subjectHref *string, status []string, apiVersion string, etag *string, token *string) *approval.IndexPayload {
	return &approval.IndexPayload{
		ProjectID:   projectID,
		View:        view,
		ID:          id,
		SubjectKind: subjectKind,
		SubjectHref: subjectHref,
		Status:      status,
		APIVersion:  apiVersion,
		Etag:        etag,
		Token:       token,
	}
}

// NewApprovePayload builds a Approval service approve endpoint payload.
func NewApprovePayload(body *ApproveRequestBody, projectID uint, approvalRequestID string, apiVersion string, token *string) *approval.ApprovePayload {
	v := &approval.ApprovePayload{}
	if body.Options != nil {
		v.Options = make([]*approval.ConfigurationOptionCreateType, len(body.Options))
		for i, val := range body.Options {
			v.Options[i] = &approval.ConfigurationOptionCreateType{
				Name:  *val.Name,
				Value: *val.Value,
			}
		}
	}
	v.ProjectID = projectID
	v.ApprovalRequestID = approvalRequestID
	v.APIVersion = apiVersion
	v.Token = token
	return v
}

// NewDenyPayload builds a Approval service deny endpoint payload.
func NewDenyPayload(body *DenyRequestBody, projectID uint, approvalRequestID string, apiVersion string, token *string) *approval.DenyPayload {
	v := &approval.DenyPayload{
		Comment: body.Comment,
	}
	v.ProjectID = projectID
	v.ApprovalRequestID = approvalRequestID
	v.APIVersion = apiVersion
	v.Token = token
	return v
}

// Validate runs the validations defined on ParameterResponseBody.
func (body *ParameterResponseBody) Validate() (err error) {
	if !(body.Type == "string" || body.Type == "list" || body.Type == "number") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", body.Type, []interface{}{"string", "list", "number"}))
	}
	return
}

// Validate runs the validations defined on ConfigurationOptionResponseBody.
func (body *ConfigurationOptionResponseBody) Validate() (err error) {
	if body.Value == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("value", "body"))
	}
	if !(body.Type == "string" || body.Type == "number" || body.Type == "list") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", body.Type, []interface{}{"string", "number", "list"}))
	}
	return
}

// Validate runs the validations defined on UserResponseBody.
func (body *UserResponseBody) Validate() (err error) {
	err = goa.MergeErrors(err, goa.ValidateFormat("body.email", body.Email, goa.FormatEmail))

	return
}

// Validate runs the validations defined on
// ApprovalRequestResponseBodyCollection.
func (body ApprovalRequestResponseBodyCollection) Validate() (err error) {
	for _, e := range body {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// Validate runs the validations defined on ApprovalRequestResponseBody.
func (body *ApprovalRequestResponseBody) Validate() (err error) {
	if body.Subject == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("subject", "body"))
	}
	err = goa.MergeErrors(err, goa.ValidatePattern("body.href", body.Href, "^/api/governance/projects/[0-9]+/approval_requests/[0-9a-f]+$"))
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	if body.Status != nil {
		if !(*body.Status == "pending" || *body.Status == "approved" || *body.Status == "denied") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []interface{}{"pending", "approved", "denied"}))
		}
	}
	if !(body.Kind == "gov#approval_request") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.kind", body.Kind, []interface{}{"gov#approval_request"}))
	}
	return
}

// Validate runs the validations defined on
// ApprovalRequestResponseBodyExtendedCollection.
func (body ApprovalRequestResponseBodyExtendedCollection) Validate() (err error) {
	for _, e := range body {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// Validate runs the validations defined on ApprovalRequestResponseBodyExtended.
func (body *ApprovalRequestResponseBodyExtended) Validate() (err error) {
	if body.Subject == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("subject", "body"))
	}
	err = goa.MergeErrors(err, goa.ValidatePattern("body.href", body.Href, "^/api/governance/projects/[0-9]+/approval_requests/[0-9a-f]+$"))
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	if body.Status != nil {
		if !(*body.Status == "pending" || *body.Status == "approved" || *body.Status == "denied") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []interface{}{"pending", "approved", "denied"}))
		}
	}
	for _, v := range body.Parameters {
		if v != nil {
			if err2 := v.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.Options {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.ApprovedBy != nil {
		if err2 := body.ApprovedBy.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.ApprovedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.approved_at", *body.ApprovedAt, goa.FormatDateTime))
	}
	if body.DeniedBy != nil {
		if err2 := body.DeniedBy.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.DeniedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.denied_at", *body.DeniedAt, goa.FormatDateTime))
	}
	if !(body.Kind == "gov#approval_request") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.kind", body.Kind, []interface{}{"gov#approval_request"}))
	}
	return
}

// Validate runs the validations defined on
// ConfigurationOptionCreateTypeRequestBody.
func (body *ConfigurationOptionCreateTypeRequestBody) Validate() (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Value == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("value", "body"))
	}
	return
}
