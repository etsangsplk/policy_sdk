// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// Approval HTTP client types
//
// Command:
// $ goa gen github.com/rightscale/governance/front_service/design

package client

import (
	approval "github.com/rightscale/right_pt/sdk/approval"
	approvalviews "github.com/rightscale/right_pt/sdk/approval/views"
	goa "goa.design/goa"
)

// ApproveRequestBody is the type of the "Approval" service "approve" endpoint
// HTTP request body.
type ApproveRequestBody struct {
	// options lists the configuration options used to parameterize the approval.
	Options []*ConfigurationOptionCreateTypeRequestBody `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
}

// DenyRequestBody is the type of the "Approval" service "deny" endpoint HTTP
// request body.
type DenyRequestBody struct {
	// A comment that explains the reason for denial
	Comment *string `form:"comment,omitempty" json:"comment,omitempty" xml:"comment,omitempty"`
}

// ShowResponseBody is the type of the "Approval" service "show" endpoint HTTP
// response body.
type ShowResponseBody struct {
	// id identifies an approval request by ID.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// project_id is the ID of the project where this approval request is created.
	ProjectID *uint `form:"project_id,omitempty" json:"project_id,omitempty" xml:"project_id,omitempty"`
	// href is the href of the approval request
	Href *string `form:"href,omitempty" json:"href,omitempty" xml:"href,omitempty"`
	// label is a short title for this approval request
	Label *string `form:"label,omitempty" json:"label,omitempty" xml:"label,omitempty"`
	// description describes the details for this approval request.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// subject is the subject of the approval.
	Subject *ApprovalSubject2 `form:"subject,omitempty" json:"subject,omitempty" xml:"subject,omitempty"`
	// created_at is the approval request creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// updated_at is the last update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// parameters is a list of parameters required for approval request.
	Parameters map[string]*ParameterResponseBody `form:"parameters,omitempty" json:"parameters,omitempty" xml:"parameters,omitempty"`
	// status is the status of this approval request.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// options lists the configuration options used to parameterize the approval
	// request.
	Options []*ConfigurationOptionResponseBody `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
	// approved_by is the RightScale user that approved this approval request.
	ApprovedBy *UserResponseBody `form:"approved_by,omitempty" json:"approved_by,omitempty" xml:"approved_by,omitempty"`
	// approved_at is the approval timestamp in RFC3339 format.
	ApprovedAt *string `form:"approved_at,omitempty" json:"approved_at,omitempty" xml:"approved_at,omitempty"`
	// denial_comment is a comment that explains the reason for denial, if relevant.
	DenialComment *string `form:"denial_comment,omitempty" json:"denial_comment,omitempty" xml:"denial_comment,omitempty"`
	// denied_by is the RightScale user that denied this approval request.
	DeniedBy *UserResponseBody `form:"denied_by,omitempty" json:"denied_by,omitempty" xml:"denied_by,omitempty"`
	// denied_at is the denial timestamp in RFC3339 format.
	DeniedAt *string `form:"denied_at,omitempty" json:"denied_at,omitempty" xml:"denied_at,omitempty"`
	// kind is "gov#approval_request".
	Kind *string `form:"kind,omitempty" json:"kind,omitempty" xml:"kind,omitempty"`
}

// IndexOKResponseBody is the type of the "Approval" service "index" endpoint
// HTTP response body.
type IndexOKResponseBody struct {
	// count is the number of approval requests in the list
	Count *uint `form:"count,omitempty" json:"count,omitempty" xml:"count,omitempty"`
	// items is the array of approval requests.
	Items ApprovalRequestCollectionResponseBody `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	// not_modified is a flag used internally that indicates how to encode the HTTP
	// response (i.e. 200 or 304).
	NotModified *string `form:"not_modified,omitempty" json:"not_modified,omitempty" xml:"not_modified,omitempty"`
	// kind is "gov#approval_request_list".
	Kind *string `form:"kind,omitempty" json:"kind,omitempty" xml:"kind,omitempty"`
}

// ShowNotFoundResponseBody is the type of the "Approval" service "show"
// endpoint HTTP response body for the "not_found" error.
type ShowNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowUnauthorizedResponseBody is the type of the "Approval" service "show"
// endpoint HTTP response body for the "unauthorized" error.
type ShowUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowForbiddenResponseBody is the type of the "Approval" service "show"
// endpoint HTTP response body for the "forbidden" error.
type ShowForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowBadRequestResponseBody is the type of the "Approval" service "show"
// endpoint HTTP response body for the "bad_request" error.
type ShowBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowBadGatewayResponseBody is the type of the "Approval" service "show"
// endpoint HTTP response body for the "bad_gateway" error.
type ShowBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowInternalErrorResponseBody is the type of the "Approval" service "show"
// endpoint HTTP response body for the "internal_error" error.
type ShowInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// IndexUnauthorizedResponseBody is the type of the "Approval" service "index"
// endpoint HTTP response body for the "unauthorized" error.
type IndexUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// IndexForbiddenResponseBody is the type of the "Approval" service "index"
// endpoint HTTP response body for the "forbidden" error.
type IndexForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// IndexBadRequestResponseBody is the type of the "Approval" service "index"
// endpoint HTTP response body for the "bad_request" error.
type IndexBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// IndexBadGatewayResponseBody is the type of the "Approval" service "index"
// endpoint HTTP response body for the "bad_gateway" error.
type IndexBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// IndexInternalErrorResponseBody is the type of the "Approval" service "index"
// endpoint HTTP response body for the "internal_error" error.
type IndexInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ApproveNotFoundResponseBody is the type of the "Approval" service "approve"
// endpoint HTTP response body for the "not_found" error.
type ApproveNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ApproveUnauthorizedResponseBody is the type of the "Approval" service
// "approve" endpoint HTTP response body for the "unauthorized" error.
type ApproveUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ApproveForbiddenResponseBody is the type of the "Approval" service "approve"
// endpoint HTTP response body for the "forbidden" error.
type ApproveForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ApproveBadRequestResponseBody is the type of the "Approval" service
// "approve" endpoint HTTP response body for the "bad_request" error.
type ApproveBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ApproveBadGatewayResponseBody is the type of the "Approval" service
// "approve" endpoint HTTP response body for the "bad_gateway" error.
type ApproveBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ApproveInternalErrorResponseBody is the type of the "Approval" service
// "approve" endpoint HTTP response body for the "internal_error" error.
type ApproveInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DenyNotFoundResponseBody is the type of the "Approval" service "deny"
// endpoint HTTP response body for the "not_found" error.
type DenyNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DenyUnauthorizedResponseBody is the type of the "Approval" service "deny"
// endpoint HTTP response body for the "unauthorized" error.
type DenyUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DenyForbiddenResponseBody is the type of the "Approval" service "deny"
// endpoint HTTP response body for the "forbidden" error.
type DenyForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DenyBadRequestResponseBody is the type of the "Approval" service "deny"
// endpoint HTTP response body for the "bad_request" error.
type DenyBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DenyBadGatewayResponseBody is the type of the "Approval" service "deny"
// endpoint HTTP response body for the "bad_gateway" error.
type DenyBadGatewayResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DenyInternalErrorResponseBody is the type of the "Approval" service "deny"
// endpoint HTTP response body for the "internal_error" error.
type DenyInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ApprovalSubject2 is used to define fields on response body types.
type ApprovalSubject2 struct {
	// kind is the kind of subject
	Kind *string `form:"kind,omitempty" json:"kind,omitempty" xml:"kind,omitempty"`
	// href is the href of the subject.
	Href *string `form:"href,omitempty" json:"href,omitempty" xml:"href,omitempty"`
}

// ParameterResponseBody is used to define fields on response body types.
type ParameterResponseBody struct {
	// Name of the parameter
	Name *string `json:"name"`
	// Type of the parameter
	Type *string `json:"type"`
	// Label to show in the UI
	Label *string `json:"label"`
	// The index of this parameter in the list
	Index *uint `json:"index"`
	// The category used to group parameters
	Category *string `json:"category"`
	// Description of the parameter
	Description *string `json:"description"`
	// The default value for the parameter
	Default *interface{} `json:"default"`
	// no_echo determines whether the value of the parameter should be hidden in
	// UIs and API responses.
	NoEcho *bool `json:"no_echo"`
	// List of values allowed for this parameter
	AllowedValues []interface{} `json:"allowed_values"`
	// The minimum length of a string parameter
	MinLength *uint `json:"min_length"`
	// The maximum length of a string parameter
	MaxLength *uint `json:"max_length"`
	// The minimum value of a number parmameter
	MinValue *float64 `json:"min_value"`
	// The maximum value of a number parameter
	MaxValue *float64 `json:"max_value"`
	// The regular expression pattern used to validate a string parameter
	AllowedPattern *RegexpResponseBody `json:"allowed_pattern"`
	// The description used for constraints
	ConstraintDescription *string `json:"constraint_description"`
}

// RegexpResponseBody is used to define fields on response body types.
type RegexpResponseBody struct {
	// Pattern is the regular expression pattern.
	Pattern *string `json:"pattern"`
	// Options are the regular expression options. Options i (case insensitve) and
	// m (match over newlines) supported.
	Options *string `json:"options"`
}

// ConfigurationOptionResponseBody is used to define fields on response body
// types.
type ConfigurationOptionResponseBody struct {
	// name of option
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// label of option
	Label *string `form:"label,omitempty" json:"label,omitempty" xml:"label,omitempty"`
	// type of option
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// value of option
	Value *interface{} `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
}

// UserResponseBody is used to define fields on response body types.
type UserResponseBody struct {
	// ID of user
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// email of user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// name of user, usually of the form 'First Last'
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// ApprovalRequestCollectionResponseBody is used to define fields on response
// body types.
type ApprovalRequestCollectionResponseBody []*ApprovalRequestResponseBody

// ApprovalRequestResponseBody is used to define fields on response body types.
type ApprovalRequestResponseBody struct {
	// id identifies an approval request by ID.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// project_id is the ID of the project where this approval request is created.
	ProjectID *uint `form:"project_id,omitempty" json:"project_id,omitempty" xml:"project_id,omitempty"`
	// href is the href of the approval request
	Href *string `form:"href,omitempty" json:"href,omitempty" xml:"href,omitempty"`
	// label is a short title for this approval request
	Label *string `form:"label,omitempty" json:"label,omitempty" xml:"label,omitempty"`
	// description describes the details for this approval request.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// subject is the subject of the approval.
	Subject *ApprovalSubject2 `form:"subject,omitempty" json:"subject,omitempty" xml:"subject,omitempty"`
	// created_at is the approval request creation timestamp in RFC3339 format.
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// updated_at is the last update timestamp in RFC3339 format.
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// parameters is a list of parameters required for approval request.
	Parameters map[string]*ParameterResponseBody `form:"parameters,omitempty" json:"parameters,omitempty" xml:"parameters,omitempty"`
	// status is the status of this approval request.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// options lists the configuration options used to parameterize the approval
	// request.
	Options []*ConfigurationOptionResponseBody `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
	// approved_by is the RightScale user that approved this approval request.
	ApprovedBy *UserResponseBody `form:"approved_by,omitempty" json:"approved_by,omitempty" xml:"approved_by,omitempty"`
	// approved_at is the approval timestamp in RFC3339 format.
	ApprovedAt *string `form:"approved_at,omitempty" json:"approved_at,omitempty" xml:"approved_at,omitempty"`
	// denial_comment is a comment that explains the reason for denial, if relevant.
	DenialComment *string `form:"denial_comment,omitempty" json:"denial_comment,omitempty" xml:"denial_comment,omitempty"`
	// denied_by is the RightScale user that denied this approval request.
	DeniedBy *UserResponseBody `form:"denied_by,omitempty" json:"denied_by,omitempty" xml:"denied_by,omitempty"`
	// denied_at is the denial timestamp in RFC3339 format.
	DeniedAt *string `form:"denied_at,omitempty" json:"denied_at,omitempty" xml:"denied_at,omitempty"`
	// kind is "gov#approval_request".
	Kind *string `form:"kind,omitempty" json:"kind,omitempty" xml:"kind,omitempty"`
}

// ConfigurationOptionCreateTypeRequestBody is used to define fields on request
// body types.
type ConfigurationOptionCreateTypeRequestBody struct {
	// name of option
	Name string `form:"name" json:"name" xml:"name"`
	// value of option
	Value interface{} `form:"value" json:"value" xml:"value"`
}

// NewApproveRequestBody builds the HTTP request body from the payload of the
// "approve" endpoint of the "Approval" service.
func NewApproveRequestBody(p *approval.ApprovePayload) *ApproveRequestBody {
	body := &ApproveRequestBody{}
	if p.Options != nil {
		body.Options = make([]*ConfigurationOptionCreateTypeRequestBody, len(p.Options))
		for i, val := range p.Options {
			body.Options[i] = &ConfigurationOptionCreateTypeRequestBody{
				Name:  val.Name,
				Value: val.Value,
			}
		}
	}
	return body
}

// NewDenyRequestBody builds the HTTP request body from the payload of the
// "deny" endpoint of the "Approval" service.
func NewDenyRequestBody(p *approval.DenyPayload) *DenyRequestBody {
	body := &DenyRequestBody{
		Comment: p.Comment,
	}
	return body
}

// NewShowApprovalRequestOK builds a "Approval" service "show" endpoint result
// from a HTTP "OK" response.
func NewShowApprovalRequestOK(body *ShowResponseBody) *approvalviews.ApprovalRequestView {
	v := &approvalviews.ApprovalRequestView{
		ID:            body.ID,
		ProjectID:     body.ProjectID,
		Href:          body.Href,
		Label:         body.Label,
		Description:   body.Description,
		CreatedAt:     body.CreatedAt,
		UpdatedAt:     body.UpdatedAt,
		Status:        body.Status,
		ApprovedAt:    body.ApprovedAt,
		DenialComment: body.DenialComment,
		DeniedAt:      body.DeniedAt,
		Kind:          body.Kind,
	}
	v.Subject = unmarshalApprovalSubject2ToApprovalSubject2(body.Subject)
	if body.Parameters != nil {
		v.Parameters = make(map[string]*approvalviews.ParameterView, len(body.Parameters))
		for key, val := range body.Parameters {
			tk := key
			tv := &approvalviews.ParameterView{
				Name:                  val.Name,
				Type:                  val.Type,
				Label:                 val.Label,
				Index:                 val.Index,
				Category:              val.Category,
				Description:           val.Description,
				Default:               val.Default,
				NoEcho:                val.NoEcho,
				MinLength:             val.MinLength,
				MaxLength:             val.MaxLength,
				MinValue:              val.MinValue,
				MaxValue:              val.MaxValue,
				ConstraintDescription: val.ConstraintDescription,
			}
			if val.NoEcho == nil {
				var tmp bool = false
				tv.NoEcho = &tmp
			}
			if val.AllowedValues != nil {
				tv.AllowedValues = make([]interface{}, len(val.AllowedValues))
				for i, val := range val.AllowedValues {
					tv.AllowedValues[i] = val
				}
			}
			if val.AllowedPattern != nil {
				tv.AllowedPattern = unmarshalRegexpResponseBodyToRegexpView(val.AllowedPattern)
			}
			v.Parameters[tk] = tv
		}
	}
	if body.Options != nil {
		v.Options = make([]*approvalviews.ConfigurationOptionView, len(body.Options))
		for i, val := range body.Options {
			v.Options[i] = &approvalviews.ConfigurationOptionView{
				Name:  val.Name,
				Label: val.Label,
				Type:  val.Type,
				Value: val.Value,
			}
		}
	}
	if body.ApprovedBy != nil {
		v.ApprovedBy = unmarshalUserResponseBodyToUserView(body.ApprovedBy)
	}
	if body.DeniedBy != nil {
		v.DeniedBy = unmarshalUserResponseBodyToUserView(body.DeniedBy)
	}
	return v
}

// NewShowNotFound builds a Approval service show endpoint not_found error.
func NewShowNotFound(body *ShowNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewShowUnauthorized builds a Approval service show endpoint unauthorized
// error.
func NewShowUnauthorized(body *ShowUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewShowForbidden builds a Approval service show endpoint forbidden error.
func NewShowForbidden(body *ShowForbiddenResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewShowBadRequest builds a Approval service show endpoint bad_request error.
func NewShowBadRequest(body *ShowBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewShowBadGateway builds a Approval service show endpoint bad_gateway error.
func NewShowBadGateway(body *ShowBadGatewayResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewShowInternalError builds a Approval service show endpoint internal_error
// error.
func NewShowInternalError(body *ShowInternalErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewIndexApprovalRequestListNotModified builds a "Approval" service "index"
// endpoint result from a HTTP "NotModified" response.
func NewIndexApprovalRequestListNotModified(etag *string) *approvalviews.ApprovalRequestListView {
	return &approvalviews.ApprovalRequestListView{
		Etag: etag,
	}
}

// NewIndexApprovalRequestListOK builds a "Approval" service "index" endpoint
// result from a HTTP "OK" response.
func NewIndexApprovalRequestListOK(body *IndexOKResponseBody, etag *string) *approvalviews.ApprovalRequestListView {
	v := &approvalviews.ApprovalRequestListView{
		Count:       body.Count,
		NotModified: body.NotModified,
		Kind:        body.Kind,
	}
	if body.Items != nil {
		v.Items = make([]*approvalviews.ApprovalRequestView, len(body.Items))
		for i, val := range body.Items {
			v.Items[i] = &approvalviews.ApprovalRequestView{
				ID:            val.ID,
				ProjectID:     val.ProjectID,
				Href:          val.Href,
				Label:         val.Label,
				Description:   val.Description,
				CreatedAt:     val.CreatedAt,
				UpdatedAt:     val.UpdatedAt,
				Status:        val.Status,
				ApprovedAt:    val.ApprovedAt,
				DenialComment: val.DenialComment,
				DeniedAt:      val.DeniedAt,
				Kind:          val.Kind,
			}
			v.Items[i].Subject = unmarshalApprovalSubject2ToApprovalSubject2(val.Subject)
			if val.Parameters != nil {
				v.Items[i].Parameters = make(map[string]*approvalviews.ParameterView, len(val.Parameters))
				for key, val := range val.Parameters {
					tk := key
					tv := &approvalviews.ParameterView{
						Name:                  val.Name,
						Type:                  val.Type,
						Label:                 val.Label,
						Index:                 val.Index,
						Category:              val.Category,
						Description:           val.Description,
						Default:               val.Default,
						NoEcho:                val.NoEcho,
						MinLength:             val.MinLength,
						MaxLength:             val.MaxLength,
						MinValue:              val.MinValue,
						MaxValue:              val.MaxValue,
						ConstraintDescription: val.ConstraintDescription,
					}
					if val.NoEcho == nil {
						var tmp bool = false
						tv.NoEcho = &tmp
					}
					if val.AllowedValues != nil {
						tv.AllowedValues = make([]interface{}, len(val.AllowedValues))
						for i, val := range val.AllowedValues {
							tv.AllowedValues[i] = val
						}
					}
					if val.AllowedPattern != nil {
						tv.AllowedPattern = unmarshalRegexpResponseBodyToRegexpView(val.AllowedPattern)
					}
					v.Items[i].Parameters[tk] = tv
				}
			}
			if val.Options != nil {
				v.Items[i].Options = make([]*approvalviews.ConfigurationOptionView, len(val.Options))
				for j, val := range val.Options {
					v.Items[i].Options[j] = &approvalviews.ConfigurationOptionView{
						Name:  val.Name,
						Label: val.Label,
						Type:  val.Type,
						Value: val.Value,
					}
				}
			}
			if val.ApprovedBy != nil {
				v.Items[i].ApprovedBy = unmarshalUserResponseBodyToUserView(val.ApprovedBy)
			}
			if val.DeniedBy != nil {
				v.Items[i].DeniedBy = unmarshalUserResponseBodyToUserView(val.DeniedBy)
			}
		}
	}
	v.Etag = etag
	return v
}

// NewIndexUnauthorized builds a Approval service index endpoint unauthorized
// error.
func NewIndexUnauthorized(body *IndexUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewIndexForbidden builds a Approval service index endpoint forbidden error.
func NewIndexForbidden(body *IndexForbiddenResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewIndexBadRequest builds a Approval service index endpoint bad_request
// error.
func NewIndexBadRequest(body *IndexBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewIndexBadGateway builds a Approval service index endpoint bad_gateway
// error.
func NewIndexBadGateway(body *IndexBadGatewayResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewIndexInternalError builds a Approval service index endpoint
// internal_error error.
func NewIndexInternalError(body *IndexInternalErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewApproveNotFound builds a Approval service approve endpoint not_found
// error.
func NewApproveNotFound(body *ApproveNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewApproveUnauthorized builds a Approval service approve endpoint
// unauthorized error.
func NewApproveUnauthorized(body *ApproveUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewApproveForbidden builds a Approval service approve endpoint forbidden
// error.
func NewApproveForbidden(body *ApproveForbiddenResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewApproveBadRequest builds a Approval service approve endpoint bad_request
// error.
func NewApproveBadRequest(body *ApproveBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewApproveBadGateway builds a Approval service approve endpoint bad_gateway
// error.
func NewApproveBadGateway(body *ApproveBadGatewayResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewApproveInternalError builds a Approval service approve endpoint
// internal_error error.
func NewApproveInternalError(body *ApproveInternalErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewDenyNotFound builds a Approval service deny endpoint not_found error.
func NewDenyNotFound(body *DenyNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewDenyUnauthorized builds a Approval service deny endpoint unauthorized
// error.
func NewDenyUnauthorized(body *DenyUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewDenyForbidden builds a Approval service deny endpoint forbidden error.
func NewDenyForbidden(body *DenyForbiddenResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewDenyBadRequest builds a Approval service deny endpoint bad_request error.
func NewDenyBadRequest(body *DenyBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewDenyBadGateway builds a Approval service deny endpoint bad_gateway error.
func NewDenyBadGateway(body *DenyBadGatewayResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewDenyInternalError builds a Approval service deny endpoint internal_error
// error.
func NewDenyInternalError(body *DenyInternalErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// Validate runs the validations defined on ShowNotFoundResponseBody.
func (body *ShowNotFoundResponseBody) Validate() (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// Validate runs the validations defined on ShowUnauthorizedResponseBody.
func (body *ShowUnauthorizedResponseBody) Validate() (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// Validate runs the validations defined on ShowForbiddenResponseBody.
func (body *ShowForbiddenResponseBody) Validate() (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// Validate runs the validations defined on ShowBadRequestResponseBody.
func (body *ShowBadRequestResponseBody) Validate() (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// Validate runs the validations defined on ShowBadGatewayResponseBody.
func (body *ShowBadGatewayResponseBody) Validate() (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// Validate runs the validations defined on ShowInternalErrorResponseBody.
func (body *ShowInternalErrorResponseBody) Validate() (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// Validate runs the validations defined on IndexUnauthorizedResponseBody.
func (body *IndexUnauthorizedResponseBody) Validate() (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// Validate runs the validations defined on IndexForbiddenResponseBody.
func (body *IndexForbiddenResponseBody) Validate() (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// Validate runs the validations defined on IndexBadRequestResponseBody.
func (body *IndexBadRequestResponseBody) Validate() (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// Validate runs the validations defined on IndexBadGatewayResponseBody.
func (body *IndexBadGatewayResponseBody) Validate() (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// Validate runs the validations defined on IndexInternalErrorResponseBody.
func (body *IndexInternalErrorResponseBody) Validate() (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// Validate runs the validations defined on ApproveNotFoundResponseBody.
func (body *ApproveNotFoundResponseBody) Validate() (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// Validate runs the validations defined on ApproveUnauthorizedResponseBody.
func (body *ApproveUnauthorizedResponseBody) Validate() (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// Validate runs the validations defined on ApproveForbiddenResponseBody.
func (body *ApproveForbiddenResponseBody) Validate() (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// Validate runs the validations defined on ApproveBadRequestResponseBody.
func (body *ApproveBadRequestResponseBody) Validate() (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// Validate runs the validations defined on ApproveBadGatewayResponseBody.
func (body *ApproveBadGatewayResponseBody) Validate() (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// Validate runs the validations defined on ApproveInternalErrorResponseBody.
func (body *ApproveInternalErrorResponseBody) Validate() (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// Validate runs the validations defined on DenyNotFoundResponseBody.
func (body *DenyNotFoundResponseBody) Validate() (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// Validate runs the validations defined on DenyUnauthorizedResponseBody.
func (body *DenyUnauthorizedResponseBody) Validate() (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// Validate runs the validations defined on DenyForbiddenResponseBody.
func (body *DenyForbiddenResponseBody) Validate() (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// Validate runs the validations defined on DenyBadRequestResponseBody.
func (body *DenyBadRequestResponseBody) Validate() (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// Validate runs the validations defined on DenyBadGatewayResponseBody.
func (body *DenyBadGatewayResponseBody) Validate() (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// Validate runs the validations defined on DenyInternalErrorResponseBody.
func (body *DenyInternalErrorResponseBody) Validate() (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// Validate runs the validations defined on ApprovalSubject2.
func (body *ApprovalSubject2) Validate() (err error) {
	if body.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "body"))
	}
	if body.Href == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("href", "body"))
	}
	return
}

// Validate runs the validations defined on ParameterResponseBody.
func (body *ParameterResponseBody) Validate() (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.Label == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("label", "body"))
	}
	if body.Index == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("index", "body"))
	}
	if body.Type != nil {
		if !(*body.Type == "string" || *body.Type == "list" || *body.Type == "number") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []interface{}{"string", "list", "number"}))
		}
	}
	if body.AllowedPattern != nil {
		if err2 := body.AllowedPattern.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Validate runs the validations defined on RegexpResponseBody.
func (body *RegexpResponseBody) Validate() (err error) {
	if body.Pattern == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pattern", "body"))
	}
	return
}

// Validate runs the validations defined on ConfigurationOptionResponseBody.
func (body *ConfigurationOptionResponseBody) Validate() (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Label == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("label", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.Value == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("value", "body"))
	}
	if body.Type != nil {
		if !(*body.Type == "string" || *body.Type == "number" || *body.Type == "list") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []interface{}{"string", "number", "list"}))
		}
	}
	return
}

// Validate runs the validations defined on UserResponseBody.
func (body *UserResponseBody) Validate() (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	return
}

// Validate runs the validations defined on
// ApprovalRequestCollectionResponseBody.
func (body ApprovalRequestCollectionResponseBody) Validate() (err error) {
	for _, e := range body {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// Validate runs the validations defined on ApprovalRequestResponseBody.
func (body *ApprovalRequestResponseBody) Validate() (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Href == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("href", "body"))
	}
	if body.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "body"))
	}
	if body.Subject == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("subject", "body"))
	}
	if body.ProjectID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("project_id", "body"))
	}
	if body.Href != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.href", *body.Href, "^/api/governance/projects/[0-9]+/approval_requests/[0-9a-f]+$"))
	}
	if body.Subject != nil {
		if err2 := body.Subject.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	for _, v := range body.Parameters {
		if v != nil {
			if err2 := v.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Status != nil {
		if !(*body.Status == "pending" || *body.Status == "approved" || *body.Status == "denied") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []interface{}{"pending", "approved", "denied"}))
		}
	}
	for _, e := range body.Options {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.ApprovedBy != nil {
		if err2 := body.ApprovedBy.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.ApprovedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.approved_at", *body.ApprovedAt, goa.FormatDateTime))
	}
	if body.DeniedBy != nil {
		if err2 := body.DeniedBy.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.DeniedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.denied_at", *body.DeniedAt, goa.FormatDateTime))
	}
	if body.Kind != nil {
		if !(*body.Kind == "gov#approval_request") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.kind", *body.Kind, []interface{}{"gov#approval_request"}))
		}
	}
	return
}

// Validate runs the validations defined on
// ConfigurationOptionCreateTypeRequestBody.
func (body *ConfigurationOptionCreateTypeRequestBody) Validate() (err error) {
	if body.Value == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("value", "body"))
	}
	return
}
