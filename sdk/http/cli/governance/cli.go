// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// Governance HTTP client CLI support package
//
// Command:
// $ goa gen github.com/rightscale/governance/front_service/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	appliedpolicyc "github.com/rightscale/policy_sdk/sdk/http/applied_policy/client"
	approvalc "github.com/rightscale/policy_sdk/sdk/http/approval/client"
	healthc "github.com/rightscale/policy_sdk/sdk/http/health/client"
	incidentc "github.com/rightscale/policy_sdk/sdk/http/incident/client"
	policytemplatec "github.com/rightscale/policy_sdk/sdk/http/policy_template/client"
	publishedtemplatec "github.com/rightscale/policy_sdk/sdk/http/published_template/client"
	goa "goa.design/goa"
	goahttp "goa.design/goa/http"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `applied-policy (create|delete|show|show-status|show-log|index|evaluate)
approval (show|index|approve|deny)
incident (show|index|resolve|index-escalations|index-resolutions)
policy-template (compile|upload|update|retrieve-data|show|index|delete)
published-template (create|update|hide|unhide|delete|show|index)
health (check|report)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` applied-policy create --body '{
      "description": "Delete unattached volumes after 24 hours in US-East.",
      "dry_run": false,
      "frequency": "daily",
      "name": "us_east_unattached_volumes",
      "options": [
         {
            "name": "cloud_vendor",
            "value": "AWS"
         },
         {
            "name": "email_list",
            "value": [
               "person1@domain.com",
               "person2@domain.com"
            ]
         }
      ],
      "template_href": "/api/governance/projects/60073/policy_templates/5b06ead5e0dacc007058c784"
   }' --projectid 60073 --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"` + "\n" +
		os.Args[0] + ` approval show --projectid 60073 --approval-requestid "5b36ad26d4c1990070df726a" --view "default" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"` + "\n" +
		os.Args[0] + ` incident show --projectid 60073 --incidentid "5b06ead5e0dacc007058c784" --view "default" --api-version "1.0" --etag "\"d41d8cd98f00b204e9800998ecf8427e\"" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"` + "\n" +
		os.Args[0] + ` policy-template compile --body '{
      "filename": "file.pt",
      "source": "policy unattached_volumes do\n\t\t\t\t\t# ...\n\t\t\t\t\tend"
   }' --projectid 60073 --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"` + "\n" +
		os.Args[0] + ` published-template create --body '{
      "description": "Delete unattached volumes after 24 hours in US-East.",
      "dry_run": false,
      "frequency": "daily",
      "name": "us_east_unattached_volumes",
      "options": [
         {
            "name": "cloud_vendor",
            "value": "AWS"
         },
         {
            "name": "email_list",
            "value": [
               "person1@domain.com",
               "person2@domain.com"
            ]
         }
      ],
      "template_href": "/api/governance/projects/60073/policy_templates/5b06ead5e0dacc007058c784"
   }' --orgid 1105 --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		appliedPolicyFlags = flag.NewFlagSet("applied-policy", flag.ContinueOnError)

		appliedPolicyCreateFlags          = flag.NewFlagSet("create", flag.ExitOnError)
		appliedPolicyCreateBodyFlag       = appliedPolicyCreateFlags.String("body", "REQUIRED", "")
		appliedPolicyCreateProjectIDFlag  = appliedPolicyCreateFlags.String("projectid", "REQUIRED", "project_id identifies a project by ID.")
		appliedPolicyCreateAPIVersionFlag = appliedPolicyCreateFlags.String("api-version", "REQUIRED", "")
		appliedPolicyCreateTokenFlag      = appliedPolicyCreateFlags.String("token", "", "")

		appliedPolicyDeleteFlags          = flag.NewFlagSet("delete", flag.ExitOnError)
		appliedPolicyDeleteProjectIDFlag  = appliedPolicyDeleteFlags.String("projectid", "REQUIRED", "project_id identifies a project by ID.")
		appliedPolicyDeletePolicyIDFlag   = appliedPolicyDeleteFlags.String("policyid", "REQUIRED", "policy_id identifies an applied policy by ID.")
		appliedPolicyDeleteAPIVersionFlag = appliedPolicyDeleteFlags.String("api-version", "REQUIRED", "")
		appliedPolicyDeleteTokenFlag      = appliedPolicyDeleteFlags.String("token", "", "")

		appliedPolicyShowFlags          = flag.NewFlagSet("show", flag.ExitOnError)
		appliedPolicyShowProjectIDFlag  = appliedPolicyShowFlags.String("projectid", "REQUIRED", "project_id identifies a project by ID.")
		appliedPolicyShowPolicyIDFlag   = appliedPolicyShowFlags.String("policyid", "REQUIRED", "policy_id identifies an applied policy by ID.")
		appliedPolicyShowViewFlag       = appliedPolicyShowFlags.String("view", "", "")
		appliedPolicyShowAPIVersionFlag = appliedPolicyShowFlags.String("api-version", "REQUIRED", "")
		appliedPolicyShowTokenFlag      = appliedPolicyShowFlags.String("token", "", "")

		appliedPolicyShowStatusFlags          = flag.NewFlagSet("show-status", flag.ExitOnError)
		appliedPolicyShowStatusProjectIDFlag  = appliedPolicyShowStatusFlags.String("projectid", "REQUIRED", "project_id identifies a project by ID.")
		appliedPolicyShowStatusPolicyIDFlag   = appliedPolicyShowStatusFlags.String("policyid", "REQUIRED", "policy_id identifies an applied policy by ID.")
		appliedPolicyShowStatusAPIVersionFlag = appliedPolicyShowStatusFlags.String("api-version", "REQUIRED", "")
		appliedPolicyShowStatusTokenFlag      = appliedPolicyShowStatusFlags.String("token", "", "")

		appliedPolicyShowLogFlags          = flag.NewFlagSet("show-log", flag.ExitOnError)
		appliedPolicyShowLogProjectIDFlag  = appliedPolicyShowLogFlags.String("projectid", "REQUIRED", "project_id identifies a project by ID.")
		appliedPolicyShowLogPolicyIDFlag   = appliedPolicyShowLogFlags.String("policyid", "REQUIRED", "policy_id identifies an applied policy by ID.")
		appliedPolicyShowLogAPIVersionFlag = appliedPolicyShowLogFlags.String("api-version", "REQUIRED", "")
		appliedPolicyShowLogEtagFlag       = appliedPolicyShowLogFlags.String("etag", "", "")
		appliedPolicyShowLogTokenFlag      = appliedPolicyShowLogFlags.String("token", "", "")

		appliedPolicyIndexFlags          = flag.NewFlagSet("index", flag.ExitOnError)
		appliedPolicyIndexProjectIDFlag  = appliedPolicyIndexFlags.String("projectid", "REQUIRED", "project_id identifies a project by ID.")
		appliedPolicyIndexViewFlag       = appliedPolicyIndexFlags.String("view", "", "")
		appliedPolicyIndexNameFlag       = appliedPolicyIndexFlags.String("name", "", "")
		appliedPolicyIndexAPIVersionFlag = appliedPolicyIndexFlags.String("api-version", "REQUIRED", "")
		appliedPolicyIndexEtagFlag       = appliedPolicyIndexFlags.String("etag", "", "")
		appliedPolicyIndexTokenFlag      = appliedPolicyIndexFlags.String("token", "", "")

		appliedPolicyEvaluateFlags          = flag.NewFlagSet("evaluate", flag.ExitOnError)
		appliedPolicyEvaluateProjectIDFlag  = appliedPolicyEvaluateFlags.String("projectid", "REQUIRED", "project_id identifies a project by ID.")
		appliedPolicyEvaluatePolicyIDFlag   = appliedPolicyEvaluateFlags.String("policyid", "REQUIRED", "policy_id identifies an applied policy by ID.")
		appliedPolicyEvaluateAPIVersionFlag = appliedPolicyEvaluateFlags.String("api-version", "REQUIRED", "")
		appliedPolicyEvaluateTokenFlag      = appliedPolicyEvaluateFlags.String("token", "", "")

		approvalFlags = flag.NewFlagSet("approval", flag.ContinueOnError)

		approvalShowFlags                 = flag.NewFlagSet("show", flag.ExitOnError)
		approvalShowProjectIDFlag         = approvalShowFlags.String("projectid", "REQUIRED", "project_id identifies a project by ID.")
		approvalShowApprovalRequestIDFlag = approvalShowFlags.String("approval-requestid", "REQUIRED", "approval_request_id identifes an approval by its ID.")
		approvalShowViewFlag              = approvalShowFlags.String("view", "", "")
		approvalShowAPIVersionFlag        = approvalShowFlags.String("api-version", "REQUIRED", "")
		approvalShowTokenFlag             = approvalShowFlags.String("token", "", "")

		approvalIndexFlags           = flag.NewFlagSet("index", flag.ExitOnError)
		approvalIndexProjectIDFlag   = approvalIndexFlags.String("projectid", "REQUIRED", "project_id identifies a project by ID.")
		approvalIndexViewFlag        = approvalIndexFlags.String("view", "", "")
		approvalIndexIDFlag          = approvalIndexFlags.String("id", "", "")
		approvalIndexSubjectKindFlag = approvalIndexFlags.String("subject-kind", "", "")
		approvalIndexSubjectHrefFlag = approvalIndexFlags.String("subject-href", "", "")
		approvalIndexStatusFlag      = approvalIndexFlags.String("status", "", "")
		approvalIndexAPIVersionFlag  = approvalIndexFlags.String("api-version", "REQUIRED", "")
		approvalIndexEtagFlag        = approvalIndexFlags.String("etag", "", "")
		approvalIndexTokenFlag       = approvalIndexFlags.String("token", "", "")

		approvalApproveFlags                 = flag.NewFlagSet("approve", flag.ExitOnError)
		approvalApproveBodyFlag              = approvalApproveFlags.String("body", "REQUIRED", "")
		approvalApproveProjectIDFlag         = approvalApproveFlags.String("projectid", "REQUIRED", "project_id identifies a project by ID.")
		approvalApproveApprovalRequestIDFlag = approvalApproveFlags.String("approval-requestid", "REQUIRED", "approval_request_id identifes an approval request by its ID.")
		approvalApproveAPIVersionFlag        = approvalApproveFlags.String("api-version", "REQUIRED", "")
		approvalApproveTokenFlag             = approvalApproveFlags.String("token", "", "")

		approvalDenyFlags                 = flag.NewFlagSet("deny", flag.ExitOnError)
		approvalDenyBodyFlag              = approvalDenyFlags.String("body", "REQUIRED", "")
		approvalDenyProjectIDFlag         = approvalDenyFlags.String("projectid", "REQUIRED", "project_id identifies a project by ID.")
		approvalDenyApprovalRequestIDFlag = approvalDenyFlags.String("approval-requestid", "REQUIRED", "approval_request_id identifes an approval request by its ID.")
		approvalDenyAPIVersionFlag        = approvalDenyFlags.String("api-version", "REQUIRED", "")
		approvalDenyTokenFlag             = approvalDenyFlags.String("token", "", "")

		incidentFlags = flag.NewFlagSet("incident", flag.ContinueOnError)

		incidentShowFlags          = flag.NewFlagSet("show", flag.ExitOnError)
		incidentShowProjectIDFlag  = incidentShowFlags.String("projectid", "REQUIRED", "project_id identifies a project by ID.")
		incidentShowIncidentIDFlag = incidentShowFlags.String("incidentid", "REQUIRED", "incident_id identifies an incident by ID.")
		incidentShowViewFlag       = incidentShowFlags.String("view", "", "")
		incidentShowAPIVersionFlag = incidentShowFlags.String("api-version", "REQUIRED", "")
		incidentShowEtagFlag       = incidentShowFlags.String("etag", "", "")
		incidentShowTokenFlag      = incidentShowFlags.String("token", "", "")

		incidentIndexFlags               = flag.NewFlagSet("index", flag.ExitOnError)
		incidentIndexProjectIDFlag       = incidentIndexFlags.String("projectid", "REQUIRED", "project_id identifies a project by ID.")
		incidentIndexViewFlag            = incidentIndexFlags.String("view", "", "")
		incidentIndexStateFlag           = incidentIndexFlags.String("state", "", "")
		incidentIndexAppliedPolicyIDFlag = incidentIndexFlags.String("applied-policyid", "", "")
		incidentIndexAPIVersionFlag      = incidentIndexFlags.String("api-version", "REQUIRED", "")
		incidentIndexEtagFlag            = incidentIndexFlags.String("etag", "", "")
		incidentIndexTokenFlag           = incidentIndexFlags.String("token", "", "")

		incidentResolveFlags          = flag.NewFlagSet("resolve", flag.ExitOnError)
		incidentResolveProjectIDFlag  = incidentResolveFlags.String("projectid", "REQUIRED", "project_id identifies a project by ID.")
		incidentResolveIncidentIDFlag = incidentResolveFlags.String("incidentid", "REQUIRED", "incident_id identifies an incident by ID.")
		incidentResolveAPIVersionFlag = incidentResolveFlags.String("api-version", "REQUIRED", "")
		incidentResolveEtagFlag       = incidentResolveFlags.String("etag", "", "")
		incidentResolveTokenFlag      = incidentResolveFlags.String("token", "", "")

		incidentIndexEscalationsFlags          = flag.NewFlagSet("index-escalations", flag.ExitOnError)
		incidentIndexEscalationsProjectIDFlag  = incidentIndexEscalationsFlags.String("projectid", "REQUIRED", "project_id identifies a project by ID.")
		incidentIndexEscalationsIncidentIDFlag = incidentIndexEscalationsFlags.String("incidentid", "REQUIRED", "incident_id identifies an incident by ID.")
		incidentIndexEscalationsAPIVersionFlag = incidentIndexEscalationsFlags.String("api-version", "REQUIRED", "")
		incidentIndexEscalationsTokenFlag      = incidentIndexEscalationsFlags.String("token", "", "")

		incidentIndexResolutionsFlags          = flag.NewFlagSet("index-resolutions", flag.ExitOnError)
		incidentIndexResolutionsProjectIDFlag  = incidentIndexResolutionsFlags.String("projectid", "REQUIRED", "project_id identifies a project by ID.")
		incidentIndexResolutionsIncidentIDFlag = incidentIndexResolutionsFlags.String("incidentid", "REQUIRED", "incident_id identifies an incident by ID.")
		incidentIndexResolutionsAPIVersionFlag = incidentIndexResolutionsFlags.String("api-version", "REQUIRED", "")
		incidentIndexResolutionsTokenFlag      = incidentIndexResolutionsFlags.String("token", "", "")

		policyTemplateFlags = flag.NewFlagSet("policy-template", flag.ContinueOnError)

		policyTemplateCompileFlags          = flag.NewFlagSet("compile", flag.ExitOnError)
		policyTemplateCompileBodyFlag       = policyTemplateCompileFlags.String("body", "REQUIRED", "")
		policyTemplateCompileProjectIDFlag  = policyTemplateCompileFlags.String("projectid", "REQUIRED", "project_id identifies a project by ID.")
		policyTemplateCompileAPIVersionFlag = policyTemplateCompileFlags.String("api-version", "REQUIRED", "")
		policyTemplateCompileTokenFlag      = policyTemplateCompileFlags.String("token", "", "")

		policyTemplateUploadFlags          = flag.NewFlagSet("upload", flag.ExitOnError)
		policyTemplateUploadBodyFlag       = policyTemplateUploadFlags.String("body", "REQUIRED", "")
		policyTemplateUploadProjectIDFlag  = policyTemplateUploadFlags.String("projectid", "REQUIRED", "project_id identifies a project by ID.")
		policyTemplateUploadAPIVersionFlag = policyTemplateUploadFlags.String("api-version", "REQUIRED", "")
		policyTemplateUploadTokenFlag      = policyTemplateUploadFlags.String("token", "", "")

		policyTemplateUpdateFlags          = flag.NewFlagSet("update", flag.ExitOnError)
		policyTemplateUpdateBodyFlag       = policyTemplateUpdateFlags.String("body", "REQUIRED", "")
		policyTemplateUpdateProjectIDFlag  = policyTemplateUpdateFlags.String("projectid", "REQUIRED", "project_id identifies a project by ID.")
		policyTemplateUpdateTemplateIDFlag = policyTemplateUpdateFlags.String("templateid", "REQUIRED", "template_id identifies a policy template by ID.")
		policyTemplateUpdateAPIVersionFlag = policyTemplateUpdateFlags.String("api-version", "REQUIRED", "")
		policyTemplateUpdateTokenFlag      = policyTemplateUpdateFlags.String("token", "", "")

		policyTemplateRetrieveDataFlags          = flag.NewFlagSet("retrieve-data", flag.ExitOnError)
		policyTemplateRetrieveDataBodyFlag       = policyTemplateRetrieveDataFlags.String("body", "REQUIRED", "")
		policyTemplateRetrieveDataProjectIDFlag  = policyTemplateRetrieveDataFlags.String("projectid", "REQUIRED", "project_id identifies a project by ID.")
		policyTemplateRetrieveDataTemplateIDFlag = policyTemplateRetrieveDataFlags.String("templateid", "REQUIRED", "template_id identifies a policy template by ID.")
		policyTemplateRetrieveDataAPIVersionFlag = policyTemplateRetrieveDataFlags.String("api-version", "REQUIRED", "")
		policyTemplateRetrieveDataTokenFlag      = policyTemplateRetrieveDataFlags.String("token", "", "")

		policyTemplateShowFlags          = flag.NewFlagSet("show", flag.ExitOnError)
		policyTemplateShowProjectIDFlag  = policyTemplateShowFlags.String("projectid", "REQUIRED", "project_id identifies a project by ID.")
		policyTemplateShowTemplateIDFlag = policyTemplateShowFlags.String("templateid", "REQUIRED", "template_id identifies a policy template by ID.")
		policyTemplateShowViewFlag       = policyTemplateShowFlags.String("view", "", "")
		policyTemplateShowAPIVersionFlag = policyTemplateShowFlags.String("api-version", "REQUIRED", "")
		policyTemplateShowTokenFlag      = policyTemplateShowFlags.String("token", "", "")

		policyTemplateIndexFlags          = flag.NewFlagSet("index", flag.ExitOnError)
		policyTemplateIndexProjectIDFlag  = policyTemplateIndexFlags.String("projectid", "REQUIRED", "project_id identifies a project by ID.")
		policyTemplateIndexViewFlag       = policyTemplateIndexFlags.String("view", "", "")
		policyTemplateIndexAPIVersionFlag = policyTemplateIndexFlags.String("api-version", "REQUIRED", "")
		policyTemplateIndexEtagFlag       = policyTemplateIndexFlags.String("etag", "", "")
		policyTemplateIndexTokenFlag      = policyTemplateIndexFlags.String("token", "", "")

		policyTemplateDeleteFlags          = flag.NewFlagSet("delete", flag.ExitOnError)
		policyTemplateDeleteProjectIDFlag  = policyTemplateDeleteFlags.String("projectid", "REQUIRED", "project_id identifies a project by ID.")
		policyTemplateDeleteTemplateIDFlag = policyTemplateDeleteFlags.String("templateid", "REQUIRED", "template_id identifies a policy template by ID.")
		policyTemplateDeleteAPIVersionFlag = policyTemplateDeleteFlags.String("api-version", "REQUIRED", "")
		policyTemplateDeleteTokenFlag      = policyTemplateDeleteFlags.String("token", "", "")

		publishedTemplateFlags = flag.NewFlagSet("published-template", flag.ContinueOnError)

		publishedTemplateCreateFlags          = flag.NewFlagSet("create", flag.ExitOnError)
		publishedTemplateCreateBodyFlag       = publishedTemplateCreateFlags.String("body", "REQUIRED", "")
		publishedTemplateCreateOrgIDFlag      = publishedTemplateCreateFlags.String("orgid", "REQUIRED", "org_id identifies an organization by ID.")
		publishedTemplateCreateAPIVersionFlag = publishedTemplateCreateFlags.String("api-version", "REQUIRED", "")
		publishedTemplateCreateTokenFlag      = publishedTemplateCreateFlags.String("token", "", "")

		publishedTemplateUpdateFlags          = flag.NewFlagSet("update", flag.ExitOnError)
		publishedTemplateUpdateBodyFlag       = publishedTemplateUpdateFlags.String("body", "REQUIRED", "")
		publishedTemplateUpdateOrgIDFlag      = publishedTemplateUpdateFlags.String("orgid", "REQUIRED", "org_id identifies an organization by ID.")
		publishedTemplateUpdateTemplateIDFlag = publishedTemplateUpdateFlags.String("templateid", "REQUIRED", "template_id identifies a published template by ID.")
		publishedTemplateUpdateAPIVersionFlag = publishedTemplateUpdateFlags.String("api-version", "REQUIRED", "")
		publishedTemplateUpdateTokenFlag      = publishedTemplateUpdateFlags.String("token", "", "")

		publishedTemplateHideFlags          = flag.NewFlagSet("hide", flag.ExitOnError)
		publishedTemplateHideOrgIDFlag      = publishedTemplateHideFlags.String("orgid", "REQUIRED", "org_id identifies an organization by ID.")
		publishedTemplateHideTemplateIDFlag = publishedTemplateHideFlags.String("templateid", "REQUIRED", "template_id identifies a published template by ID.")
		publishedTemplateHideAPIVersionFlag = publishedTemplateHideFlags.String("api-version", "REQUIRED", "")
		publishedTemplateHideTokenFlag      = publishedTemplateHideFlags.String("token", "", "")

		publishedTemplateUnhideFlags          = flag.NewFlagSet("unhide", flag.ExitOnError)
		publishedTemplateUnhideOrgIDFlag      = publishedTemplateUnhideFlags.String("orgid", "REQUIRED", "org_id identifies an organization by ID.")
		publishedTemplateUnhideTemplateIDFlag = publishedTemplateUnhideFlags.String("templateid", "REQUIRED", "template_id identifies a published template by ID.")
		publishedTemplateUnhideAPIVersionFlag = publishedTemplateUnhideFlags.String("api-version", "REQUIRED", "")
		publishedTemplateUnhideTokenFlag      = publishedTemplateUnhideFlags.String("token", "", "")

		publishedTemplateDeleteFlags          = flag.NewFlagSet("delete", flag.ExitOnError)
		publishedTemplateDeleteOrgIDFlag      = publishedTemplateDeleteFlags.String("orgid", "REQUIRED", "org_id identifies an organization by ID.")
		publishedTemplateDeleteTemplateIDFlag = publishedTemplateDeleteFlags.String("templateid", "REQUIRED", "template_id identifies a published template by ID.")
		publishedTemplateDeleteAPIVersionFlag = publishedTemplateDeleteFlags.String("api-version", "REQUIRED", "")
		publishedTemplateDeleteTokenFlag      = publishedTemplateDeleteFlags.String("token", "", "")

		publishedTemplateShowFlags          = flag.NewFlagSet("show", flag.ExitOnError)
		publishedTemplateShowOrgIDFlag      = publishedTemplateShowFlags.String("orgid", "REQUIRED", "org_id identifies an organization by ID.")
		publishedTemplateShowTemplateIDFlag = publishedTemplateShowFlags.String("templateid", "REQUIRED", "template_id identifies a published template by ID.")
		publishedTemplateShowViewFlag       = publishedTemplateShowFlags.String("view", "", "")
		publishedTemplateShowAPIVersionFlag = publishedTemplateShowFlags.String("api-version", "REQUIRED", "")
		publishedTemplateShowTokenFlag      = publishedTemplateShowFlags.String("token", "", "")

		publishedTemplateIndexFlags          = flag.NewFlagSet("index", flag.ExitOnError)
		publishedTemplateIndexOrgIDFlag      = publishedTemplateIndexFlags.String("orgid", "REQUIRED", "org_id identifies an organization by ID.")
		publishedTemplateIndexViewFlag       = publishedTemplateIndexFlags.String("view", "", "")
		publishedTemplateIndexShowHiddenFlag = publishedTemplateIndexFlags.String("show-hidden", "", "")
		publishedTemplateIndexAPIVersionFlag = publishedTemplateIndexFlags.String("api-version", "REQUIRED", "")
		publishedTemplateIndexEtagFlag       = publishedTemplateIndexFlags.String("etag", "", "")
		publishedTemplateIndexTokenFlag      = publishedTemplateIndexFlags.String("token", "", "")

		healthFlags = flag.NewFlagSet("health", flag.ContinueOnError)

		healthCheckFlags = flag.NewFlagSet("check", flag.ExitOnError)

		healthReportFlags = flag.NewFlagSet("report", flag.ExitOnError)
	)
	appliedPolicyFlags.Usage = appliedPolicyUsage
	appliedPolicyCreateFlags.Usage = appliedPolicyCreateUsage
	appliedPolicyDeleteFlags.Usage = appliedPolicyDeleteUsage
	appliedPolicyShowFlags.Usage = appliedPolicyShowUsage
	appliedPolicyShowStatusFlags.Usage = appliedPolicyShowStatusUsage
	appliedPolicyShowLogFlags.Usage = appliedPolicyShowLogUsage
	appliedPolicyIndexFlags.Usage = appliedPolicyIndexUsage
	appliedPolicyEvaluateFlags.Usage = appliedPolicyEvaluateUsage

	approvalFlags.Usage = approvalUsage
	approvalShowFlags.Usage = approvalShowUsage
	approvalIndexFlags.Usage = approvalIndexUsage
	approvalApproveFlags.Usage = approvalApproveUsage
	approvalDenyFlags.Usage = approvalDenyUsage

	incidentFlags.Usage = incidentUsage
	incidentShowFlags.Usage = incidentShowUsage
	incidentIndexFlags.Usage = incidentIndexUsage
	incidentResolveFlags.Usage = incidentResolveUsage
	incidentIndexEscalationsFlags.Usage = incidentIndexEscalationsUsage
	incidentIndexResolutionsFlags.Usage = incidentIndexResolutionsUsage

	policyTemplateFlags.Usage = policyTemplateUsage
	policyTemplateCompileFlags.Usage = policyTemplateCompileUsage
	policyTemplateUploadFlags.Usage = policyTemplateUploadUsage
	policyTemplateUpdateFlags.Usage = policyTemplateUpdateUsage
	policyTemplateRetrieveDataFlags.Usage = policyTemplateRetrieveDataUsage
	policyTemplateShowFlags.Usage = policyTemplateShowUsage
	policyTemplateIndexFlags.Usage = policyTemplateIndexUsage
	policyTemplateDeleteFlags.Usage = policyTemplateDeleteUsage

	publishedTemplateFlags.Usage = publishedTemplateUsage
	publishedTemplateCreateFlags.Usage = publishedTemplateCreateUsage
	publishedTemplateUpdateFlags.Usage = publishedTemplateUpdateUsage
	publishedTemplateHideFlags.Usage = publishedTemplateHideUsage
	publishedTemplateUnhideFlags.Usage = publishedTemplateUnhideUsage
	publishedTemplateDeleteFlags.Usage = publishedTemplateDeleteUsage
	publishedTemplateShowFlags.Usage = publishedTemplateShowUsage
	publishedTemplateIndexFlags.Usage = publishedTemplateIndexUsage

	healthFlags.Usage = healthUsage
	healthCheckFlags.Usage = healthCheckUsage
	healthReportFlags.Usage = healthReportUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if len(os.Args) < flag.NFlag()+3 {
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = os.Args[1+flag.NFlag()]
		switch svcn {
		case "applied-policy":
			svcf = appliedPolicyFlags
		case "approval":
			svcf = approvalFlags
		case "incident":
			svcf = incidentFlags
		case "policy-template":
			svcf = policyTemplateFlags
		case "published-template":
			svcf = publishedTemplateFlags
		case "health":
			svcf = healthFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(os.Args[2+flag.NFlag():]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = os.Args[2+flag.NFlag()+svcf.NFlag()]
		switch svcn {
		case "applied-policy":
			switch epn {
			case "create":
				epf = appliedPolicyCreateFlags

			case "delete":
				epf = appliedPolicyDeleteFlags

			case "show":
				epf = appliedPolicyShowFlags

			case "show-status":
				epf = appliedPolicyShowStatusFlags

			case "show-log":
				epf = appliedPolicyShowLogFlags

			case "index":
				epf = appliedPolicyIndexFlags

			case "evaluate":
				epf = appliedPolicyEvaluateFlags

			}

		case "approval":
			switch epn {
			case "show":
				epf = approvalShowFlags

			case "index":
				epf = approvalIndexFlags

			case "approve":
				epf = approvalApproveFlags

			case "deny":
				epf = approvalDenyFlags

			}

		case "incident":
			switch epn {
			case "show":
				epf = incidentShowFlags

			case "index":
				epf = incidentIndexFlags

			case "resolve":
				epf = incidentResolveFlags

			case "index-escalations":
				epf = incidentIndexEscalationsFlags

			case "index-resolutions":
				epf = incidentIndexResolutionsFlags

			}

		case "policy-template":
			switch epn {
			case "compile":
				epf = policyTemplateCompileFlags

			case "upload":
				epf = policyTemplateUploadFlags

			case "update":
				epf = policyTemplateUpdateFlags

			case "retrieve-data":
				epf = policyTemplateRetrieveDataFlags

			case "show":
				epf = policyTemplateShowFlags

			case "index":
				epf = policyTemplateIndexFlags

			case "delete":
				epf = policyTemplateDeleteFlags

			}

		case "published-template":
			switch epn {
			case "create":
				epf = publishedTemplateCreateFlags

			case "update":
				epf = publishedTemplateUpdateFlags

			case "hide":
				epf = publishedTemplateHideFlags

			case "unhide":
				epf = publishedTemplateUnhideFlags

			case "delete":
				epf = publishedTemplateDeleteFlags

			case "show":
				epf = publishedTemplateShowFlags

			case "index":
				epf = publishedTemplateIndexFlags

			}

		case "health":
			switch epn {
			case "check":
				epf = healthCheckFlags

			case "report":
				epf = healthReportFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if len(os.Args) > 2+flag.NFlag()+svcf.NFlag() {
		if err := epf.Parse(os.Args[3+flag.NFlag()+svcf.NFlag():]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "applied-policy":
			c := appliedpolicyc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create":
				endpoint = c.Create()
				data, err = appliedpolicyc.BuildCreatePayload(*appliedPolicyCreateBodyFlag, *appliedPolicyCreateProjectIDFlag, *appliedPolicyCreateAPIVersionFlag, *appliedPolicyCreateTokenFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = appliedpolicyc.BuildDeletePayload(*appliedPolicyDeleteProjectIDFlag, *appliedPolicyDeletePolicyIDFlag, *appliedPolicyDeleteAPIVersionFlag, *appliedPolicyDeleteTokenFlag)
			case "show":
				endpoint = c.Show()
				data, err = appliedpolicyc.BuildShowPayload(*appliedPolicyShowProjectIDFlag, *appliedPolicyShowPolicyIDFlag, *appliedPolicyShowViewFlag, *appliedPolicyShowAPIVersionFlag, *appliedPolicyShowTokenFlag)
			case "show-status":
				endpoint = c.ShowStatus()
				data, err = appliedpolicyc.BuildShowStatusPayload(*appliedPolicyShowStatusProjectIDFlag, *appliedPolicyShowStatusPolicyIDFlag, *appliedPolicyShowStatusAPIVersionFlag, *appliedPolicyShowStatusTokenFlag)
			case "show-log":
				endpoint = c.ShowLog()
				data, err = appliedpolicyc.BuildShowLogPayload(*appliedPolicyShowLogProjectIDFlag, *appliedPolicyShowLogPolicyIDFlag, *appliedPolicyShowLogAPIVersionFlag, *appliedPolicyShowLogEtagFlag, *appliedPolicyShowLogTokenFlag)
			case "index":
				endpoint = c.Index()
				data, err = appliedpolicyc.BuildIndexPayload(*appliedPolicyIndexProjectIDFlag, *appliedPolicyIndexViewFlag, *appliedPolicyIndexNameFlag, *appliedPolicyIndexAPIVersionFlag, *appliedPolicyIndexEtagFlag, *appliedPolicyIndexTokenFlag)
			case "evaluate":
				endpoint = c.Evaluate()
				data, err = appliedpolicyc.BuildEvaluatePayload(*appliedPolicyEvaluateProjectIDFlag, *appliedPolicyEvaluatePolicyIDFlag, *appliedPolicyEvaluateAPIVersionFlag, *appliedPolicyEvaluateTokenFlag)
			}
		case "approval":
			c := approvalc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "show":
				endpoint = c.Show()
				data, err = approvalc.BuildShowPayload(*approvalShowProjectIDFlag, *approvalShowApprovalRequestIDFlag, *approvalShowViewFlag, *approvalShowAPIVersionFlag, *approvalShowTokenFlag)
			case "index":
				endpoint = c.Index()
				data, err = approvalc.BuildIndexPayload(*approvalIndexProjectIDFlag, *approvalIndexViewFlag, *approvalIndexIDFlag, *approvalIndexSubjectKindFlag, *approvalIndexSubjectHrefFlag, *approvalIndexStatusFlag, *approvalIndexAPIVersionFlag, *approvalIndexEtagFlag, *approvalIndexTokenFlag)
			case "approve":
				endpoint = c.Approve()
				data, err = approvalc.BuildApprovePayload(*approvalApproveBodyFlag, *approvalApproveProjectIDFlag, *approvalApproveApprovalRequestIDFlag, *approvalApproveAPIVersionFlag, *approvalApproveTokenFlag)
			case "deny":
				endpoint = c.Deny()
				data, err = approvalc.BuildDenyPayload(*approvalDenyBodyFlag, *approvalDenyProjectIDFlag, *approvalDenyApprovalRequestIDFlag, *approvalDenyAPIVersionFlag, *approvalDenyTokenFlag)
			}
		case "incident":
			c := incidentc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "show":
				endpoint = c.Show()
				data, err = incidentc.BuildShowPayload(*incidentShowProjectIDFlag, *incidentShowIncidentIDFlag, *incidentShowViewFlag, *incidentShowAPIVersionFlag, *incidentShowEtagFlag, *incidentShowTokenFlag)
			case "index":
				endpoint = c.Index()
				data, err = incidentc.BuildIndexPayload(*incidentIndexProjectIDFlag, *incidentIndexViewFlag, *incidentIndexStateFlag, *incidentIndexAppliedPolicyIDFlag, *incidentIndexAPIVersionFlag, *incidentIndexEtagFlag, *incidentIndexTokenFlag)
			case "resolve":
				endpoint = c.Resolve()
				data, err = incidentc.BuildResolvePayload(*incidentResolveProjectIDFlag, *incidentResolveIncidentIDFlag, *incidentResolveAPIVersionFlag, *incidentResolveEtagFlag, *incidentResolveTokenFlag)
			case "index-escalations":
				endpoint = c.IndexEscalations()
				data, err = incidentc.BuildIndexEscalationsPayload(*incidentIndexEscalationsProjectIDFlag, *incidentIndexEscalationsIncidentIDFlag, *incidentIndexEscalationsAPIVersionFlag, *incidentIndexEscalationsTokenFlag)
			case "index-resolutions":
				endpoint = c.IndexResolutions()
				data, err = incidentc.BuildIndexResolutionsPayload(*incidentIndexResolutionsProjectIDFlag, *incidentIndexResolutionsIncidentIDFlag, *incidentIndexResolutionsAPIVersionFlag, *incidentIndexResolutionsTokenFlag)
			}
		case "policy-template":
			c := policytemplatec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "compile":
				endpoint = c.Compile()
				data, err = policytemplatec.BuildCompilePayload(*policyTemplateCompileBodyFlag, *policyTemplateCompileProjectIDFlag, *policyTemplateCompileAPIVersionFlag, *policyTemplateCompileTokenFlag)
			case "upload":
				endpoint = c.Upload()
				data, err = policytemplatec.BuildUploadPayload(*policyTemplateUploadBodyFlag, *policyTemplateUploadProjectIDFlag, *policyTemplateUploadAPIVersionFlag, *policyTemplateUploadTokenFlag)
			case "update":
				endpoint = c.Update()
				data, err = policytemplatec.BuildUpdatePayload(*policyTemplateUpdateBodyFlag, *policyTemplateUpdateProjectIDFlag, *policyTemplateUpdateTemplateIDFlag, *policyTemplateUpdateAPIVersionFlag, *policyTemplateUpdateTokenFlag)
			case "retrieve-data":
				endpoint = c.RetrieveData()
				data, err = policytemplatec.BuildRetrieveDataPayload(*policyTemplateRetrieveDataBodyFlag, *policyTemplateRetrieveDataProjectIDFlag, *policyTemplateRetrieveDataTemplateIDFlag, *policyTemplateRetrieveDataAPIVersionFlag, *policyTemplateRetrieveDataTokenFlag)
			case "show":
				endpoint = c.Show()
				data, err = policytemplatec.BuildShowPayload(*policyTemplateShowProjectIDFlag, *policyTemplateShowTemplateIDFlag, *policyTemplateShowViewFlag, *policyTemplateShowAPIVersionFlag, *policyTemplateShowTokenFlag)
			case "index":
				endpoint = c.Index()
				data, err = policytemplatec.BuildIndexPayload(*policyTemplateIndexProjectIDFlag, *policyTemplateIndexViewFlag, *policyTemplateIndexAPIVersionFlag, *policyTemplateIndexEtagFlag, *policyTemplateIndexTokenFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = policytemplatec.BuildDeletePayload(*policyTemplateDeleteProjectIDFlag, *policyTemplateDeleteTemplateIDFlag, *policyTemplateDeleteAPIVersionFlag, *policyTemplateDeleteTokenFlag)
			}
		case "published-template":
			c := publishedtemplatec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create":
				endpoint = c.Create()
				data, err = publishedtemplatec.BuildCreatePayload(*publishedTemplateCreateBodyFlag, *publishedTemplateCreateOrgIDFlag, *publishedTemplateCreateAPIVersionFlag, *publishedTemplateCreateTokenFlag)
			case "update":
				endpoint = c.Update()
				data, err = publishedtemplatec.BuildUpdatePayload(*publishedTemplateUpdateBodyFlag, *publishedTemplateUpdateOrgIDFlag, *publishedTemplateUpdateTemplateIDFlag, *publishedTemplateUpdateAPIVersionFlag, *publishedTemplateUpdateTokenFlag)
			case "hide":
				endpoint = c.Hide()
				data, err = publishedtemplatec.BuildHidePayload(*publishedTemplateHideOrgIDFlag, *publishedTemplateHideTemplateIDFlag, *publishedTemplateHideAPIVersionFlag, *publishedTemplateHideTokenFlag)
			case "unhide":
				endpoint = c.Unhide()
				data, err = publishedtemplatec.BuildUnhidePayload(*publishedTemplateUnhideOrgIDFlag, *publishedTemplateUnhideTemplateIDFlag, *publishedTemplateUnhideAPIVersionFlag, *publishedTemplateUnhideTokenFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = publishedtemplatec.BuildDeletePayload(*publishedTemplateDeleteOrgIDFlag, *publishedTemplateDeleteTemplateIDFlag, *publishedTemplateDeleteAPIVersionFlag, *publishedTemplateDeleteTokenFlag)
			case "show":
				endpoint = c.Show()
				data, err = publishedtemplatec.BuildShowPayload(*publishedTemplateShowOrgIDFlag, *publishedTemplateShowTemplateIDFlag, *publishedTemplateShowViewFlag, *publishedTemplateShowAPIVersionFlag, *publishedTemplateShowTokenFlag)
			case "index":
				endpoint = c.Index()
				data, err = publishedtemplatec.BuildIndexPayload(*publishedTemplateIndexOrgIDFlag, *publishedTemplateIndexViewFlag, *publishedTemplateIndexShowHiddenFlag, *publishedTemplateIndexAPIVersionFlag, *publishedTemplateIndexEtagFlag, *publishedTemplateIndexTokenFlag)
			}
		case "health":
			c := healthc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "check":
				endpoint = c.Check()
				data = nil
			case "report":
				endpoint = c.Report()
				data = nil
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// applied-policyUsage displays the usage of the applied-policy command and its
// subcommands.
func appliedPolicyUsage() {
	fmt.Fprintf(os.Stderr, `Service is the AppliedPolicy service interface.
Usage:
    %s [globalflags] applied-policy COMMAND [flags]

COMMAND:
    create: Create applies a policy template to a given project. The applied policy will continually run until deleted.
    delete: Delete stops and deletes an applied policy.
    show: Show retrieves the details of an applied policy.
    show-status: ShowStatus retrieves the evaluation status details of an applied policy.
    show-log: ShowLog retrieves the last evaluation log of an applied policy. *The content type is "text/markdown"*.
    index: Index retrieves the list of applied policies in a project.
    evaluate: Evaluate executes an applied policy evaluation on demand. It does not affect the normal execution schedule.

Additional help:
    %s applied-policy COMMAND --help
`, os.Args[0], os.Args[0])
}
func appliedPolicyCreateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] applied-policy create -body JSON -projectid UINT -api-version STRING -token STRING

Create applies a policy template to a given project. The applied policy will continually run until deleted.
    -body JSON: 
    -projectid UINT: project_id identifies a project by ID.
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` applied-policy create --body '{
      "description": "Delete unattached volumes after 24 hours in US-East.",
      "dry_run": false,
      "frequency": "daily",
      "name": "us_east_unattached_volumes",
      "options": [
         {
            "name": "cloud_vendor",
            "value": "AWS"
         },
         {
            "name": "email_list",
            "value": [
               "person1@domain.com",
               "person2@domain.com"
            ]
         }
      ],
      "template_href": "/api/governance/projects/60073/policy_templates/5b06ead5e0dacc007058c784"
   }' --projectid 60073 --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func appliedPolicyDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] applied-policy delete -projectid UINT -policyid STRING -api-version STRING -token STRING

Delete stops and deletes an applied policy.
    -projectid UINT: project_id identifies a project by ID.
    -policyid STRING: policy_id identifies an applied policy by ID.
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` applied-policy delete --projectid 60073 --policyid "5b06ead5e0dacc007058c784" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func appliedPolicyShowUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] applied-policy show -projectid UINT -policyid STRING -view STRING -api-version STRING -token STRING

Show retrieves the details of an applied policy.
    -projectid UINT: project_id identifies a project by ID.
    -policyid STRING: policy_id identifies an applied policy by ID.
    -view STRING: 
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` applied-policy show --projectid 60073 --policyid "5b06ead5e0dacc007058c784" --view "default" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func appliedPolicyShowStatusUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] applied-policy show-status -projectid UINT -policyid STRING -api-version STRING -token STRING

ShowStatus retrieves the evaluation status details of an applied policy.
    -projectid UINT: project_id identifies a project by ID.
    -policyid STRING: policy_id identifies an applied policy by ID.
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` applied-policy show-status --projectid 60073 --policyid "5b06ead5e0dacc007058c784" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func appliedPolicyShowLogUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] applied-policy show-log -projectid UINT -policyid STRING -api-version STRING -etag STRING -token STRING

ShowLog retrieves the last evaluation log of an applied policy. *The content type is "text/markdown"*.
    -projectid UINT: project_id identifies a project by ID.
    -policyid STRING: policy_id identifies an applied policy by ID.
    -api-version STRING: 
    -etag STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` applied-policy show-log --projectid 60073 --policyid "5b06ead5e0dacc007058c784" --api-version "1.0" --etag "\"d41d8cd98f00b204e9800998ecf8427e\"" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func appliedPolicyIndexUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] applied-policy index -projectid UINT -view STRING -name JSON -api-version STRING -etag STRING -token STRING

Index retrieves the list of applied policies in a project.
    -projectid UINT: project_id identifies a project by ID.
    -view STRING: 
    -name JSON: 
    -api-version STRING: 
    -etag STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` applied-policy index --projectid 60073 --view "default" --name '[
      "Tag Checker Policy"
   ]' --api-version "1.0" --etag "\"d41d8cd98f00b204e9800998ecf8427e\"" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func appliedPolicyEvaluateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] applied-policy evaluate -projectid UINT -policyid STRING -api-version STRING -token STRING

Evaluate executes an applied policy evaluation on demand. It does not affect the normal execution schedule.
    -projectid UINT: project_id identifies a project by ID.
    -policyid STRING: policy_id identifies an applied policy by ID.
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` applied-policy evaluate --projectid 60073 --policyid "5b06ead5e0dacc007058c784" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

// approvalUsage displays the usage of the approval command and its subcommands.
func approvalUsage() {
	fmt.Fprintf(os.Stderr, `Service is the Approval service interface.
Usage:
    %s [globalflags] approval COMMAND [flags]

COMMAND:
    show: Show retrieves the details of an approval request.
    index: Index retrieves the list of approval requests in a project.
    approve: Approve approves a single approval request.
    deny: Deny denies a single approval request.

Additional help:
    %s approval COMMAND --help
`, os.Args[0], os.Args[0])
}
func approvalShowUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] approval show -projectid UINT -approval-requestid STRING -view STRING -api-version STRING -token STRING

Show retrieves the details of an approval request.
    -projectid UINT: project_id identifies a project by ID.
    -approval-requestid STRING: approval_request_id identifes an approval by its ID.
    -view STRING: 
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` approval show --projectid 60073 --approval-requestid "5b36ad26d4c1990070df726a" --view "default" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func approvalIndexUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] approval index -projectid UINT -view STRING -id JSON -subject-kind STRING -subject-href STRING -status JSON -api-version STRING -etag STRING -token STRING

Index retrieves the list of approval requests in a project.
    -projectid UINT: project_id identifies a project by ID.
    -view STRING: 
    -id JSON: 
    -subject-kind STRING: 
    -subject-href STRING: 
    -status JSON: 
    -api-version STRING: 
    -etag STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` approval index --projectid 60073 --view "default" --id '[
      "5b36ad26d4c1990070df726a",
      "5b36ad26d4c2000070df726a"
   ]' --subject-kind "gov#incident" --subject-href "/api/governance/projects/60073/5b36ad26d4c1990070df734a" --status '[
      "pending"
   ]' --api-version "1.0" --etag "d41d8cd98f00b204e9800998ecf8427e" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func approvalApproveUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] approval approve -body JSON -projectid UINT -approval-requestid STRING -api-version STRING -token STRING

Approve approves a single approval request.
    -body JSON: 
    -projectid UINT: project_id identifies a project by ID.
    -approval-requestid STRING: approval_request_id identifes an approval request by its ID.
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` approval approve --body '{
      "options": [
         {
            "name": "excluded_tags",
            "value": [
               "env:name=staging",
               "custom:save=true"
            ]
         }
      ]
   }' --projectid 60073 --approval-requestid "5b36ad26d4c1990070df726a" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func approvalDenyUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] approval deny -body JSON -projectid UINT -approval-requestid STRING -api-version STRING -token STRING

Deny denies a single approval request.
    -body JSON: 
    -projectid UINT: project_id identifies a project by ID.
    -approval-requestid STRING: approval_request_id identifes an approval request by its ID.
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` approval deny --body '{
      "comment": "The volumes need to be backed up."
   }' --projectid 60073 --approval-requestid "5b36ad26d4c1990070df726a" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

// incidentUsage displays the usage of the incident command and its subcommands.
func incidentUsage() {
	fmt.Fprintf(os.Stderr, `Service is the Incident service interface.
Usage:
    %s [globalflags] incident COMMAND [flags]

COMMAND:
    show: Show retrieves the details of an incident.
    index: Index retrieves the list of incidents in a project.
    resolve: Resolve resolves an incident by setting it to an inactive state, indicating that it has been addressed.
    index-escalations: IndexEscalations retrieves the status details of all of the escalations for an incident.
    index-resolutions: IndexResolutions retrieves the status details of all of the resolutions for an incident.

Additional help:
    %s incident COMMAND --help
`, os.Args[0], os.Args[0])
}
func incidentShowUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] incident show -projectid UINT -incidentid STRING -view STRING -api-version STRING -etag STRING -token STRING

Show retrieves the details of an incident.
    -projectid UINT: project_id identifies a project by ID.
    -incidentid STRING: incident_id identifies an incident by ID.
    -view STRING: 
    -api-version STRING: 
    -etag STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` incident show --projectid 60073 --incidentid "5b06ead5e0dacc007058c784" --view "default" --api-version "1.0" --etag "\"d41d8cd98f00b204e9800998ecf8427e\"" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func incidentIndexUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] incident index -projectid UINT -view STRING -state JSON -applied-policyid STRING -api-version STRING -etag STRING -token STRING

Index retrieves the list of incidents in a project.
    -projectid UINT: project_id identifies a project by ID.
    -view STRING: 
    -state JSON: 
    -applied-policyid STRING: 
    -api-version STRING: 
    -etag STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` incident index --projectid 60073 --view "default" --state '[
      "triggered"
   ]' --applied-policyid "5b06ead5e0dacc007058c784" --api-version "1.0" --etag "\"d41d8cd98f00b204e9800998ecf8427e\"" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func incidentResolveUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] incident resolve -projectid UINT -incidentid STRING -api-version STRING -etag STRING -token STRING

Resolve resolves an incident by setting it to an inactive state, indicating that it has been addressed.
    -projectid UINT: project_id identifies a project by ID.
    -incidentid STRING: incident_id identifies an incident by ID.
    -api-version STRING: 
    -etag STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` incident resolve --projectid 60073 --incidentid "5b06ead5e0dacc007058c784" --api-version "1.0" --etag "\"d41d8cd98f00b204e9800998ecf8427e\"" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func incidentIndexEscalationsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] incident index-escalations -projectid UINT -incidentid STRING -api-version STRING -token STRING

IndexEscalations retrieves the status details of all of the escalations for an incident.
    -projectid UINT: project_id identifies a project by ID.
    -incidentid STRING: incident_id identifies an incident by ID.
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` incident index-escalations --projectid 60073 --incidentid "5b06ead5e0dacc007058c784" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func incidentIndexResolutionsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] incident index-resolutions -projectid UINT -incidentid STRING -api-version STRING -token STRING

IndexResolutions retrieves the status details of all of the resolutions for an incident.
    -projectid UINT: project_id identifies a project by ID.
    -incidentid STRING: incident_id identifies an incident by ID.
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` incident index-resolutions --projectid 60073 --incidentid "5b06ead5e0dacc007058c784" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

// policy-templateUsage displays the usage of the policy-template command and
// its subcommands.
func policyTemplateUsage() {
	fmt.Fprintf(os.Stderr, `Service is the PolicyTemplate service interface.
Usage:
    %s [globalflags] policy-template COMMAND [flags]

COMMAND:
    compile: Compile compiles a policy template for a project. This is only to be used for checking the syntax of a policy template; the results are not stored.
    upload: Upload uploads a policy template for a project, first compiling it. On failure, an array of syntax errors will be returned.
    update: Update updates a policy template in place for a project, by replacing it. Any existing applied policies using the template will not be updated; they must be deleted and recreated again.
    retrieve-data: Retrieve Data retrieves the data sources specified in a give policy template.
    show: Show retrieves the details of a policy template.
    index: IndexPolicyTemplates retrieves the list of policy templates in a project.
    delete: Delete deletes a policy template from a project. Deleting a policy template will not delete any applied policies created from the template, they must be stopped explicitly.

Additional help:
    %s policy-template COMMAND --help
`, os.Args[0], os.Args[0])
}
func policyTemplateCompileUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] policy-template compile -body JSON -projectid UINT -api-version STRING -token STRING

Compile compiles a policy template for a project. This is only to be used for checking the syntax of a policy template; the results are not stored.
    -body JSON: 
    -projectid UINT: project_id identifies a project by ID.
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` policy-template compile --body '{
      "filename": "file.pt",
      "source": "policy unattached_volumes do\n\t\t\t\t\t# ...\n\t\t\t\t\tend"
   }' --projectid 60073 --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func policyTemplateUploadUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] policy-template upload -body JSON -projectid UINT -api-version STRING -token STRING

Upload uploads a policy template for a project, first compiling it. On failure, an array of syntax errors will be returned.
    -body JSON: 
    -projectid UINT: project_id identifies a project by ID.
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` policy-template upload --body '{
      "filename": "file.pt",
      "source": "policy unattached_volumes do\n\t\t\t\t\t# ...\n\t\t\t\t\tend"
   }' --projectid 60073 --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func policyTemplateUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] policy-template update -body JSON -projectid UINT -templateid STRING -api-version STRING -token STRING

Update updates a policy template in place for a project, by replacing it. Any existing applied policies using the template will not be updated; they must be deleted and recreated again.
    -body JSON: 
    -projectid UINT: project_id identifies a project by ID.
    -templateid STRING: template_id identifies a policy template by ID.
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` policy-template update --body '{
      "filename": "tag_checker.pt",
      "source": "policy unattached_volumes do\n\t\t\t\t\t# ...\n\t\t\t\t\tend"
   }' --projectid 60073 --templateid "5b06ead5e0dacc007058c784" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func policyTemplateRetrieveDataUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] policy-template retrieve-data -body JSON -projectid UINT -templateid STRING -api-version STRING -token STRING

Retrieve Data retrieves the data sources specified in a give policy template.
    -body JSON: 
    -projectid UINT: project_id identifies a project by ID.
    -templateid STRING: template_id identifies a policy template by ID.
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` policy-template retrieve-data --body '{
      "names": [
         "azure_resources"
      ],
      "options": [
         {
            "name": "cloud_vendor",
            "value": "AWS"
         },
         {
            "name": "email_list",
            "value": [
               "person1@domain.com",
               "person2@domain.com"
            ]
         }
      ]
   }' --projectid 60073 --templateid "5b06ead5e0dacc007058c784" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func policyTemplateShowUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] policy-template show -projectid UINT -templateid STRING -view STRING -api-version STRING -token STRING

Show retrieves the details of a policy template.
    -projectid UINT: project_id identifies a project by ID.
    -templateid STRING: template_id identifies a policy template by ID.
    -view STRING: 
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` policy-template show --projectid 60073 --templateid "5b06ead5e0dacc007058c784" --view "default" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func policyTemplateIndexUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] policy-template index -projectid UINT -view STRING -api-version STRING -etag STRING -token STRING

IndexPolicyTemplates retrieves the list of policy templates in a project.
    -projectid UINT: project_id identifies a project by ID.
    -view STRING: 
    -api-version STRING: 
    -etag STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` policy-template index --projectid 60073 --view "default" --api-version "1.0" --etag "\"d41d8cd98f00b204e9800998ecf8427e\"" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func policyTemplateDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] policy-template delete -projectid UINT -templateid STRING -api-version STRING -token STRING

Delete deletes a policy template from a project. Deleting a policy template will not delete any applied policies created from the template, they must be stopped explicitly.
    -projectid UINT: project_id identifies a project by ID.
    -templateid STRING: template_id identifies a policy template by ID.
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` policy-template delete --projectid 60073 --templateid "5b06ead5e0dacc007058c784" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

// published-templateUsage displays the usage of the published-template command
// and its subcommands.
func publishedTemplateUsage() {
	fmt.Fprintf(os.Stderr, `Service is the PublishedTemplate service interface.
Usage:
    %s [globalflags] published-template COMMAND [flags]

COMMAND:
    create: Create creates an organization-scoped published template from a project-scoped policy template.
    update: Update updates a published template in place for an organization, by replacing it. Any existing applied policies using the template will not be updated; they must be deleted and recreated again.
    hide: Hide hides a RightScale built-in template from an organization.
    unhide: Unhide unhides a RightScale built-in template from an organization.
    delete: Delete deletes a published template from an organization. Deleting a published template will not delete any applied policies created from the template, they must be stopped explicitly.
    show: Show retrieves the details of a published template.
    index: Index retrieves the list of published templates in an organization.

Additional help:
    %s published-template COMMAND --help
`, os.Args[0], os.Args[0])
}
func publishedTemplateCreateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] published-template create -body JSON -orgid UINT -api-version STRING -token STRING

Create creates an organization-scoped published template from a project-scoped policy template.
    -body JSON: 
    -orgid UINT: org_id identifies an organization by ID.
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` published-template create --body '{
      "description": "Delete unattached volumes after 24 hours in US-East.",
      "dry_run": false,
      "frequency": "daily",
      "name": "us_east_unattached_volumes",
      "options": [
         {
            "name": "cloud_vendor",
            "value": "AWS"
         },
         {
            "name": "email_list",
            "value": [
               "person1@domain.com",
               "person2@domain.com"
            ]
         }
      ],
      "template_href": "/api/governance/projects/60073/policy_templates/5b06ead5e0dacc007058c784"
   }' --orgid 1105 --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func publishedTemplateUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] published-template update -body JSON -orgid UINT -templateid STRING -api-version STRING -token STRING

Update updates a published template in place for an organization, by replacing it. Any existing applied policies using the template will not be updated; they must be deleted and recreated again.
    -body JSON: 
    -orgid UINT: org_id identifies an organization by ID.
    -templateid STRING: template_id identifies a published template by ID.
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` published-template update --body '{
      "filename": "tag_checker.pt",
      "source": "policy unattached_volumes do\n\t\t\t\t\t# ...\n\t\t\t\t\tend"
   }' --orgid 1105 --templateid "5b06ead5e0dacc007058c784" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func publishedTemplateHideUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] published-template hide -orgid UINT -templateid STRING -api-version STRING -token STRING

Hide hides a RightScale built-in template from an organization.
    -orgid UINT: org_id identifies an organization by ID.
    -templateid STRING: template_id identifies a published template by ID.
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` published-template hide --orgid 1105 --templateid "5b06ead5e0dacc007058c784" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func publishedTemplateUnhideUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] published-template unhide -orgid UINT -templateid STRING -api-version STRING -token STRING

Unhide unhides a RightScale built-in template from an organization.
    -orgid UINT: org_id identifies an organization by ID.
    -templateid STRING: template_id identifies a published template by ID.
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` published-template unhide --orgid 1105 --templateid "5b06ead5e0dacc007058c784" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func publishedTemplateDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] published-template delete -orgid UINT -templateid STRING -api-version STRING -token STRING

Delete deletes a published template from an organization. Deleting a published template will not delete any applied policies created from the template, they must be stopped explicitly.
    -orgid UINT: org_id identifies an organization by ID.
    -templateid STRING: template_id identifies a published template by ID.
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` published-template delete --orgid 1105 --templateid "5b06ead5e0dacc007058c784" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func publishedTemplateShowUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] published-template show -orgid UINT -templateid STRING -view STRING -api-version STRING -token STRING

Show retrieves the details of a published template.
    -orgid UINT: org_id identifies an organization by ID.
    -templateid STRING: template_id identifies a published template by ID.
    -view STRING: 
    -api-version STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` published-template show --orgid 1105 --templateid "5b06ead5e0dacc007058c784" --view "default" --api-version "1.0" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

func publishedTemplateIndexUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] published-template index -orgid UINT -view STRING -show-hidden BOOL -api-version STRING -etag STRING -token STRING

Index retrieves the list of published templates in an organization.
    -orgid UINT: org_id identifies an organization by ID.
    -view STRING: 
    -show-hidden BOOL: 
    -api-version STRING: 
    -etag STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` published-template index --orgid 1105 --view "default" --show-hidden true --api-version "1.0" --etag "\"d41d8cd98f00b204e9800998ecf8427e\"" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
`, os.Args[0])
}

// healthUsage displays the usage of the health command and its subcommands.
func healthUsage() {
	fmt.Fprintf(os.Stderr, `Service is the Health service interface.
Usage:
    %s [globalflags] health COMMAND [flags]

COMMAND:
    check: Health check
    report: Health report

Additional help:
    %s health COMMAND --help
`, os.Args[0], os.Args[0])
}
func healthCheckUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] health check

Health check

Example:
    `+os.Args[0]+` health check
`, os.Args[0])
}

func healthReportUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] health report

Health report

Example:
    `+os.Args[0]+` health report
`, os.Args[0])
}
