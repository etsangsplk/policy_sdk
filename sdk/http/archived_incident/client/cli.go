// Code generated by goa v3.0.6, DO NOT EDIT.
//
// ArchivedIncident HTTP client CLI support package
//
// Command:
// $ goa gen github.com/rightscale/governance/front_service/design

package client

import (
	"encoding/json"
	"fmt"
	"strconv"

	archivedincident "github.com/rightscale/governance/front_service/gen/archived_incident"
	goa "goa.design/goa/v3/pkg"
)

// BuildShowPayload builds the payload for the ArchivedIncident show endpoint
// from CLI flags.
func BuildShowPayload(archivedIncidentShowProjectID string, archivedIncidentShowIncidentID string, archivedIncidentShowView string, archivedIncidentShowAPIVersion string, archivedIncidentShowEtag string, archivedIncidentShowToken string) (*archivedincident.ShowPayload, error) {
	var err error
	var projectID uint
	{
		var v uint64
		v, err = strconv.ParseUint(archivedIncidentShowProjectID, 10, 64)
		projectID = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for projectID, must be UINT")
		}
	}
	var incidentID string
	{
		incidentID = archivedIncidentShowIncidentID
	}
	var view *string
	{
		if archivedIncidentShowView != "" {
			view = &archivedIncidentShowView
		}
	}
	var apiVersion string
	{
		apiVersion = archivedIncidentShowAPIVersion
	}
	var etag *string
	{
		if archivedIncidentShowEtag != "" {
			etag = &archivedIncidentShowEtag
		}
	}
	var token *string
	{
		if archivedIncidentShowToken != "" {
			token = &archivedIncidentShowToken
		}
	}
	payload := &archivedincident.ShowPayload{
		ProjectID:  projectID,
		IncidentID: incidentID,
		View:       view,
		APIVersion: apiVersion,
		Etag:       etag,
		Token:      token,
	}
	return payload, nil
}

// BuildIndexPayload builds the payload for the ArchivedIncident index endpoint
// from CLI flags.
func BuildIndexPayload(archivedIncidentIndexProjectID string, archivedIncidentIndexView string, archivedIncidentIndexState string, archivedIncidentIndexAppliedPolicyID string, archivedIncidentIndexAPIVersion string, archivedIncidentIndexEtag string, archivedIncidentIndexToken string) (*archivedincident.IndexPayload, error) {
	var err error
	var projectID uint
	{
		var v uint64
		v, err = strconv.ParseUint(archivedIncidentIndexProjectID, 10, 64)
		projectID = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for projectID, must be UINT")
		}
	}
	var view *string
	{
		if archivedIncidentIndexView != "" {
			view = &archivedIncidentIndexView
		}
	}
	var state []string
	{
		if archivedIncidentIndexState != "" {
			err = json.Unmarshal([]byte(archivedIncidentIndexState), &state)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for state, example of valid JSON:\n%s", "'[\n      \"terminated\"\n   ]'")
			}
			for _, e := range state {
				if !(e == "resolved" || e == "terminated") {
					err = goa.MergeErrors(err, goa.InvalidEnumValueError("state[*]", e, []interface{}{"resolved", "terminated"}))
				}
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var appliedPolicyID *string
	{
		if archivedIncidentIndexAppliedPolicyID != "" {
			appliedPolicyID = &archivedIncidentIndexAppliedPolicyID
		}
	}
	var apiVersion string
	{
		apiVersion = archivedIncidentIndexAPIVersion
	}
	var etag *string
	{
		if archivedIncidentIndexEtag != "" {
			etag = &archivedIncidentIndexEtag
		}
	}
	var token *string
	{
		if archivedIncidentIndexToken != "" {
			token = &archivedIncidentIndexToken
		}
	}
	payload := &archivedincident.IndexPayload{
		ProjectID:       projectID,
		View:            view,
		State:           state,
		AppliedPolicyID: appliedPolicyID,
		APIVersion:      apiVersion,
		Etag:            etag,
		Token:           token,
	}
	return payload, nil
}

// BuildIndexEscalationsPayload builds the payload for the ArchivedIncident
// index_escalations endpoint from CLI flags.
func BuildIndexEscalationsPayload(archivedIncidentIndexEscalationsProjectID string, archivedIncidentIndexEscalationsIncidentID string, archivedIncidentIndexEscalationsAPIVersion string, archivedIncidentIndexEscalationsToken string) (*archivedincident.IndexEscalationsPayload, error) {
	var err error
	var projectID uint
	{
		var v uint64
		v, err = strconv.ParseUint(archivedIncidentIndexEscalationsProjectID, 10, 64)
		projectID = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for projectID, must be UINT")
		}
	}
	var incidentID string
	{
		incidentID = archivedIncidentIndexEscalationsIncidentID
	}
	var apiVersion string
	{
		apiVersion = archivedIncidentIndexEscalationsAPIVersion
	}
	var token *string
	{
		if archivedIncidentIndexEscalationsToken != "" {
			token = &archivedIncidentIndexEscalationsToken
		}
	}
	payload := &archivedincident.IndexEscalationsPayload{
		ProjectID:  projectID,
		IncidentID: incidentID,
		APIVersion: apiVersion,
		Token:      token,
	}
	return payload, nil
}

// BuildIndexResolutionsPayload builds the payload for the ArchivedIncident
// index_resolutions endpoint from CLI flags.
func BuildIndexResolutionsPayload(archivedIncidentIndexResolutionsProjectID string, archivedIncidentIndexResolutionsIncidentID string, archivedIncidentIndexResolutionsAPIVersion string, archivedIncidentIndexResolutionsToken string) (*archivedincident.IndexResolutionsPayload, error) {
	var err error
	var projectID uint
	{
		var v uint64
		v, err = strconv.ParseUint(archivedIncidentIndexResolutionsProjectID, 10, 64)
		projectID = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for projectID, must be UINT")
		}
	}
	var incidentID string
	{
		incidentID = archivedIncidentIndexResolutionsIncidentID
	}
	var apiVersion string
	{
		apiVersion = archivedIncidentIndexResolutionsAPIVersion
	}
	var token *string
	{
		if archivedIncidentIndexResolutionsToken != "" {
			token = &archivedIncidentIndexResolutionsToken
		}
	}
	payload := &archivedincident.IndexResolutionsPayload{
		ProjectID:  projectID,
		IncidentID: incidentID,
		APIVersion: apiVersion,
		Token:      token,
	}
	return payload, nil
}
