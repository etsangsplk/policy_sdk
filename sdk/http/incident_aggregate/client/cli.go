// Code generated by goa v3.0.6, DO NOT EDIT.
//
// IncidentAggregate HTTP client CLI support package
//
// Command:
// $ goa gen github.com/rightscale/governance/front_service/design

package client

import (
	"fmt"
	"strconv"

	incidentaggregate "github.com/rightscale/governance/front_service/gen/incident_aggregate"
)

// BuildShowPayload builds the payload for the IncidentAggregate show endpoint
// from CLI flags.
func BuildShowPayload(incidentAggregateShowOrgID string, incidentAggregateShowIncidentAggregateID string, incidentAggregateShowView string, incidentAggregateShowAPIVersion string, incidentAggregateShowEtag string, incidentAggregateShowToken string) (*incidentaggregate.ShowPayload, error) {
	var err error
	var orgID uint
	{
		var v uint64
		v, err = strconv.ParseUint(incidentAggregateShowOrgID, 10, 64)
		orgID = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for orgID, must be UINT")
		}
	}
	var incidentAggregateID string
	{
		incidentAggregateID = incidentAggregateShowIncidentAggregateID
	}
	var view *string
	{
		if incidentAggregateShowView != "" {
			view = &incidentAggregateShowView
		}
	}
	var apiVersion string
	{
		apiVersion = incidentAggregateShowAPIVersion
	}
	var etag *string
	{
		if incidentAggregateShowEtag != "" {
			etag = &incidentAggregateShowEtag
		}
	}
	var token *string
	{
		if incidentAggregateShowToken != "" {
			token = &incidentAggregateShowToken
		}
	}
	payload := &incidentaggregate.ShowPayload{
		OrgID:               orgID,
		IncidentAggregateID: incidentAggregateID,
		View:                view,
		APIVersion:          apiVersion,
		Etag:                etag,
		Token:               token,
	}
	return payload, nil
}

// BuildShowNonCatalogPayload builds the payload for the IncidentAggregate
// show_non_catalog endpoint from CLI flags.
func BuildShowNonCatalogPayload(incidentAggregateShowNonCatalogOrgID string, incidentAggregateShowNonCatalogView string, incidentAggregateShowNonCatalogAPIVersion string, incidentAggregateShowNonCatalogEtag string, incidentAggregateShowNonCatalogToken string) (*incidentaggregate.ShowNonCatalogPayload, error) {
	var err error
	var orgID uint
	{
		var v uint64
		v, err = strconv.ParseUint(incidentAggregateShowNonCatalogOrgID, 10, 64)
		orgID = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for orgID, must be UINT")
		}
	}
	var view *string
	{
		if incidentAggregateShowNonCatalogView != "" {
			view = &incidentAggregateShowNonCatalogView
		}
	}
	var apiVersion string
	{
		apiVersion = incidentAggregateShowNonCatalogAPIVersion
	}
	var etag *string
	{
		if incidentAggregateShowNonCatalogEtag != "" {
			etag = &incidentAggregateShowNonCatalogEtag
		}
	}
	var token *string
	{
		if incidentAggregateShowNonCatalogToken != "" {
			token = &incidentAggregateShowNonCatalogToken
		}
	}
	payload := &incidentaggregate.ShowNonCatalogPayload{
		OrgID:      orgID,
		View:       view,
		APIVersion: apiVersion,
		Etag:       etag,
		Token:      token,
	}
	return payload, nil
}

// BuildIndexPayload builds the payload for the IncidentAggregate index
// endpoint from CLI flags.
func BuildIndexPayload(incidentAggregateIndexOrgID string, incidentAggregateIndexView string, incidentAggregateIndexAPIVersion string, incidentAggregateIndexEtag string, incidentAggregateIndexToken string) (*incidentaggregate.IndexPayload, error) {
	var err error
	var orgID uint
	{
		var v uint64
		v, err = strconv.ParseUint(incidentAggregateIndexOrgID, 10, 64)
		orgID = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for orgID, must be UINT")
		}
	}
	var view *string
	{
		if incidentAggregateIndexView != "" {
			view = &incidentAggregateIndexView
		}
	}
	var apiVersion string
	{
		apiVersion = incidentAggregateIndexAPIVersion
	}
	var etag *string
	{
		if incidentAggregateIndexEtag != "" {
			etag = &incidentAggregateIndexEtag
		}
	}
	var token *string
	{
		if incidentAggregateIndexToken != "" {
			token = &incidentAggregateIndexToken
		}
	}
	payload := &incidentaggregate.IndexPayload{
		OrgID:      orgID,
		View:       view,
		APIVersion: apiVersion,
		Etag:       etag,
		Token:      token,
	}
	return payload, nil
}
