// Code generated by goa v3.0.6, DO NOT EDIT.
//
// AppliedPolicy HTTP client CLI support package
//
// Command:
// $ goa gen github.com/rightscale/governance/front_service/design

package client

import (
	"encoding/json"
	"fmt"
	"strconv"

	appliedpolicy "github.com/rightscale/policy_sdk/sdk/applied_policy"
	goa "goa.design/goa/v3/pkg"
)

// BuildCreatePayload builds the payload for the AppliedPolicy create endpoint
// from CLI flags.
func BuildCreatePayload(appliedPolicyCreateBody string, appliedPolicyCreateProjectID string, appliedPolicyCreateAPIVersion string, appliedPolicyCreateToken string) (*appliedpolicy.CreatePayload, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(appliedPolicyCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"credentials\": {\n         \"Consequatur voluptatibus non perspiciatis sit.\": \"Nulla inventore eum illo laborum distinctio.\",\n         \"Error repellat sapiente minus nam eum.\": \"Voluptatem incidunt enim.\"\n      },\n      \"description\": \"Delete unattached volumes after 24 hours in US-East.\",\n      \"dry_run\": false,\n      \"frequency\": \"daily\",\n      \"name\": \"us_east_unattached_volumes\",\n      \"options\": [\n         {\n            \"name\": \"cloud_vendor\",\n            \"value\": \"AWS\"\n         },\n         {\n            \"name\": \"email_list\",\n            \"value\": [\n               \"person1@domain.com\",\n               \"person2@domain.com\"\n            ]\n         }\n      ],\n      \"skip_approvals\": false,\n      \"template_href\": \"/api/governance/projects/60073/policy_templates/5b06ead5e0dacc007058c784\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.template_href", body.TemplateHref, "^/api/governance/(projects/[0-9]+/policy|orgs/[0-9]+/published)_templates/[0-9a-f]+$"))
		if !(body.Frequency == "15 minutes" || body.Frequency == "hourly" || body.Frequency == "daily" || body.Frequency == "weekly" || body.Frequency == "monthly") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.frequency", body.Frequency, []interface{}{"15 minutes", "hourly", "daily", "weekly", "monthly"}))
		}
		for _, e := range body.Options {
			if e != nil {
				if err2 := ValidateConfigurationOptionCreateTypeRequestBody(e); err2 != nil {
					err = goa.MergeErrors(err, err2)
				}
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var projectID uint
	{
		var v uint64
		v, err = strconv.ParseUint(appliedPolicyCreateProjectID, 10, 64)
		projectID = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for projectID, must be UINT")
		}
	}
	var apiVersion string
	{
		apiVersion = appliedPolicyCreateAPIVersion
	}
	var token *string
	{
		if appliedPolicyCreateToken != "" {
			token = &appliedPolicyCreateToken
		}
	}
	v := &appliedpolicy.CreatePayload{
		Name:          body.Name,
		Description:   body.Description,
		TemplateHref:  body.TemplateHref,
		Frequency:     body.Frequency,
		DryRun:        body.DryRun,
		SkipApprovals: body.SkipApprovals,
	}
	if body.Options != nil {
		v.Options = make([]*appliedpolicy.ConfigurationOptionCreateType, len(body.Options))
		for i, val := range body.Options {
			v.Options[i] = marshalConfigurationOptionCreateTypeRequestBodyToAppliedpolicyConfigurationOptionCreateType(val)
		}
	}
	if body.Credentials != nil {
		v.Credentials = make(map[string]string, len(body.Credentials))
		for key, val := range body.Credentials {
			tk := key
			tv := val
			v.Credentials[tk] = tv
		}
	}
	v.ProjectID = projectID
	v.APIVersion = apiVersion
	v.Token = token
	return v, nil
}

// BuildDeletePayload builds the payload for the AppliedPolicy delete endpoint
// from CLI flags.
func BuildDeletePayload(appliedPolicyDeleteProjectID string, appliedPolicyDeletePolicyID string, appliedPolicyDeleteAPIVersion string, appliedPolicyDeleteToken string) (*appliedpolicy.DeletePayload, error) {
	var err error
	var projectID uint
	{
		var v uint64
		v, err = strconv.ParseUint(appliedPolicyDeleteProjectID, 10, 64)
		projectID = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for projectID, must be UINT")
		}
	}
	var policyID string
	{
		policyID = appliedPolicyDeletePolicyID
	}
	var apiVersion string
	{
		apiVersion = appliedPolicyDeleteAPIVersion
	}
	var token *string
	{
		if appliedPolicyDeleteToken != "" {
			token = &appliedPolicyDeleteToken
		}
	}
	payload := &appliedpolicy.DeletePayload{
		ProjectID:  projectID,
		PolicyID:   policyID,
		APIVersion: apiVersion,
		Token:      token,
	}
	return payload, nil
}

// BuildShowPayload builds the payload for the AppliedPolicy show endpoint from
// CLI flags.
func BuildShowPayload(appliedPolicyShowProjectID string, appliedPolicyShowPolicyID string, appliedPolicyShowView string, appliedPolicyShowAPIVersion string, appliedPolicyShowToken string) (*appliedpolicy.ShowPayload, error) {
	var err error
	var projectID uint
	{
		var v uint64
		v, err = strconv.ParseUint(appliedPolicyShowProjectID, 10, 64)
		projectID = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for projectID, must be UINT")
		}
	}
	var policyID string
	{
		policyID = appliedPolicyShowPolicyID
	}
	var view *string
	{
		if appliedPolicyShowView != "" {
			view = &appliedPolicyShowView
		}
	}
	var apiVersion string
	{
		apiVersion = appliedPolicyShowAPIVersion
	}
	var token *string
	{
		if appliedPolicyShowToken != "" {
			token = &appliedPolicyShowToken
		}
	}
	payload := &appliedpolicy.ShowPayload{
		ProjectID:  projectID,
		PolicyID:   policyID,
		View:       view,
		APIVersion: apiVersion,
		Token:      token,
	}
	return payload, nil
}

// BuildShowStatusPayload builds the payload for the AppliedPolicy show_status
// endpoint from CLI flags.
func BuildShowStatusPayload(appliedPolicyShowStatusProjectID string, appliedPolicyShowStatusPolicyID string, appliedPolicyShowStatusAPIVersion string, appliedPolicyShowStatusToken string) (*appliedpolicy.ShowStatusPayload, error) {
	var err error
	var projectID uint
	{
		var v uint64
		v, err = strconv.ParseUint(appliedPolicyShowStatusProjectID, 10, 64)
		projectID = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for projectID, must be UINT")
		}
	}
	var policyID string
	{
		policyID = appliedPolicyShowStatusPolicyID
	}
	var apiVersion string
	{
		apiVersion = appliedPolicyShowStatusAPIVersion
	}
	var token *string
	{
		if appliedPolicyShowStatusToken != "" {
			token = &appliedPolicyShowStatusToken
		}
	}
	payload := &appliedpolicy.ShowStatusPayload{
		ProjectID:  projectID,
		PolicyID:   policyID,
		APIVersion: apiVersion,
		Token:      token,
	}
	return payload, nil
}

// BuildShowLogPayload builds the payload for the AppliedPolicy show_log
// endpoint from CLI flags.
func BuildShowLogPayload(appliedPolicyShowLogProjectID string, appliedPolicyShowLogPolicyID string, appliedPolicyShowLogAPIVersion string, appliedPolicyShowLogEtag string, appliedPolicyShowLogToken string) (*appliedpolicy.ShowLogPayload, error) {
	var err error
	var projectID uint
	{
		var v uint64
		v, err = strconv.ParseUint(appliedPolicyShowLogProjectID, 10, 64)
		projectID = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for projectID, must be UINT")
		}
	}
	var policyID string
	{
		policyID = appliedPolicyShowLogPolicyID
	}
	var apiVersion string
	{
		apiVersion = appliedPolicyShowLogAPIVersion
	}
	var etag *string
	{
		if appliedPolicyShowLogEtag != "" {
			etag = &appliedPolicyShowLogEtag
		}
	}
	var token *string
	{
		if appliedPolicyShowLogToken != "" {
			token = &appliedPolicyShowLogToken
		}
	}
	payload := &appliedpolicy.ShowLogPayload{
		ProjectID:  projectID,
		PolicyID:   policyID,
		APIVersion: apiVersion,
		Etag:       etag,
		Token:      token,
	}
	return payload, nil
}

// BuildIndexPayload builds the payload for the AppliedPolicy index endpoint
// from CLI flags.
func BuildIndexPayload(appliedPolicyIndexProjectID string, appliedPolicyIndexView string, appliedPolicyIndexName string, appliedPolicyIndexAPIVersion string, appliedPolicyIndexEtag string, appliedPolicyIndexToken string) (*appliedpolicy.IndexPayload, error) {
	var err error
	var projectID uint
	{
		var v uint64
		v, err = strconv.ParseUint(appliedPolicyIndexProjectID, 10, 64)
		projectID = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for projectID, must be UINT")
		}
	}
	var view *string
	{
		if appliedPolicyIndexView != "" {
			view = &appliedPolicyIndexView
		}
	}
	var name []string
	{
		if appliedPolicyIndexName != "" {
			err = json.Unmarshal([]byte(appliedPolicyIndexName), &name)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for name, example of valid JSON:\n%s", "'[\n      \"Tag Checker Policy\"\n   ]'")
			}
		}
	}
	var apiVersion string
	{
		apiVersion = appliedPolicyIndexAPIVersion
	}
	var etag *string
	{
		if appliedPolicyIndexEtag != "" {
			etag = &appliedPolicyIndexEtag
		}
	}
	var token *string
	{
		if appliedPolicyIndexToken != "" {
			token = &appliedPolicyIndexToken
		}
	}
	payload := &appliedpolicy.IndexPayload{
		ProjectID:  projectID,
		View:       view,
		Name:       name,
		APIVersion: apiVersion,
		Etag:       etag,
		Token:      token,
	}
	return payload, nil
}

// BuildEvaluatePayload builds the payload for the AppliedPolicy evaluate
// endpoint from CLI flags.
func BuildEvaluatePayload(appliedPolicyEvaluateProjectID string, appliedPolicyEvaluatePolicyID string, appliedPolicyEvaluateAPIVersion string, appliedPolicyEvaluateToken string) (*appliedpolicy.EvaluatePayload, error) {
	var err error
	var projectID uint
	{
		var v uint64
		v, err = strconv.ParseUint(appliedPolicyEvaluateProjectID, 10, 64)
		projectID = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for projectID, must be UINT")
		}
	}
	var policyID string
	{
		policyID = appliedPolicyEvaluatePolicyID
	}
	var apiVersion string
	{
		apiVersion = appliedPolicyEvaluateAPIVersion
	}
	var token *string
	{
		if appliedPolicyEvaluateToken != "" {
			token = &appliedPolicyEvaluateToken
		}
	}
	payload := &appliedpolicy.EvaluatePayload{
		ProjectID:  projectID,
		PolicyID:   policyID,
		APIVersion: apiVersion,
		Token:      token,
	}
	return payload, nil
}
