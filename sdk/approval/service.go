// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// Approval service
//
// Command:
// $ goa gen github.com/rightscale/governance/front_service/design

package approval

import (
	"context"

	approvalviews "github.com/rightscale/right_pt/sdk/approval/views"
	"goa.design/goa"
	"goa.design/goa/security"
)

// Service is the Approval service interface.
type Service interface {
	// Show retrieves the details of an approval request.
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "extended"
	Show(context.Context, *ShowPayload) (res *ApprovalRequest, view string, err error)
	// Index retrieves the list of approval requests in a project.
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "extended"
	Index(context.Context, *IndexPayload) (res *ApprovalRequestList, view string, err error)
	// Approve approves a single approval request.
	Approve(context.Context, *ApprovePayload) (err error)
	// Deny denies a single approval request.
	Deny(context.Context, *DenyPayload) (err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "Approval"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [4]string{"show", "index", "approve", "deny"}

// ShowPayload is the payload type of the Approval service show method.
type ShowPayload struct {
	// project_id identifies a project by ID.
	ProjectID uint
	// approval_request_id identifes an approval by its ID.
	ApprovalRequestID string
	// View used to render approval request.
	View *string
	// JWT token used to perform authorization
	Token *string
	// API Version, must be specified using this header
	APIVersion string
}

// ApprovalRequest is the result type of the Approval service show method.
type ApprovalRequest struct {
	// id identifies an approval request by ID.
	ID string
	// project_id is the ID of the project where this approval request is created.
	ProjectID uint
	// href is the href of the approval request
	Href string
	// label is a short title for this approval request
	Label *string
	// description describes the details for this approval request.
	Description *string
	// subject is the subject of the approval.
	Subject *ApprovalSubject
	// created_at is the approval request creation timestamp in RFC3339 format.
	CreatedAt *string
	// updated_at is the last update timestamp in RFC3339 format.
	UpdatedAt *string
	// parameters is a list of parameters required for approval request.
	Parameters map[string]*Parameter
	// status is the status of this approval request.
	Status *string
	// options lists the configuration options used to parameterize the approval
	// request.
	Options []*ConfigurationOption
	// approved_by is the RightScale user that approved this approval request.
	ApprovedBy *User
	// approved_at is the approval timestamp in RFC3339 format.
	ApprovedAt *string
	// denial_comment is a comment that explains the reason for denial, if relevant.
	DenialComment *string
	// denied_by is the RightScale user that denied this approval request.
	DeniedBy *User
	// denied_at is the denial timestamp in RFC3339 format.
	DeniedAt *string
	// kind is "gov#approval_request".
	Kind string
}

// IndexPayload is the payload type of the Approval service index method.
type IndexPayload struct {
	// project_id identifies a project by ID.
	ProjectID uint
	// Optional resource ID to filter. Multiple may be specified.
	ID []string
	// Subject kind to filter on.
	SubjectKind *string
	// Subject HREF to filter on.
	SubjectHref *string
	// Status of the approval to filter on. Multiple may be specified.
	Status []string
	// Previous ETag value retrieved by client if any. Service returns an empty
	// response with HTTP status code 304 Not Modified if value matches current
	// value server side.
	Etag *string
	// View used to render approval requests.
	View *string
	// JWT token used to perform authorization
	Token *string
	// API Version, must be specified using this header
	APIVersion string
}

// ApprovalRequestList is the result type of the Approval service index method.
type ApprovalRequestList struct {
	// count is the number of approval requests in the list
	Count *uint
	// etag is a HTTP ETag for the list.
	Etag string
	// items is the array of approval requests.
	Items ApprovalRequestCollection
	// not_modified is a flag used internally that indicates how to encode the HTTP
	// response (i.e. 200 or 304).
	NotModified *string
	// kind is "gov#approval_request_list".
	Kind string
}

// ApprovePayload is the payload type of the Approval service approve method.
type ApprovePayload struct {
	// project_id identifies a project by ID.
	ProjectID uint
	// approval_request_id identifes an approval request by its ID.
	ApprovalRequestID string
	// options lists the configuration options used to parameterize the approval.
	Options []*ConfigurationOptionCreateType
	// JWT token used to perform authorization
	Token *string
	// API Version, must be specified using this header
	APIVersion string
}

// DenyPayload is the payload type of the Approval service deny method.
type DenyPayload struct {
	// project_id identifies a project by ID.
	ProjectID uint
	// approval_request_id identifes an approval request by its ID.
	ApprovalRequestID string
	// A comment that explains the reason for denial
	Comment *string
	// JWT token used to perform authorization
	Token *string
	// API Version, must be specified using this header
	APIVersion string
}

// ApprovalSubject is the subject of an approval.
type ApprovalSubject struct {
	// kind is the kind of subject
	Kind string
	// href is the href of the subject.
	Href string
}

// Parameter defines a parameter given as input to a Policy
type Parameter struct {
	// Name of the parameter
	Name string `json:"name"`
	// Type of the parameter
	Type string `json:"type"`
	// Label to show in the UI
	Label string `json:"label"`
	// The index of this parameter in the list
	Index uint `json:"index"`
	// The category used to group parameters
	Category *string `json:"category"`
	// Description of the parameter
	Description *string `json:"description"`
	// The default value for the parameter
	Default interface{} `json:"default"`
	// no_echo determines whether the value of the parameter should be hidden in
	// UIs and API responses.
	NoEcho bool `json:"no_echo"`
	// List of values allowed for this parameter
	AllowedValues []interface{} `json:"allowed_values"`
	// The minimum length of a string parameter
	MinLength *uint `json:"min_length"`
	// The maximum length of a string parameter
	MaxLength *uint `json:"max_length"`
	// The minimum value of a number parmameter
	MinValue *float64 `json:"min_value"`
	// The maximum value of a number parameter
	MaxValue *float64 `json:"max_value"`
	// The regular expression pattern used to validate a string parameter
	AllowedPattern *Regexp `json:"allowed_pattern"`
	// The description used for constraints
	ConstraintDescription *string `json:"constraint_description"`
}

// Regular expression
type Regexp struct {
	// Pattern is the regular expression pattern.
	Pattern string `json:"pattern"`
	// Options are the regular expression options. Options i (case insensitve) and
	// m (match over newlines) supported.
	Options *string `json:"options"`
}

// ConfigurationOption describes a single parameter value used to configure an
// applied policy.
type ConfigurationOption struct {
	// name of option
	Name string
	// label of option
	Label string
	// type of option
	Type string
	// value of option
	Value interface{}
}

// User represents a registered RightScale user.
type User struct {
	// ID of user
	ID uint
	// email of user
	Email string
	// name of user, usually of the form 'First Last'
	Name string
}

type ApprovalRequestCollection []*ApprovalRequest

// ConfigurationOptionCreateType is the payload for creating a single parameter
// value used to configure an applied policy.
type ConfigurationOptionCreateType struct {
	// name of option
	Name string
	// value of option
	Value interface{}
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "unauthorized",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeForbidden builds a goa.ServiceError from an error.
func MakeForbidden(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "forbidden",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "bad_request",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeBadGateway builds a goa.ServiceError from an error.
func MakeBadGateway(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "bad_gateway",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeInternalError builds a goa.ServiceError from an error.
func MakeInternalError(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "internal_error",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "not_found",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// NewApprovalRequest initializes result type ApprovalRequest from viewed
// result type ApprovalRequest.
func NewApprovalRequest(vres *approvalviews.ApprovalRequest) *ApprovalRequest {
	var res *ApprovalRequest
	switch vres.View {
	case "default", "":
		res = newApprovalRequest(vres.Projected)
	case "extended":
		res = newApprovalRequestExtended(vres.Projected)
	}
	return res
}

// NewViewedApprovalRequest initializes viewed result type ApprovalRequest from
// result type ApprovalRequest using the given view.
func NewViewedApprovalRequest(res *ApprovalRequest, view string) *approvalviews.ApprovalRequest {
	var vres *approvalviews.ApprovalRequest
	switch view {
	case "default", "":
		p := newApprovalRequestView(res)
		vres = &approvalviews.ApprovalRequest{p, "default"}
	case "extended":
		p := newApprovalRequestViewExtended(res)
		vres = &approvalviews.ApprovalRequest{p, "extended"}
	}
	return vres
}

// NewApprovalRequestList initializes result type ApprovalRequestList from
// viewed result type ApprovalRequestList.
func NewApprovalRequestList(vres *approvalviews.ApprovalRequestList) *ApprovalRequestList {
	var res *ApprovalRequestList
	switch vres.View {
	case "default", "":
		res = newApprovalRequestList(vres.Projected)
	case "extended":
		res = newApprovalRequestListExtended(vres.Projected)
	}
	return res
}

// NewViewedApprovalRequestList initializes viewed result type
// ApprovalRequestList from result type ApprovalRequestList using the given
// view.
func NewViewedApprovalRequestList(res *ApprovalRequestList, view string) *approvalviews.ApprovalRequestList {
	var vres *approvalviews.ApprovalRequestList
	switch view {
	case "default", "":
		p := newApprovalRequestListView(res)
		vres = &approvalviews.ApprovalRequestList{p, "default"}
	case "extended":
		p := newApprovalRequestListViewExtended(res)
		vres = &approvalviews.ApprovalRequestList{p, "extended"}
	}
	return vres
}

// newApprovalRequest converts projected type ApprovalRequest to service type
// ApprovalRequest.
func newApprovalRequest(vres *approvalviews.ApprovalRequestView) *ApprovalRequest {
	res := &ApprovalRequest{
		Label:       vres.Label,
		Description: vres.Description,
		CreatedAt:   vres.CreatedAt,
		UpdatedAt:   vres.UpdatedAt,
		Status:      vres.Status,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.ProjectID != nil {
		res.ProjectID = *vres.ProjectID
	}
	if vres.Href != nil {
		res.Href = *vres.Href
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.Subject != nil {
		res.Subject = unmarshalApprovalSubject2ToApprovalSubject(vres.Subject)
	}
	return res
}

// newApprovalRequestExtended converts projected type ApprovalRequest to
// service type ApprovalRequest.
func newApprovalRequestExtended(vres *approvalviews.ApprovalRequestView) *ApprovalRequest {
	res := &ApprovalRequest{
		Label:         vres.Label,
		Description:   vres.Description,
		CreatedAt:     vres.CreatedAt,
		UpdatedAt:     vres.UpdatedAt,
		Status:        vres.Status,
		ApprovedAt:    vres.ApprovedAt,
		DenialComment: vres.DenialComment,
		DeniedAt:      vres.DeniedAt,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.ProjectID != nil {
		res.ProjectID = *vres.ProjectID
	}
	if vres.Href != nil {
		res.Href = *vres.Href
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.Subject != nil {
		res.Subject = unmarshalApprovalSubject2ToApprovalSubject(vres.Subject)
	}
	if vres.Parameters != nil {
		res.Parameters = make(map[string]*Parameter, len(vres.Parameters))
		for key, val := range vres.Parameters {
			tk := key
			tv := &Parameter{
				Name:                  *val.Name,
				Type:                  *val.Type,
				Label:                 *val.Label,
				Index:                 *val.Index,
				Category:              val.Category,
				Description:           val.Description,
				MinLength:             val.MinLength,
				MaxLength:             val.MaxLength,
				MinValue:              val.MinValue,
				MaxValue:              val.MaxValue,
				ConstraintDescription: val.ConstraintDescription,
			}
			if val.Default != nil {
				tv.Default = *val.Default
			}
			if val.NoEcho != nil {
				tv.NoEcho = *val.NoEcho
			}
			if val.NoEcho == nil {
				tv.NoEcho = false
			}
			if val.AllowedValues != nil {
				tv.AllowedValues = make([]interface{}, len(val.AllowedValues))
				for i, val := range val.AllowedValues {
					tv.AllowedValues[i] = val
				}
			}
			if val.AllowedPattern != nil {
				tv.AllowedPattern = unmarshalRegexpViewToRegexp(val.AllowedPattern)
			}
			res.Parameters[tk] = tv
		}
	}
	if vres.Options != nil {
		res.Options = make([]*ConfigurationOption, len(vres.Options))
		for i, val := range vres.Options {
			res.Options[i] = &ConfigurationOption{
				Name:  *val.Name,
				Label: *val.Label,
				Type:  *val.Type,
				Value: *val.Value,
			}
		}
	}
	if vres.ApprovedBy != nil {
		res.ApprovedBy = unmarshalUserViewToUser(vres.ApprovedBy)
	}
	if vres.DeniedBy != nil {
		res.DeniedBy = unmarshalUserViewToUser(vres.DeniedBy)
	}
	return res
}

// newApprovalRequestView projects result type ApprovalRequest into projected
// type ApprovalRequestView using the "default" view.
func newApprovalRequestView(res *ApprovalRequest) *approvalviews.ApprovalRequestView {
	vres := &approvalviews.ApprovalRequestView{
		ID:          &res.ID,
		ProjectID:   &res.ProjectID,
		Href:        &res.Href,
		Label:       res.Label,
		Description: res.Description,
		CreatedAt:   res.CreatedAt,
		UpdatedAt:   res.UpdatedAt,
		Status:      res.Status,
		Kind:        &res.Kind,
	}
	if res.Subject != nil {
		vres.Subject = marshalApprovalSubjectToApprovalSubject2(res.Subject)
	}
	return vres
}

// newApprovalRequestViewExtended projects result type ApprovalRequest into
// projected type ApprovalRequestView using the "extended" view.
func newApprovalRequestViewExtended(res *ApprovalRequest) *approvalviews.ApprovalRequestView {
	vres := &approvalviews.ApprovalRequestView{
		ID:            &res.ID,
		ProjectID:     &res.ProjectID,
		Href:          &res.Href,
		Label:         res.Label,
		Description:   res.Description,
		CreatedAt:     res.CreatedAt,
		UpdatedAt:     res.UpdatedAt,
		Status:        res.Status,
		ApprovedAt:    res.ApprovedAt,
		DenialComment: res.DenialComment,
		DeniedAt:      res.DeniedAt,
		Kind:          &res.Kind,
	}
	if res.Subject != nil {
		vres.Subject = marshalApprovalSubjectToApprovalSubject2(res.Subject)
	}
	if res.Parameters != nil {
		vres.Parameters = make(map[string]*approvalviews.ParameterView, len(res.Parameters))
		for key, val := range res.Parameters {
			tk := key
			tv := &approvalviews.ParameterView{
				Name:                  &val.Name,
				Type:                  &val.Type,
				Label:                 &val.Label,
				Index:                 &val.Index,
				Category:              val.Category,
				Description:           val.Description,
				Default:               &val.Default,
				NoEcho:                &val.NoEcho,
				MinLength:             val.MinLength,
				MaxLength:             val.MaxLength,
				MinValue:              val.MinValue,
				MaxValue:              val.MaxValue,
				ConstraintDescription: val.ConstraintDescription,
			}
			if val.AllowedValues != nil {
				tv.AllowedValues = make([]interface{}, len(val.AllowedValues))
				for i, val := range val.AllowedValues {
					tv.AllowedValues[i] = val
				}
			}
			if val.AllowedPattern != nil {
				tv.AllowedPattern = marshalRegexpToRegexpView(val.AllowedPattern)
			}
			vres.Parameters[tk] = tv
		}
	}
	if res.Options != nil {
		vres.Options = make([]*approvalviews.ConfigurationOptionView, len(res.Options))
		for i, val := range res.Options {
			vres.Options[i] = &approvalviews.ConfigurationOptionView{
				Name:  &val.Name,
				Label: &val.Label,
				Type:  &val.Type,
				Value: &val.Value,
			}
		}
	}
	if res.ApprovedBy != nil {
		vres.ApprovedBy = marshalUserToUserView(res.ApprovedBy)
	}
	if res.DeniedBy != nil {
		vres.DeniedBy = marshalUserToUserView(res.DeniedBy)
	}
	return vres
}

// newApprovalRequestList converts projected type ApprovalRequestList to
// service type ApprovalRequestList.
func newApprovalRequestList(vres *approvalviews.ApprovalRequestListView) *ApprovalRequestList {
	res := &ApprovalRequestList{
		Count:       vres.Count,
		NotModified: vres.NotModified,
	}
	if vres.Etag != nil {
		res.Etag = *vres.Etag
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.Items != nil {
		res.Items = newApprovalRequestCollection(vres.Items)
	}
	return res
}

// newApprovalRequestListExtended converts projected type ApprovalRequestList
// to service type ApprovalRequestList.
func newApprovalRequestListExtended(vres *approvalviews.ApprovalRequestListView) *ApprovalRequestList {
	res := &ApprovalRequestList{
		Count:       vres.Count,
		NotModified: vres.NotModified,
	}
	if vres.Etag != nil {
		res.Etag = *vres.Etag
	}
	if vres.Kind != nil {
		res.Kind = *vres.Kind
	}
	if vres.Items != nil {
		res.Items = newApprovalRequestCollectionExtended(vres.Items)
	}
	return res
}

// newApprovalRequestListView projects result type ApprovalRequestList into
// projected type ApprovalRequestListView using the "default" view.
func newApprovalRequestListView(res *ApprovalRequestList) *approvalviews.ApprovalRequestListView {
	vres := &approvalviews.ApprovalRequestListView{
		Count:       res.Count,
		Etag:        &res.Etag,
		NotModified: res.NotModified,
		Kind:        &res.Kind,
	}
	if res.Items != nil {
		vres.Items = newApprovalRequestCollectionView(res.Items)
	}
	return vres
}

// newApprovalRequestListViewExtended projects result type ApprovalRequestList
// into projected type ApprovalRequestListView using the "extended" view.
func newApprovalRequestListViewExtended(res *ApprovalRequestList) *approvalviews.ApprovalRequestListView {
	vres := &approvalviews.ApprovalRequestListView{
		Count:       res.Count,
		Etag:        &res.Etag,
		NotModified: res.NotModified,
		Kind:        &res.Kind,
	}
	if res.Items != nil {
		vres.Items = newApprovalRequestCollectionViewExtended(res.Items)
	}
	return vres
}

// newApprovalRequestCollection converts projected type
// ApprovalRequestCollection to service type ApprovalRequestCollection.
func newApprovalRequestCollection(vres approvalviews.ApprovalRequestCollectionView) ApprovalRequestCollection {
	res := make(ApprovalRequestCollection, len(vres))
	for i, n := range vres {
		res[i] = newApprovalRequest(n)
	}
	return res
}

// newApprovalRequestCollectionExtended converts projected type
// ApprovalRequestCollection to service type ApprovalRequestCollection.
func newApprovalRequestCollectionExtended(vres approvalviews.ApprovalRequestCollectionView) ApprovalRequestCollection {
	res := make(ApprovalRequestCollection, len(vres))
	for i, n := range vres {
		res[i] = newApprovalRequestExtended(n)
	}
	return res
}

// newApprovalRequestCollectionView projects result type
// ApprovalRequestCollection into projected type ApprovalRequestCollectionView
// using the "default" view.
func newApprovalRequestCollectionView(res ApprovalRequestCollection) approvalviews.ApprovalRequestCollectionView {
	vres := make(approvalviews.ApprovalRequestCollectionView, len(res))
	for i, n := range res {
		vres[i] = newApprovalRequestView(n)
	}
	return vres
}

// newApprovalRequestCollectionViewExtended projects result type
// ApprovalRequestCollection into projected type ApprovalRequestCollectionView
// using the "extended" view.
func newApprovalRequestCollectionViewExtended(res ApprovalRequestCollection) approvalviews.ApprovalRequestCollectionView {
	vres := make(approvalviews.ApprovalRequestCollectionView, len(res))
	for i, n := range res {
		vres[i] = newApprovalRequestViewExtended(n)
	}
	return vres
}

// unmarshalApprovalSubject2ToApprovalSubject builds a value of type
// *ApprovalSubject from a value of type *approvalviews.ApprovalSubject2.
func unmarshalApprovalSubject2ToApprovalSubject(v *approvalviews.ApprovalSubject2) *ApprovalSubject {
	if v == nil {
		return nil
	}
	res := &ApprovalSubject{
		Kind: *v.Kind,
		Href: *v.Href,
	}

	return res
}

// unmarshalRegexpViewToRegexp builds a value of type *Regexp from a value of
// type *approvalviews.RegexpView.
func unmarshalRegexpViewToRegexp(v *approvalviews.RegexpView) *Regexp {
	if v == nil {
		return nil
	}
	res := &Regexp{
		Pattern: *v.Pattern,
		Options: v.Options,
	}

	return res
}

// unmarshalUserViewToUser builds a value of type *User from a value of type
// *approvalviews.UserView.
func unmarshalUserViewToUser(v *approvalviews.UserView) *User {
	if v == nil {
		return nil
	}
	res := &User{
		ID:    *v.ID,
		Email: *v.Email,
		Name:  *v.Name,
	}

	return res
}

// marshalApprovalSubjectToApprovalSubject2 builds a value of type
// *approvalviews.ApprovalSubject2 from a value of type *ApprovalSubject.
func marshalApprovalSubjectToApprovalSubject2(v *ApprovalSubject) *approvalviews.ApprovalSubject2 {
	res := &approvalviews.ApprovalSubject2{
		Kind: &v.Kind,
		Href: &v.Href,
	}

	return res
}

// marshalRegexpToRegexpView builds a value of type *approvalviews.RegexpView
// from a value of type *Regexp.
func marshalRegexpToRegexpView(v *Regexp) *approvalviews.RegexpView {
	if v == nil {
		return nil
	}
	res := &approvalviews.RegexpView{
		Pattern: &v.Pattern,
		Options: v.Options,
	}

	return res
}

// marshalUserToUserView builds a value of type *approvalviews.UserView from a
// value of type *User.
func marshalUserToUserView(v *User) *approvalviews.UserView {
	if v == nil {
		return nil
	}
	res := &approvalviews.UserView{
		ID:    &v.ID,
		Email: &v.Email,
		Name:  &v.Name,
	}

	return res
}
