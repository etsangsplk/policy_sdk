// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// Approval endpoints
//
// Command:
// $ goa gen github.com/rightscale/governance/front_service/design

package approval

import (
	"context"

	goa "goa.design/goa"
	"goa.design/goa/security"
)

// Endpoints wraps the "Approval" service endpoints.
type Endpoints struct {
	Show    goa.Endpoint
	Index   goa.Endpoint
	Approve goa.Endpoint
	Deny    goa.Endpoint
}

// NewEndpoints wraps the methods of the "Approval" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		Show:    NewShowEndpoint(s, a.JWTAuth),
		Index:   NewIndexEndpoint(s, a.JWTAuth),
		Approve: NewApproveEndpoint(s, a.JWTAuth),
		Deny:    NewDenyEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "Approval" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Show = m(e.Show)
	e.Index = m(e.Index)
	e.Approve = m(e.Approve)
	e.Deny = m(e.Deny)
}

// NewShowEndpoint returns an endpoint function that calls the method "show" of
// service "Approval".
func NewShowEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ShowPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "GlobalSession",
			Scopes:         []string{"governance:policy_template:compile", "governance:policy_template:upload", "governance:policy_template:update", "governance:policy_template:delete", "governance:policy_template:show", "governance:policy_template:index", "governance:published_template:create", "governance:published_template:update", "governance:published_template:hide", "governance:published_template:unhide", "governance:published_template:delete", "governance:published_template:show", "governance:published_template:index", "governance:applied_policy:create", "governance:applied_policy:delete", "governance:applied_policy:show", "governance:applied_policy:show_log", "governance:applied_policy:index", "governance:applied_policy:evaluate", "governance:incident:resolve", "governance:incident:show", "governance:incident:index", "governance:approval_request:show", "governance:approval_request:index", "governance:approval_request:approve", "governance:approval_request:deny"},
			RequiredScopes: []string{"governance:approval_request:show"},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		res, view, err := s.Show(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedApprovalRequest(res, view)
		return vres, nil
	}
}

// NewIndexEndpoint returns an endpoint function that calls the method "index"
// of service "Approval".
func NewIndexEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*IndexPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "GlobalSession",
			Scopes:         []string{"governance:policy_template:compile", "governance:policy_template:upload", "governance:policy_template:update", "governance:policy_template:delete", "governance:policy_template:show", "governance:policy_template:index", "governance:published_template:create", "governance:published_template:update", "governance:published_template:hide", "governance:published_template:unhide", "governance:published_template:delete", "governance:published_template:show", "governance:published_template:index", "governance:applied_policy:create", "governance:applied_policy:delete", "governance:applied_policy:show", "governance:applied_policy:show_log", "governance:applied_policy:index", "governance:applied_policy:evaluate", "governance:incident:resolve", "governance:incident:show", "governance:incident:index", "governance:approval_request:show", "governance:approval_request:index", "governance:approval_request:approve", "governance:approval_request:deny"},
			RequiredScopes: []string{"governance:approval_request:index"},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		res, view, err := s.Index(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedApprovalRequestList(res, view)
		return vres, nil
	}
}

// NewApproveEndpoint returns an endpoint function that calls the method
// "approve" of service "Approval".
func NewApproveEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ApprovePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "GlobalSession",
			Scopes:         []string{"governance:policy_template:compile", "governance:policy_template:upload", "governance:policy_template:update", "governance:policy_template:delete", "governance:policy_template:show", "governance:policy_template:index", "governance:published_template:create", "governance:published_template:update", "governance:published_template:hide", "governance:published_template:unhide", "governance:published_template:delete", "governance:published_template:show", "governance:published_template:index", "governance:applied_policy:create", "governance:applied_policy:delete", "governance:applied_policy:show", "governance:applied_policy:show_log", "governance:applied_policy:index", "governance:applied_policy:evaluate", "governance:incident:resolve", "governance:incident:show", "governance:incident:index", "governance:approval_request:show", "governance:approval_request:index", "governance:approval_request:approve", "governance:approval_request:deny"},
			RequiredScopes: []string{"governance:approval_request:approve"},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.Approve(ctx, p)
	}
}

// NewDenyEndpoint returns an endpoint function that calls the method "deny" of
// service "Approval".
func NewDenyEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*DenyPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "GlobalSession",
			Scopes:         []string{"governance:policy_template:compile", "governance:policy_template:upload", "governance:policy_template:update", "governance:policy_template:delete", "governance:policy_template:show", "governance:policy_template:index", "governance:published_template:create", "governance:published_template:update", "governance:published_template:hide", "governance:published_template:unhide", "governance:published_template:delete", "governance:published_template:show", "governance:published_template:index", "governance:applied_policy:create", "governance:applied_policy:delete", "governance:applied_policy:show", "governance:applied_policy:show_log", "governance:applied_policy:index", "governance:applied_policy:evaluate", "governance:incident:resolve", "governance:incident:show", "governance:incident:index", "governance:approval_request:show", "governance:approval_request:index", "governance:approval_request:approve", "governance:approval_request:deny"},
			RequiredScopes: []string{"governance:approval_request:deny"},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.Deny(ctx, p)
	}
}
