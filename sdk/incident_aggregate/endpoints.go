// Code generated by goa v3.0.6, DO NOT EDIT.
//
// IncidentAggregate endpoints
//
// Command:
// $ goa gen github.com/rightscale/governance/front_service/design

package incidentaggregate

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "IncidentAggregate" service endpoints.
type Endpoints struct {
	Show           goa.Endpoint
	ShowNonCatalog goa.Endpoint
	Index          goa.Endpoint
}

// NewEndpoints wraps the methods of the "IncidentAggregate" service with
// endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		Show:           NewShowEndpoint(s, a.JWTAuth),
		ShowNonCatalog: NewShowNonCatalogEndpoint(s, a.JWTAuth),
		Index:          NewIndexEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "IncidentAggregate" service
// endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Show = m(e.Show)
	e.ShowNonCatalog = m(e.ShowNonCatalog)
	e.Index = m(e.Index)
}

// NewShowEndpoint returns an endpoint function that calls the method "show" of
// service "IncidentAggregate".
func NewShowEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ShowPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "GlobalSession",
			Scopes:         []string{"governance:policy_template:compile", "governance:policy_template:upload", "governance:policy_template:update", "governance:policy_template:delete", "governance:policy_template:show", "governance:policy_template:index", "governance:policy_template:retrieve_data", "governance:published_template:create", "governance:published_template:update", "governance:published_template:hide", "governance:published_template:unhide", "governance:published_template:delete", "governance:published_template:show", "governance:published_template:index", "governance:applied_policy:create", "governance:applied_policy:delete", "governance:applied_policy:show", "governance:applied_policy:show_log", "governance:applied_policy:index", "governance:applied_policy:evaluate", "governance:policy_aggregate:create", "governance:policy_aggregate:update", "governance:policy_aggregate:delete", "governance:policy_aggregate:show", "governance:policy_aggregate:index", "governance:incident:resolve", "governance:incident:show", "governance:incident:index", "governance:archived_incident:show", "governance:archived_incident:index", "governance:incident_aggregate:show", "governance:incident_aggregate:index", "governance:approval_request:show", "governance:approval_request:index", "governance:approval_request:approve", "governance:approval_request:deny"},
			RequiredScopes: []string{"governance:incident_aggregate:show"},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		res, view, err := s.Show(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedIncidentAggregate(res, view)
		return vres, nil
	}
}

// NewShowNonCatalogEndpoint returns an endpoint function that calls the method
// "show_non_catalog" of service "IncidentAggregate".
func NewShowNonCatalogEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ShowNonCatalogPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "GlobalSession",
			Scopes:         []string{"governance:policy_template:compile", "governance:policy_template:upload", "governance:policy_template:update", "governance:policy_template:delete", "governance:policy_template:show", "governance:policy_template:index", "governance:policy_template:retrieve_data", "governance:published_template:create", "governance:published_template:update", "governance:published_template:hide", "governance:published_template:unhide", "governance:published_template:delete", "governance:published_template:show", "governance:published_template:index", "governance:applied_policy:create", "governance:applied_policy:delete", "governance:applied_policy:show", "governance:applied_policy:show_log", "governance:applied_policy:index", "governance:applied_policy:evaluate", "governance:policy_aggregate:create", "governance:policy_aggregate:update", "governance:policy_aggregate:delete", "governance:policy_aggregate:show", "governance:policy_aggregate:index", "governance:incident:resolve", "governance:incident:show", "governance:incident:index", "governance:archived_incident:show", "governance:archived_incident:index", "governance:incident_aggregate:show", "governance:incident_aggregate:index", "governance:approval_request:show", "governance:approval_request:index", "governance:approval_request:approve", "governance:approval_request:deny"},
			RequiredScopes: []string{"governance:incident_aggregate:show"},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		res, view, err := s.ShowNonCatalog(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedIncidentAggregateNonCatalog(res, view)
		return vres, nil
	}
}

// NewIndexEndpoint returns an endpoint function that calls the method "index"
// of service "IncidentAggregate".
func NewIndexEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*IndexPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "GlobalSession",
			Scopes:         []string{"governance:policy_template:compile", "governance:policy_template:upload", "governance:policy_template:update", "governance:policy_template:delete", "governance:policy_template:show", "governance:policy_template:index", "governance:policy_template:retrieve_data", "governance:published_template:create", "governance:published_template:update", "governance:published_template:hide", "governance:published_template:unhide", "governance:published_template:delete", "governance:published_template:show", "governance:published_template:index", "governance:applied_policy:create", "governance:applied_policy:delete", "governance:applied_policy:show", "governance:applied_policy:show_log", "governance:applied_policy:index", "governance:applied_policy:evaluate", "governance:policy_aggregate:create", "governance:policy_aggregate:update", "governance:policy_aggregate:delete", "governance:policy_aggregate:show", "governance:policy_aggregate:index", "governance:incident:resolve", "governance:incident:show", "governance:incident:index", "governance:archived_incident:show", "governance:archived_incident:index", "governance:incident_aggregate:show", "governance:incident_aggregate:index", "governance:approval_request:show", "governance:approval_request:index", "governance:approval_request:approve", "governance:approval_request:deny"},
			RequiredScopes: []string{"governance:incident_aggregate:index"},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		res, err := s.Index(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedIncidentAggregateList(res, "default")
		return vres, nil
	}
}
